// auto-generated: "lalrpop 0.22.2"
// sha3: 3a091de9ea4a2e88cf9498285637c75941db7fe8609967664cea07366762c6ba
use std::str::FromStr;
use std::sync::Arc;
use crate::validator::cedar_schema::err::{RawErrorRecovery, UserError};
use crate::parser::{Node, Loc, unescape::to_unescaped_string, cst::Ref};
use crate::ast::{Id, AnyId, Annotations};
use smol_str::SmolStr;
use smol_str::ToSmolStr;
use crate::validator::cedar_schema::ast::{
    Path,
    EntityDecl,
    StandardEntityDecl,
    EnumEntityDecl,
    Declaration,
    Namespace,
    Schema as ASchema,
    Type as SType,
    AttrDecl,
    ActionDecl,
    PR,
    AppDecl,
    TypeDecl,
    PrimitiveType,
    QualName,
    PRAppDecl,
    deduplicate_annotations,
    Annotated,
};
use nonempty::{NonEmpty, nonempty};
use itertools::Either;
use std::collections::BTreeMap;
use lalrpop_util::{ParseError, ErrorRecovery};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
#[allow(unused_extern_crates)]
extern crate alloc;

#[rustfmt::skip]
#[allow(explicit_outlives_requirements, non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::match_single_binding)]
mod __parse__Schema {

    use std::str::FromStr;
    use std::sync::Arc;
    use crate::validator::cedar_schema::err::{RawErrorRecovery, UserError};
    use crate::parser::{Node, Loc, unescape::to_unescaped_string, cst::Ref};
    use crate::ast::{Id, AnyId, Annotations};
    use smol_str::SmolStr;
    use smol_str::ToSmolStr;
    use crate::validator::cedar_schema::ast::{
    Path,
    EntityDecl,
    StandardEntityDecl,
    EnumEntityDecl,
    Declaration,
    Namespace,
    Schema as ASchema,
    Type as SType,
    AttrDecl,
    ActionDecl,
    PR,
    AppDecl,
    TypeDecl,
    PrimitiveType,
    QualName,
    PRAppDecl,
    deduplicate_annotations,
    Annotated,
};
    use nonempty::{NonEmpty, nonempty};
    use itertools::Either;
    use std::collections::BTreeMap;
    use lalrpop_util::{ParseError, ErrorRecovery};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    #[allow(unused_extern_crates)]
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Option<&'input str>),
        Variant2(Node<SmolStr>),
        Variant3(Option<Node<SmolStr>>),
        Variant4(Option<Vec<Node<Annotated<AttrDecl>>>>),
        Variant5(Option<Option<Vec<Node<Annotated<AttrDecl>>>>>),
        Variant6(Node<Id>),
        Variant7(alloc::vec::Vec<Node<Id>>),
        Variant8(alloc::vec::Vec<Node<SmolStr>>),
        Variant9(Path),
        Variant10(alloc::vec::Vec<Path>),
        Variant11(Node<QualName>),
        Variant12(alloc::vec::Vec<Node<QualName>>),
        Variant13(Node<NonEmpty<Node<AppDecl>>>),
        Variant14(Option<Node<NonEmpty<Node<AppDecl>>>>),
        Variant15((&'input str, &'input str, &'input str)),
        Variant16(Option<(&'input str, &'input str, &'input str)>),
        Variant17(Vec<Path>),
        Variant18(Option<Vec<Path>>),
        Variant19(NonEmpty<Node<QualName>>),
        Variant20(Option<NonEmpty<Node<QualName>>>),
        Variant21(Node<SType>),
        Variant22(Option<Node<SType>>),
        Variant23(usize),
        Variant24(Node<Declaration>),
        Variant25(Annotated<Node<Declaration>>),
        Variant26(alloc::vec::Vec<Annotated<Node<Declaration>>>),
        Variant27(Annotated<Namespace>),
        Variant28(Node<(Node<AnyId>, Option<Node<SmolStr>>)>),
        Variant29(alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>),
        Variant30(Node<AnyId>),
        Variant31(Vec<Node<Annotated<AttrDecl>>>),
        Variant32(NonEmpty<Node<Id>>),
        Variant33(Namespace),
        Variant34(NonEmpty<Node<SmolStr>>),
        Variant35(alloc::vec::Vec<Annotated<Namespace>>),
        Variant36(Option<Path>),
        Variant37(Node<PR>),
        Variant38(ASchema),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 7, 0, 0, 0, 8, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 9, 0, 0, 0, 8, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 7, 0, 0, 0, 8, 0, 0,
        // State 3
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 4
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 5
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 6
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 7
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 8
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 9
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 10
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 11
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 12
        101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 23, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 14
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 131,
        // State 15
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 27, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 16
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, 139,
        // State 18
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, 141,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, 0,
        // State 21
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 22
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 23
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 157,
        // State 24
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 25
        101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, -122, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 27
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 171,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, 173,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, 175,
        // State 31
        101, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23, -23, -23, 0, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0, 0,
        // State 32
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 33
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 34
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 35
        101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 193,
        // State 37
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 38
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 39
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 40
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 27, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 0,
        // State 41
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 50, 0,
        // State 42
        101, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, 0,
        // State 44
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 45
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 46
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 47
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 48
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 217,
        // State 49
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, 225,
        // State 50
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 51
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 52
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, -109,
        // State 53
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, -95,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, -98,
        // State 56
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, -110,
        // State 57
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, -107,
        // State 58
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 59
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, -102,
        // State 61
        101, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 81, 87, 91, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 0, -108,
        // State 62
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 87, 136, 92, 0, 0, 78, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 94, 28, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 146, 147, 0, 0, 0, -101,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, -125, 0, 0, -125, 0, 0, 0, -125, 0, -125,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, -158, 0, 0, -158, 0, 0, 0, -158, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, -157, 0, 0, -157, 0, 0, 0, -157, 0, 0,
        // State 67
        -76, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, -76, -76, -76, 0, 0, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, -62, 0, -62,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, -124, 0, 0, -124, 0, 0, 0, -124, 0, -124,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, -161, 0, 0, -161, 0, 0, 0, -161, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, -126, 0, 0, -126, 0, 0, 0, -126, 0, -126,
        // State 73
        -77, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, -77, -77, -77, -77, 0, 0, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, -63, 0, 0, -63, 0, 0, 0, -63, 0, -63,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, -162, 0, 0, -162, 0, 0, 0, -162, 0, 0,
        // State 76
        -73, 0, -73, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, -73, -73, -73, -73, 0, 0, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, 0, 0,
        // State 77
        -83, 0, -83, -83, 0, -83, -83, -83, -83, 0, -83, -83, -83, -83, -83, -83, -83, -83, 0, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83,
        // State 78
        -81, 0, -81, -81, 0, -81, -81, -81, -81, 0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81,
        // State 79
        -86, 0, -86, -86, 0, -86, -86, -86, -86, 0, -86, -86, -86, -86, -86, -86, -86, -86, 0, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86,
        // State 80
        -88, 0, -88, -88, 0, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        // State 81
        -85, 0, -85, -85, 0, -85, -85, -85, -85, 0, -85, -85, -85, -85, -85, -85, -85, -85, 0, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85,
        // State 82
        -79, 0, -79, -79, 0, -79, -79, -79, -79, 0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79,
        // State 83
        -93, 0, -93, -93, 0, -93, -93, -93, -93, 0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93,
        // State 84
        -94, 0, -94, -94, 0, -94, -94, -94, -94, 0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94,
        // State 85
        -92, 0, -92, -92, 0, -92, -92, -92, -92, 0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
        // State 86
        -89, 0, -89, -89, 0, -89, -89, -89, -89, 0, -89, -89, -89, -89, -89, -89, -89, -89, 0, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89,
        // State 87
        -78, 0, -78, -78, 0, -78, -78, -78, -78, 0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
        // State 88
        -82, 0, -82, -82, 0, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
        // State 89
        -84, 0, -84, -84, 0, -84, -84, -84, -84, 0, -84, -84, -84, -84, -84, -84, -84, -84, 0, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84,
        // State 90
        -80, 0, -80, -80, 0, -80, -80, -80, -80, 0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
        // State 91
        -90, 0, -90, -90, 0, -90, -90, -90, -90, 0, -90, -90, -90, -90, -90, -90, -90, -90, 0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90,
        // State 92
        -87, 0, -87, -87, 0, -87, -87, -87, -87, 0, -87, -87, -87, -87, -87, -87, -87, -87, 0, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
        // State 93
        -91, 0, -91, -91, 0, -91, -91, -91, -91, 0, -91, -91, -91, -91, -91, -91, -91, -91, 0, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91,
        // State 94
        0, 0, 0, 0, 0, -150, -150, -150, -150, 0, -150, -150, -150, 0, 0, 0, 0, 0, 0, -150, 0, -150, -150, 0, 0, -150, -150, 0, 0, 0, -150, 0, -150, -150,
        // State 95
        0, 0, 0, 0, 0, -152, -152, 0, -152, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, -152, -152, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 110, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -165, -165, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 113, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, -156, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, -153, -153, 0, -153, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, -153, 0, -153, -153, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, -185, -185, -185, 0, -185, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, -185, 0, -185, -185, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 115, 0, 0, -163, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, -163, 0, 0, 0, -163, 0, -163, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 16, 0, 0, 0, 17, 0, 15, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, -151, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, -151, 0, 0, 0, -151, 0, -151, 0,
        // State 104
        0, 0, 0, 0, 0, -171, 0, 120, -171, 0, -171, -171, 0, 0, 0, 0, 0, 0, 0, -171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -171, 0, -171, -171,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0,
        // State 108
        0, 0, 0, 0, 0, 122, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, -166, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        -26, 0, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, -26, 0, 0, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, -61, 0, 0, -61, 0, 0, 0, -61, 0, -61,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
        // State 113
        0, 0, 0, 0, 0, 128, 0, 0, -164, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, -164, 0, 0, 0, -164, 0, -164, 0,
        // State 114
        0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, -20, -20, 0, 0, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, -148, 0, 0, -148, 0, 0, 0, -148, 0, -148,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, -172, 0, 137, -172, 0, -172, -172, 0, 0, 0, 0, 0, 0, 0, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172, 0, -172, -172,
        // State 119
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23, -23, -23, 0, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0, 0,
        // State 120
        0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        -27, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, -27, 0, 0, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
        // State 123
        0, 0, 0, 0, 0, -152, 0, 32, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, -152, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, -181, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, -181, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21, -21, -21, 0, 0, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
        // State 129
        0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 37, 0,
        // State 132
        0, 0, 0, 0, 0, -127, 0, 0, -127, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, -127, -127,
        // State 133
        0, 0, 0, 0, 0, -189, 0, 0, -189, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, -80, 0, -80, -80, 40, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80,
        // State 136
        0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, -66, 0, -66,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, -68, 0, 0, -68, 0, 0, 0, -68, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, -70, 0, 0, -70, 0, 0, 0, -70, 0, 0,
        // State 141
        -72, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, -72, -72, -72, -72, 0, 0, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
        // State 143
        0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, -60, 0, 0, -60, 0, 0, 0, -60, 0, -60,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
        // State 157
        0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
        // State 159
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, -144, 0, 0, -144, 0, 0, 0, -144, 0, -144,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, -146, 0, 0, -146, 0, 0, 0, -146, 0, -146,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, -147, 0, 0, -147, 0, 0, 0, -147, 0, -147,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
        // State 170
        0, 0, 0, 0, 0, -192, 0, 0, -192, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, -67, 0, -67,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, -69, 0, 0, -69, 0, 0, 0, -69, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, -193, 0, 0, -193, 0, 0, 0, -193, 0, -193,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, 0, -71, 0, 0, 0, -71, 0, 0,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, -59, 0, 0, -59, 0, 0, 0, -59, 0, -59,
        // State 177
        0, 0, 0, 0, 0, -179, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, -179, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
        // State 179
        0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        -32, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, -32, -32, -32, 0, 0, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -183, -183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, -136, 0, 0, -136, 0, 0, 0, -136, 0, -136,
        // State 184
        0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, -140, 0, 0, -140, 0, 0, 0, -140, 0, -140,
        // State 186
        0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 189
        -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        0, 0, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, -128, 0, 0, -128, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, -128, -128,
        // State 196
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29, -29, -29, 0, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, 0, 0,
        // State 197
        0, 0, 0, 0, 0, -191, 0, 0, -191, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191,
        // State 198
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 199
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, -57, 0, 0, -57, 0, 0, 0, -57, 0, -57,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0,
        // State 201
        0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96,
        // State 202
        0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99,
        // State 203
        0, 0, 0, 0, 0, -180, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, -180, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 206
        -33, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, -33, 0, 0, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, 0, 0,
        // State 207
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, -132, 0, 0, -132, 0, 0, 0, -132, 0, -132,
        // State 208
        0, 0, 0, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114,
        // State 210
        0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 211
        0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111,
        // State 212
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, -143, 0, 0, -143, 0, 0, 0, -143, 0, -143,
        // State 213
        -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, -149, 0, 0, -149, 0, 0, 0, -149, 0, -149,
        // State 215
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
        // State 216
        0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 217
        0, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
        // State 218
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, -142, 0, 0, -142, 0, 0, 0, -142, 0, -142,
        // State 219
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, -145, 0, 0, -145, 0, 0, 0, -145, 0, -145,
        // State 220
        0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30, 0, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, 0,
        // State 221
        0, 0, 0, 0, 0, -190, 0, 0, -190, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190,
        // State 222
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
        // State 223
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
        // State 224
        0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104,
        // State 225
        0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 226
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, -58, 0, 0, -58, 0, 0, 0, -58, 0, -58,
        // State 227
        0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 228
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, -135, 0, 0, -135, 0, 0, 0, -135, 0, -135,
        // State 229
        0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112,
        // State 230
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, -139, 0, 0, -139, 0, 0, 0, -139, 0, -139,
        // State 231
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117,
        // State 232
        0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
        // State 233
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, -134, 0, 0, -134, 0, 0, 0, -134, 0, -134,
        // State 234
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, -138, 0, 0, -138, 0, 0, 0, -138, 0, -138,
        // State 235
        0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 236
        0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 237
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97,
        // State 238
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100,
        // State 239
        0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103,
        // State 240
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, -56, 0, 0, -56, 0, 0, 0, -56, 0, -56,
        // State 241
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 0,
        // State 242
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, -131, 0, 0, -131, 0, 0, 0, -131, 0, -131,
        // State 243
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118,
        // State 244
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115,
        // State 245
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, -130, 0, 0, -130, 0, 0, 0, -130, 0, -130,
        // State 246
        0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 247
        0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 248
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, -141, 0, 0, -141, 0, 0, 0, -141, 0, -141,
        // State 249
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, -55, 0, 0, -55, 0, 0, 0, -55, 0, -55,
        // State 250
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106,
        // State 251
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
        // State 252
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116,
        // State 253
        0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 254
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, -133, 0, 0, -133, 0, 0, 0, -133, 0, -133,
        // State 255
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, -137, 0, 0, -137, 0, 0, 0, -137, 0, -137,
        // State 256
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105,
        // State 257
        0, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 258
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, -129, 0, 0, -129, 0, 0, 0, -129, 0, -129,
        // State 259
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, -54, 0, 0, -54, 0, 0, 0, -54, 0, -54,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 34 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -187,
        // State 1
        0,
        // State 2
        -188,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        -125,
        // State 65
        -158,
        // State 66
        -157,
        // State 67
        0,
        // State 68
        -62,
        // State 69
        -124,
        // State 70
        -161,
        // State 71
        -194,
        // State 72
        -126,
        // State 73
        0,
        // State 74
        -63,
        // State 75
        -162,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        -61,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        -148,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        -68,
        // State 139
        0,
        // State 140
        -70,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        -60,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        -144,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        -146,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        -147,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        -69,
        // State 173
        -193,
        // State 174
        -71,
        // State 175
        0,
        // State 176
        -59,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        -136,
        // State 184
        0,
        // State 185
        -140,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        -57,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        -132,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        -143,
        // State 213
        0,
        // State 214
        -149,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        -142,
        // State 219
        -145,
        // State 220
        0,
        // State 221
        0,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        -58,
        // State 227
        0,
        // State 228
        -135,
        // State 229
        0,
        // State 230
        -139,
        // State 231
        0,
        // State 232
        0,
        // State 233
        -134,
        // State 234
        -138,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        -56,
        // State 241
        0,
        // State 242
        -131,
        // State 243
        0,
        // State 244
        0,
        // State 245
        -130,
        // State 246
        0,
        // State 247
        0,
        // State 248
        -141,
        // State 249
        -55,
        // State 250
        0,
        // State 251
        0,
        // State 252
        0,
        // State 253
        0,
        // State 254
        -133,
        // State 255
        -137,
        // State 256
        0,
        // State 257
        0,
        // State 258
        -129,
        // State 259
        -54,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            8 => 10,
            10 => match state {
                13 | 22 | 32 => 21,
                _ => 11,
            },
            12 => 9,
            14 => 38,
            16 => 32,
            18 => 35,
            31 => 64,
            32 => match state {
                17 | 19 => 137,
                28 | 30 => 171,
                _ => 65,
            },
            34 => match state {
                19 => 30,
                _ => 28,
            },
            35 => 66,
            36 => match state {
                1 | 24 | 29 => 73,
                _ => 67,
            },
            38 => match state {
                0 | 2 => 1,
                17 | 19 | 28 | 30 => 29,
                _ => 24,
            },
            39 => match state {
                3 => 76,
                _ => 94,
            },
            40 => match state {
                43 => 204,
                54 => 237,
                55 => 238,
                60 => 250,
                63 => 256,
                _ => 142,
            },
            41 => match state {
                23 => 155,
                27 => 169,
                36 => 191,
                48 => 215,
                49 => 223,
                52 => 231,
                56 => 243,
                57 => 244,
                61 => 252,
                _ => 128,
            },
            43 => 166,
            44 => match state {
                1 | 29 => 74,
                _ => 68,
            },
            45 => match state {
                40 => 201,
                _ => 131,
            },
            46 => 69,
            47 => match state {
                4 | 9 | 14 | 23..=24 | 27 | 36 | 48..=49 | 52 | 56..=57 | 61 => 95,
                5 => 101,
                7 => 106,
                10 => 113,
                11 => 118,
                13 | 22 | 32 => 123,
                21 => 148,
                _ => 104,
            },
            48 => 102,
            49 => match state {
                4 => 96,
                9 => 108,
                13 | 22 | 32 => 124,
                24 => 157,
                _ => 129,
            },
            51 => 97,
            52 => match state {
                2 => 75,
                _ => 70,
            },
            54 => 2,
            55 => 103,
            56 => 98,
            57 => 152,
            58 => 161,
            59 => match state {
                6 => 105,
                8 => 107,
                15 | 40 => 132,
                26 => 167,
                38 => 194,
                41 => 202,
                _ => 133,
            },
            62 => 143,
            63 => match state {
                22 => 153,
                32 => 179,
                _ => 125,
            },
            64 => 126,
            65 => 154,
            66 => match state {
                12 => 120,
                25 => 162,
                31 => 177,
                35 => 188,
                42 => 203,
                _ => 99,
            },
            67 => 163,
            68 => 71,
            69 => match state {
                18 => 139,
                33 => 186,
                34 => 187,
                37 => 193,
                39 => 198,
                44 => 208,
                45 => 209,
                46 => 210,
                47 => 211,
                50 => 227,
                51 => 229,
                53 => 235,
                58 => 246,
                59 => 247,
                62 => 253,
                _ => 134,
            },
            70 => 72,
            _ => 0,
        }
    }
    #[allow(clippy::needless_raw_string_hashes)]
    const __TERMINAL: &[&str] = &[
        r###"STRINGLIT"###,
        r###"NUMBER"###,
        r###"IDENTIFIER"###,
        r###""(""###,
        r###"")""###,
        r###"",""###,
        r###"":""###,
        r###""::""###,
        r###"";""###,
        r###""<""###,
        r###""=""###,
        r###"">""###,
        r###""?""###,
        r###""@""###,
        r###"BOOL"###,
        r###"LONG"###,
        r###"SET"###,
        r###"STRING"###,
        r###""[""###,
        r###""]""###,
        r###"ACTION"###,
        r###"APPLIESTO"###,
        r###"ATTRIBUTES"###,
        r###"CONTEXT"###,
        r###"ENTITY"###,
        r###"ENUM"###,
        r###"IN"###,
        r###"NAMESPACE"###,
        r###"PRINCIPAL"###,
        r###"RESOURCE"###,
        r###"TAGS"###,
        r###"TYPE"###,
        r###""{""###,
        r###""}""###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        'err,
        's,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: 'err,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), &(), &())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, 'err, 's>
    where 'input: 'err
    {
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    }
    impl<'input, 'err, 's> __state_machine::ParserDefinition for __StateMachine<'input, 'err, 's>
    where 'input: 'err
    {
        type Location = usize;
        type Error = UserError;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = ASchema;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 34 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), &(), &())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.errors,
                self.src,
                self.keep_src,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), &(), &())>)
        }
    }
    fn __token_to_integer<
        'input,
        'err,
        's,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> Option<usize>
    {
        #[warn(unused_variables)]
        match __token {
            Token(0, _) if true => Some(0),
            Token(2, _) if true => Some(1),
            Token(3, _) if true => Some(2),
            Token(5, _) if true => Some(3),
            Token(6, _) if true => Some(4),
            Token(7, _) if true => Some(5),
            Token(8, _) if true => Some(6),
            Token(9, _) if true => Some(7),
            Token(10, _) if true => Some(8),
            Token(11, _) if true => Some(9),
            Token(12, _) if true => Some(10),
            Token(13, _) if true => Some(11),
            Token(14, _) if true => Some(12),
            Token(15, _) if true => Some(13),
            Token(16, _) if true => Some(14),
            Token(17, _) if true => Some(15),
            Token(18, _) if true => Some(16),
            Token(19, _) if true => Some(17),
            Token(20, _) if true => Some(18),
            Token(21, _) if true => Some(19),
            Token(22, _) if true => Some(20),
            Token(23, _) if true => Some(21),
            Token(24, _) if true => Some(22),
            Token(25, _) if true => Some(23),
            Token(26, _) if true => Some(24),
            Token(27, _) if true => Some(25),
            Token(28, _) if true => Some(26),
            Token(29, _) if true => Some(27),
            Token(30, _) if true => Some(28),
            Token(31, _) if true => Some(29),
            Token(32, _) if true => Some(30),
            Token(33, _) if true => Some(31),
            Token(34, _) if true => Some(32),
            Token(35, _) if true => Some(33),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'err,
        's,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 => match __token {
                Token(0, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        'err,
        's,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'err, 's>>
    where
        'input: 'err,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 6,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 12,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 14,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 21,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 22,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 22,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 24,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 27,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 28,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 29,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 30,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 31,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 31,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 31,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 31,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 31,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 31,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 31,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 31,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 33,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 35,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 35,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 35,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 35,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 36,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 37,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 38,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 40,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 41,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 42,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 43,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 43,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 46,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 46,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 46,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 46,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 46,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 46,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 50,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 50,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 53,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 55,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 56,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 58,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 60,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 61,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 63,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 63,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 64,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 68,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 69,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 69,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 69,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 70,
                }
            }
            193 => __state_machine::SimulatedReduce::Accept,
            194 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            _ => panic!("invalid reduction index {__reduce_index}",)
        }
    }
    pub struct SchemaParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl Default for SchemaParser { fn default() -> Self { Self::new() } }
    impl SchemaParser {
        pub fn new() -> SchemaParser {
            let __builder = super::__intern_token::new_builder();
            SchemaParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'err,
            's,
        >(
            &self,
            errors: &'err mut Vec<RawErrorRecovery<'input>>,
            src: &'s Arc<str>,
            keep_src: bool,
            input: &'input str,
        ) -> Result<ASchema, __lalrpop_util::ParseError<usize, Token<'input>, UserError>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    errors,
                    src,
                    keep_src,
                    input,
                    __phantom: core::marker::PhantomData::<(&(), &(), &())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        'err,
        's,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> bool
    where
        'input: 'err,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), &(), &())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> Option<Result<ASchema,__lalrpop_util::ParseError<usize, Token<'input>, UserError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            1 => {
                __reduce1(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            2 => {
                __reduce2(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            3 => {
                __reduce3(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            4 => {
                __reduce4(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            5 => {
                __reduce5(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            6 => {
                __reduce6(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            7 => {
                __reduce7(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            8 => {
                __reduce8(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            9 => {
                __reduce9(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            10 => {
                __reduce10(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            11 => {
                __reduce11(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            12 => {
                __reduce12(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            13 => {
                __reduce13(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            14 => {
                __reduce14(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            15 => {
                __reduce15(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            16 => {
                __reduce16(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            17 => {
                __reduce17(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            18 => {
                __reduce18(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            19 => {
                __reduce19(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            20 => {
                __reduce20(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            21 => {
                __reduce21(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            22 => {
                __reduce22(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            23 => {
                __reduce23(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            24 => {
                __reduce24(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            25 => {
                __reduce25(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            26 => {
                __reduce26(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            27 => {
                __reduce27(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            28 => {
                __reduce28(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            29 => {
                __reduce29(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            30 => {
                __reduce30(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            31 => {
                __reduce31(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            32 => {
                __reduce32(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            33 => {
                __reduce33(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            34 => {
                __reduce34(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            35 => {
                __reduce35(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            36 => {
                __reduce36(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            37 => {
                __reduce37(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            38 => {
                __reduce38(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            39 => {
                __reduce39(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            40 => {
                __reduce40(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            41 => {
                __reduce41(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            42 => {
                __reduce42(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            43 => {
                __reduce43(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            44 => {
                __reduce44(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            45 => {
                __reduce45(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            46 => {
                __reduce46(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            47 => {
                __reduce47(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            48 => {
                __reduce48(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            49 => {
                __reduce49(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            50 => {
                __reduce50(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            51 => {
                __reduce51(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            52 => {
                __reduce52(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            53 => {
                __reduce53(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            54 => {
                __reduce54(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            55 => {
                __reduce55(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            56 => {
                __reduce56(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            57 => {
                __reduce57(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            58 => {
                __reduce58(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            59 => {
                __reduce59(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            60 => {
                __reduce60(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            61 => {
                // Annotated<Decl> = Decl => ActionFn(397);
                let __sym0 = __pop_Variant24(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action397::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (1, 32)
            }
            62 => {
                // Annotated<Decl> = Annotation+, Decl => ActionFn(398);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant24(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action398::<>(errors, src, keep_src, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (2, 32)
            }
            63 => {
                __reduce63(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            64 => {
                __reduce64(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            65 => {
                __reduce65(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            66 => {
                __reduce66(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            67 => {
                // Annotated<Namedspace> = NAMESPACE, Path, "{", "}" => ActionFn(413);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant9(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action413::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (4, 35)
            }
            68 => {
                // Annotated<Namedspace> = NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(414);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant26(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant9(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action414::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (5, 35)
            }
            69 => {
                // Annotated<Namedspace> = Annotation+, NAMESPACE, Path, "{", "}" => ActionFn(415);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant9(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action415::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (5, 35)
            }
            70 => {
                // Annotated<Namedspace> = Annotation+, NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(416);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant26(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant9(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action416::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (6, 35)
            }
            71 => {
                __reduce71(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            72 => {
                __reduce72(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            73 => {
                __reduce73(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            74 => {
                __reduce74(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            75 => {
                __reduce75(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            76 => {
                __reduce76(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            77 => {
                __reduce77(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            78 => {
                __reduce78(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            79 => {
                __reduce79(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            80 => {
                __reduce80(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            81 => {
                __reduce81(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            82 => {
                __reduce82(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            83 => {
                __reduce83(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            84 => {
                __reduce84(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            85 => {
                __reduce85(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            86 => {
                __reduce86(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            87 => {
                __reduce87(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            88 => {
                __reduce88(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            89 => {
                __reduce89(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            90 => {
                __reduce90(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            91 => {
                __reduce91(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            92 => {
                __reduce92(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            93 => {
                __reduce93(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            94 => {
                __reduce94(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            95 => {
                __reduce95(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            96 => {
                __reduce96(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            97 => {
                __reduce97(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            98 => {
                __reduce98(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            99 => {
                __reduce99(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            100 => {
                __reduce100(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            101 => {
                __reduce101(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            102 => {
                __reduce102(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            103 => {
                __reduce103(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            104 => {
                __reduce104(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            105 => {
                __reduce105(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            106 => {
                // AttrDecls = Name, "?", ":", Type, "," => ActionFn(401);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action401::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            107 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type, "," => ActionFn(402);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action402::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            108 => {
                // AttrDecls = Name, ":", Type, "," => ActionFn(403);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action403::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            109 => {
                // AttrDecls = Annotation+, Name, ":", Type, "," => ActionFn(404);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action404::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            110 => {
                // AttrDecls = Name, "?", ":", Type => ActionFn(405);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action405::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            111 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type => ActionFn(406);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action406::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            112 => {
                // AttrDecls = Name, ":", Type => ActionFn(407);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action407::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (3, 41)
            }
            113 => {
                // AttrDecls = Annotation+, Name, ":", Type => ActionFn(408);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action408::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            114 => {
                // AttrDecls = Name, "?", ":", Type, ",", AttrDecls => ActionFn(409);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant31(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action409::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            115 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type, ",", AttrDecls => ActionFn(410);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant31(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action410::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (7, 41)
            }
            116 => {
                // AttrDecls = Name, ":", Type, ",", AttrDecls => ActionFn(411);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant31(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action411::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            117 => {
                // AttrDecls = Annotation+, Name, ":", Type, ",", AttrDecls => ActionFn(412);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant31(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action412::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            118 => {
                __reduce118(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            119 => {
                __reduce119(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            120 => {
                __reduce120(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            121 => {
                __reduce121(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            122 => {
                __reduce122(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            123 => {
                __reduce123(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            124 => {
                __reduce124(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            125 => {
                __reduce125(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            126 => {
                __reduce126(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            127 => {
                __reduce127(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            128 => {
                __reduce128(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            129 => {
                __reduce129(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            130 => {
                __reduce130(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            131 => {
                __reduce131(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            132 => {
                __reduce132(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            133 => {
                __reduce133(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            134 => {
                __reduce134(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            135 => {
                __reduce135(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            136 => {
                __reduce136(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            137 => {
                __reduce137(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            138 => {
                __reduce138(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            139 => {
                __reduce139(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            140 => {
                __reduce140(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            141 => {
                __reduce141(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            142 => {
                __reduce142(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            143 => {
                __reduce143(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            144 => {
                __reduce144(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            145 => {
                __reduce145(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            146 => {
                __reduce146(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            147 => {
                __reduce147(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            148 => {
                __reduce148(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            149 => {
                // Ident = AnyIdent => ActionFn(25);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action25::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 47)
            }
            150 => {
                __reduce150(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            151 => {
                __reduce151(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            152 => {
                __reduce152(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            153 => {
                __reduce153(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            154 => {
                __reduce154(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            155 => {
                __reduce155(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            156 => {
                __reduce156(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            157 => {
                __reduce157(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            158 => {
                __reduce158(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            159 => {
                __reduce159(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            160 => {
                __reduce160(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            161 => {
                __reduce161(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            162 => {
                __reduce162(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            163 => {
                __reduce163(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            164 => {
                __reduce164(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            165 => {
                __reduce165(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            166 => {
                __reduce166(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            167 => {
                __reduce167(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            168 => {
                __reduce168(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            169 => {
                __reduce169(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            170 => {
                __reduce170(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            171 => {
                __reduce171(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            172 => {
                __reduce172(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            173 => {
                __reduce173(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            174 => {
                __reduce174(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            175 => {
                __reduce175(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            176 => {
                __reduce176(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            177 => {
                __reduce177(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            178 => {
                __reduce178(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            179 => {
                __reduce179(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            180 => {
                __reduce180(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            181 => {
                __reduce181(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            182 => {
                __reduce182(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            183 => {
                __reduce183(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            184 => {
                // STR = STRINGLIT => ActionFn(390);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action390::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (1, 66)
            }
            185 => {
                __reduce185(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            186 => {
                __reduce186(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            187 => {
                __reduce187(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            188 => {
                __reduce188(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            189 => {
                __reduce189(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            190 => {
                __reduce190(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            191 => {
                __reduce191(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            192 => {
                __reduce192(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            193 => {
                // __Schema = Schema => ActionFn(0);
                let __sym0 = __pop_Variant38(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(errors, src, keep_src, input, __sym0);
                return Some(Ok(__nt));
            }
            194 => {
                __reduce194(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            _ => panic!("invalid action code {__action}")
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, &'input str, &'input str), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ASchema, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Annotated<Namespace>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Annotated<Node<Declaration>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Namespace, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<(Node<AnyId>, Option<Node<SmolStr>>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<AnyId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Declaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<NonEmpty<Node<AppDecl>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<PR>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<QualName>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SType>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SmolStr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<Id>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<QualName>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<(&'input str, &'input str, &'input str)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<NonEmpty<Node<AppDecl>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<SType>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<NonEmpty<Node<QualName>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Option<Vec<Node<Annotated<AttrDecl>>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<Path>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Path, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Node<Annotated<AttrDecl>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Annotated<Namespace>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Id>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<QualName>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ","? = "," => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action78::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    fn __reduce1<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ","? =  => ActionFn(79);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action79::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    fn __reduce2<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action97::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 1)
    }
    fn __reduce3<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action98::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 1)
    }
    fn __reduce4<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "?"? = "?" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 2)
    }
    fn __reduce5<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "?"? =  => ActionFn(75);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action75::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 2)
    }
    fn __reduce6<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")") = "(", STR, ")" => ActionFn(111);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action111::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 3)
    }
    fn __reduce7<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")")? = "(", STR, ")" => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action152::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 4)
    }
    fn __reduce8<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")")? =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action110::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    fn __reduce9<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "=", "{", AttrDecls, "}" => ActionFn(155);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action155::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    fn __reduce10<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "=", "{", "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action156::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 5)
    }
    fn __reduce11<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "{", AttrDecls, "}" => ActionFn(157);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action157::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 5)
    }
    fn __reduce12<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "{", "}" => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    fn __reduce13<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "=", "{", AttrDecls, "}" => ActionFn(167);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action167::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (4, 6)
    }
    fn __reduce14<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "=", "{", "}" => ActionFn(168);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action168::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 6)
    }
    fn __reduce15<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "{", AttrDecls, "}" => ActionFn(169);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action169::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 6)
    }
    fn __reduce16<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "{", "}" => ActionFn(170);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action170::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    fn __reduce17<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? =  => ActionFn(93);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action93::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    fn __reduce18<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",") = Ident, "," => ActionFn(121);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action121::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    fn __reduce19<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = Ident, "," => ActionFn(176);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action176::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 8)
    }
    fn __reduce20<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = (<Ident> ",")+, Ident, "," => ActionFn(177);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action177::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    fn __reduce21<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::") = Ident, "::" => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action73::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 9)
    }
    fn __reduce22<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::")+ = Ident, "::" => ActionFn(178);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action178::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 10)
    }
    fn __reduce23<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::")+ = (<Ident> "::")+, Ident, "::" => ActionFn(179);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action179::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 10)
    }
    fn __reduce24<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",") = Name, "," => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action124::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 11)
    }
    fn __reduce25<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = Name, "," => ActionFn(180);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action180::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 12)
    }
    fn __reduce26<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = (<Name> ",")+, Name, "," => ActionFn(181);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action181::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 12)
    }
    fn __reduce27<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",") = Path, "," => ActionFn(133);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action133::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 13)
    }
    fn __reduce28<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",")+ = Path, "," => ActionFn(182);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action182::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 14)
    }
    fn __reduce29<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",")+ = (<Path> ",")+, Path, "," => ActionFn(183);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action183::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 14)
    }
    fn __reduce30<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",") = QualName, "," => ActionFn(127);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action127::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 15)
    }
    fn __reduce31<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",")+ = QualName, "," => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action184::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 16)
    }
    fn __reduce32<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",")+ = (<QualName> ",")+, QualName, "," => ActionFn(185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action185::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 16)
    }
    fn __reduce33<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",") = STR, "," => ActionFn(130);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action130::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 17)
    }
    fn __reduce34<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",")+ = STR, "," => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action186::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 18)
    }
    fn __reduce35<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",")+ = (<STR> ",")+, STR, "," => ActionFn(187);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action187::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 18)
    }
    fn __reduce36<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}") = APPLIESTO, "{", AppDecls, "}" => ActionFn(85);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action85::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 19)
    }
    fn __reduce37<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}")? = APPLIESTO, "{", AppDecls, "}" => ActionFn(188);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action188::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 20)
    }
    fn __reduce38<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}")? =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action84::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 20)
    }
    fn __reduce39<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}") = ATTRIBUTES, "{", "}" => ActionFn(82);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action82::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    fn __reduce40<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}")? = ATTRIBUTES, "{", "}" => ActionFn(191);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action191::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 22)
    }
    fn __reduce41<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}")? =  => ActionFn(81);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action81::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 22)
    }
    fn __reduce42<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>) = IN, EntTypes => ActionFn(101);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action101::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    fn __reduce43<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>)? = IN, EntTypes => ActionFn(196);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action196::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    fn __reduce44<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>)? =  => ActionFn(100);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action100::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 24)
    }
    fn __reduce45<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>) = IN, QualNameOrQualNames => ActionFn(88);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action88::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 25)
    }
    fn __reduce46<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>)? = IN, QualNameOrQualNames => ActionFn(207);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action207::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 26)
    }
    fn __reduce47<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>)? =  => ActionFn(87);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action87::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    fn __reduce48<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>) = TAGS, Type => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action91::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 27)
    }
    fn __reduce49<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>)? = TAGS, Type => ActionFn(216);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action216::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 28)
    }
    fn __reduce50<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>)? =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action90::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 28)
    }
    fn __reduce51<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(112);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action112::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 29)
    }
    fn __reduce52<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(108);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action108::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    fn __reduce53<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, APPLIESTO, "{", AppDecls, "}", ATTRIBUTES, "{", "}", ";" => ActionFn(316);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action316::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (12, 31)
    }
    fn __reduce54<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, APPLIESTO, "{", AppDecls, "}", ATTRIBUTES, "{", "}", ";" => ActionFn(317);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action317::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 31)
    }
    fn __reduce55<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, APPLIESTO, "{", AppDecls, "}", ";" => ActionFn(318);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action318::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 31)
    }
    fn __reduce56<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, APPLIESTO, "{", AppDecls, "}", ";" => ActionFn(319);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action319::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 31)
    }
    fn __reduce57<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, ATTRIBUTES, "{", "}", ";" => ActionFn(320);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action320::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 31)
    }
    fn __reduce58<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, ATTRIBUTES, "{", "}", ";" => ActionFn(321);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action321::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 31)
    }
    fn __reduce59<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, ";" => ActionFn(322);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action322::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 31)
    }
    fn __reduce60<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, ";" => ActionFn(323);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action323::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 31)
    }
    fn __reduce63<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>* =  => ActionFn(103);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action103::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 33)
    }
    fn __reduce64<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>* = Annotated<Decl>+ => ActionFn(104);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 33)
    }
    fn __reduce65<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>+ = Annotated<Decl> => ActionFn(115);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action115::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    fn __reduce66<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>+ = Annotated<Decl>+, Annotated<Decl> => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action116::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 34)
    }
    fn __reduce71<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", AnyIdent, "(", STR, ")" => ActionFn(324);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action324::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (5, 36)
    }
    fn __reduce72<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", AnyIdent => ActionFn(325);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action325::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 36)
    }
    fn __reduce73<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action76::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 37)
    }
    fn __reduce74<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation* = Annotation+ => ActionFn(77);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 37)
    }
    fn __reduce75<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation => ActionFn(117);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 38)
    }
    fn __reduce76<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation+, Annotation => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action118::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 38)
    }
    fn __reduce77<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = NAMESPACE => ActionFn(326);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action326::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce78<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ENTITY => ActionFn(327);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action327::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce79<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = SET => ActionFn(328);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action328::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce80<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = APPLIESTO => ActionFn(329);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action329::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce81<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = PRINCIPAL => ActionFn(330);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action330::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce82<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ACTION => ActionFn(331);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action331::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce83<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = RESOURCE => ActionFn(332);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action332::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce84<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = CONTEXT => ActionFn(333);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action333::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce85<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ATTRIBUTES => ActionFn(334);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action334::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce86<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = TAGS => ActionFn(335);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action335::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce87<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = BOOL => ActionFn(336);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action336::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce88<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = LONG => ActionFn(337);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action337::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce89<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = STRING => ActionFn(338);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action338::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce90<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = TYPE => ActionFn(339);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action339::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce91<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = IN => ActionFn(340);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action340::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce92<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ENUM => ActionFn(341);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action341::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce93<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = IDENTIFIER => ActionFn(342);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action342::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce94<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes, "," => ActionFn(343);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action343::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce95<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes => ActionFn(344);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action344::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 40)
    }
    fn __reduce96<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes, ",", AppDecls => ActionFn(345);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action345::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce97<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path, "," => ActionFn(346);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action346::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce98<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path => ActionFn(347);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action347::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 40)
    }
    fn __reduce99<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path, ",", AppDecls => ActionFn(348);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action348::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce100<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}", "," => ActionFn(349);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action349::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 40)
    }
    fn __reduce101<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}", "," => ActionFn(350);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action350::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce102<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}" => ActionFn(351);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action351::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce103<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}" => ActionFn(352);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action352::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce104<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}", ",", AppDecls => ActionFn(353);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action353::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (7, 40)
    }
    fn __reduce105<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}", ",", AppDecls => ActionFn(354);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action354::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 40)
    }
    fn __reduce118<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AttrDecls? = AttrDecls => ActionFn(95);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action95::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 42)
    }
    fn __reduce119<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AttrDecls? =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action96::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 42)
    }
    fn __reduce120<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> = Path => ActionFn(419);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action419::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 43)
    }
    fn __reduce121<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> =  => ActionFn(420);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action420::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 43)
    }
    fn __reduce122<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> = (<Path> ",")+, Path => ActionFn(62);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action62::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 43)
    }
    fn __reduce123<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = Entity => ActionFn(7);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce124<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = Action => ActionFn(8);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce125<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = TypeDecl => ActionFn(9);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce126<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // EntTypes = Path => ActionFn(56);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 45)
    }
    fn __reduce127<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // EntTypes = "[", Comma<Path>, "]" => ActionFn(57);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action57::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 45)
    }
    fn __reduce128<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(361);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant21(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant31(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action361::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (11, 46)
    }
    fn __reduce129<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", AttrDecls, "}", ";" => ActionFn(362);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant31(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action362::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce130<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(363);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action363::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce131<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", AttrDecls, "}", ";" => ActionFn(364);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action364::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce132<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", "}", TAGS, Type, ";" => ActionFn(365);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action365::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 46)
    }
    fn __reduce133<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", "}", ";" => ActionFn(366);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action366::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce134<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", "}", TAGS, Type, ";" => ActionFn(367);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action367::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce135<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", "}", ";" => ActionFn(368);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action368::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 46)
    }
    fn __reduce136<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(369);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant31(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action369::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 46)
    }
    fn __reduce137<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", AttrDecls, "}", ";" => ActionFn(370);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant31(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action370::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce138<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(371);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action371::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce139<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", AttrDecls, "}", ";" => ActionFn(372);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action372::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 46)
    }
    fn __reduce140<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", "}", TAGS, Type, ";" => ActionFn(373);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action373::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce141<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", "}", ";" => ActionFn(374);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action374::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce142<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", "}", TAGS, Type, ";" => ActionFn(375);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action375::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce143<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", "}", ";" => ActionFn(376);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action376::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce144<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, TAGS, Type, ";" => ActionFn(377);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action377::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce145<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, ";" => ActionFn(378);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action378::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce146<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, TAGS, Type, ";" => ActionFn(379);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action379::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce147<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, ";" => ActionFn(380);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action380::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 46)
    }
    fn __reduce148<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, ENUM, "[", STRs, "]", ";" => ActionFn(381);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant34(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action381::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce150<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Idents = NonEmptyComma<Ident> => ActionFn(50);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 48)
    }
    fn __reduce151<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Name = Ident => ActionFn(44);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 49)
    }
    fn __reduce152<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Name = STR => ActionFn(45);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 49)
    }
    fn __reduce153<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namedspace = NAMESPACE, Path, "{", "}" => ActionFn(395);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action395::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (4, 50)
    }
    fn __reduce154<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namedspace = NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(396);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant26(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action396::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (5, 50)
    }
    fn __reduce155<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Names = NonEmptyComma<Name> => ActionFn(51);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 51)
    }
    fn __reduce156<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace = Annotated<Namedspace> => ActionFn(5);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 52)
    }
    fn __reduce157<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace = Annotated<Decl> => ActionFn(383);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action383::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 52)
    }
    fn __reduce158<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace* =  => ActionFn(106);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action106::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 53)
    }
    fn __reduce159<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace* = Namespace+ => ActionFn(107);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 53)
    }
    fn __reduce160<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace+ = Namespace => ActionFn(113);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action113::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    fn __reduce161<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace+ = Namespace+, Namespace => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action114::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    fn __reduce162<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Ident> = Ident => ActionFn(69);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 55)
    }
    fn __reduce163<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Ident> = (<Ident> ",")+, Ident => ActionFn(70);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action70::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (2, 55)
    }
    fn __reduce164<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Name> = Name => ActionFn(67);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 56)
    }
    fn __reduce165<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Name> = (<Name> ",")+, Name => ActionFn(68);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action68::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 56)
    }
    fn __reduce166<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<QualName> = QualName => ActionFn(65);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 57)
    }
    fn __reduce167<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<QualName> = (<QualName> ",")+, QualName => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 57)
    }
    fn __reduce168<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<STR> = STR => ActionFn(63);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 58)
    }
    fn __reduce169<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<STR> = (<STR> ",")+, STR => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action64::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 58)
    }
    fn __reduce170<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path = Ident => ActionFn(421);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action421::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 59)
    }
    fn __reduce171<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path = (<Ident> "::")+, Ident => ActionFn(422);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action422::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 59)
    }
    fn __reduce172<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path? = Path => ActionFn(134);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 60)
    }
    fn __reduce173<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path? =  => ActionFn(135);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action135::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 60)
    }
    fn __reduce174<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PathInline = Ident => ActionFn(384);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action384::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 61)
    }
    fn __reduce175<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PathInline = (<Ident> "::")+, Ident => ActionFn(385);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action385::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 61)
    }
    fn __reduce176<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PrincipalOrResource = PRINCIPAL => ActionFn(386);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action386::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 62)
    }
    fn __reduce177<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PrincipalOrResource = RESOURCE => ActionFn(387);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action387::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 62)
    }
    fn __reduce178<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = Ident, "::", STR => ActionFn(423);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action423::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 63)
    }
    fn __reduce179<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = (<Ident> "::")+, Ident, "::", STR => ActionFn(424);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action424::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 63)
    }
    fn __reduce180<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = Name => ActionFn(389);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action389::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 63)
    }
    fn __reduce181<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNameOrQualNames = QualName => ActionFn(58);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 64)
    }
    fn __reduce182<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNameOrQualNames = "[", QualNames, "]" => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action59::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 64)
    }
    fn __reduce183<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNames = NonEmptyComma<QualName> => ActionFn(52);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 65)
    }
    fn __reduce185<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // STRs = NonEmptyComma<STR> => ActionFn(53);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 67)
    }
    fn __reduce186<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Schema =  => ActionFn(417);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action417::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 68)
    }
    fn __reduce187<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Schema = Namespace+ => ActionFn(418);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action418::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 68)
    }
    fn __reduce188<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = Path => ActionFn(20);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 69)
    }
    fn __reduce189<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = SET, "<", Type, ">" => ActionFn(391);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action391::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (4, 69)
    }
    fn __reduce190<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = "{", AttrDecls, "}" => ActionFn(392);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action392::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 69)
    }
    fn __reduce191<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = "{", "}" => ActionFn(393);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action393::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 69)
    }
    fn __reduce192<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // TypeDecl = TYPE, Ident, "=", Type, ";" => ActionFn(394);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action394::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 70)
    }
    fn __reduce194<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // __Type = Type => ActionFn(1);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 72)
    }
}
#[allow(unused_imports)]
pub use self::__parse__Schema::SchemaParser;

#[rustfmt::skip]
#[allow(explicit_outlives_requirements, non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::match_single_binding)]
mod __parse__Type {

    use std::str::FromStr;
    use std::sync::Arc;
    use crate::validator::cedar_schema::err::{RawErrorRecovery, UserError};
    use crate::parser::{Node, Loc, unescape::to_unescaped_string, cst::Ref};
    use crate::ast::{Id, AnyId, Annotations};
    use smol_str::SmolStr;
    use smol_str::ToSmolStr;
    use crate::validator::cedar_schema::ast::{
    Path,
    EntityDecl,
    StandardEntityDecl,
    EnumEntityDecl,
    Declaration,
    Namespace,
    Schema as ASchema,
    Type as SType,
    AttrDecl,
    ActionDecl,
    PR,
    AppDecl,
    TypeDecl,
    PrimitiveType,
    QualName,
    PRAppDecl,
    deduplicate_annotations,
    Annotated,
};
    use nonempty::{NonEmpty, nonempty};
    use itertools::Either;
    use std::collections::BTreeMap;
    use lalrpop_util::{ParseError, ErrorRecovery};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    #[allow(unused_extern_crates)]
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Option<&'input str>),
        Variant2(Node<SmolStr>),
        Variant3(Option<Node<SmolStr>>),
        Variant4(Option<Vec<Node<Annotated<AttrDecl>>>>),
        Variant5(Option<Option<Vec<Node<Annotated<AttrDecl>>>>>),
        Variant6(Node<Id>),
        Variant7(alloc::vec::Vec<Node<Id>>),
        Variant8(alloc::vec::Vec<Node<SmolStr>>),
        Variant9(Path),
        Variant10(alloc::vec::Vec<Path>),
        Variant11(Node<QualName>),
        Variant12(alloc::vec::Vec<Node<QualName>>),
        Variant13(Node<NonEmpty<Node<AppDecl>>>),
        Variant14(Option<Node<NonEmpty<Node<AppDecl>>>>),
        Variant15((&'input str, &'input str, &'input str)),
        Variant16(Option<(&'input str, &'input str, &'input str)>),
        Variant17(Vec<Path>),
        Variant18(Option<Vec<Path>>),
        Variant19(NonEmpty<Node<QualName>>),
        Variant20(Option<NonEmpty<Node<QualName>>>),
        Variant21(Node<SType>),
        Variant22(Option<Node<SType>>),
        Variant23(usize),
        Variant24(Node<Declaration>),
        Variant25(Annotated<Node<Declaration>>),
        Variant26(alloc::vec::Vec<Annotated<Node<Declaration>>>),
        Variant27(Annotated<Namespace>),
        Variant28(Node<(Node<AnyId>, Option<Node<SmolStr>>)>),
        Variant29(alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>),
        Variant30(Node<AnyId>),
        Variant31(Vec<Node<Annotated<AttrDecl>>>),
        Variant32(NonEmpty<Node<Id>>),
        Variant33(Namespace),
        Variant34(NonEmpty<Node<SmolStr>>),
        Variant35(alloc::vec::Vec<Annotated<Namespace>>),
        Variant36(Option<Path>),
        Variant37(Node<PR>),
        Variant38(ASchema),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 1
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, 0,
        // State 2
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, 45,
        // State 3
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, 0,
        // State 4
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, 0,
        // State 5
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 6
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 7
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 8
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 9
        46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 29, 33, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 3, 0,
        // State 11
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, -109,
        // State 12
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, -110,
        // State 13
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, -107,
        // State 14
        46, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 23, 29, 38, 34, 0, 0, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 35, 36, 0, -108,
        // State 15
        0, 0, 0, 0, 0, -150, -150, -150, 0, 0, 0, -150, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150,
        // State 16
        0, 0, 0, 0, 0, -171, 0, 39, 0, 0, 0, -171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -171,
        // State 17
        0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        -83, 0, -83, -83, 0, -83, -83, -83, 0, 0, 0, -83, -83, -83, -83, -83, -83, -83, 0, 0, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, 0, -83,
        // State 20
        -81, 0, -81, -81, 0, -81, -81, -81, 0, 0, 0, -81, -81, -81, -81, -81, -81, -81, 0, 0, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81,
        // State 21
        -86, 0, -86, -86, 0, -86, -86, -86, 0, 0, 0, -86, -86, -86, -86, -86, -86, -86, 0, 0, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, 0, -86,
        // State 22
        -88, 0, -88, -88, 0, -88, -88, -88, 0, 0, 0, -88, -88, -88, -88, -88, -88, -88, 0, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88,
        // State 23
        -85, 0, -85, -85, 0, -85, -85, -85, 0, 0, 0, -85, -85, -85, -85, -85, -85, -85, 0, 0, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, 0, -85,
        // State 24
        -79, 0, -79, -79, 0, -79, -79, -79, 0, 0, 0, -79, -79, -79, -79, -79, -79, -79, 0, 0, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79,
        // State 25
        -93, 0, -93, -93, 0, -93, -93, -93, 0, 0, 0, -93, -93, -93, -93, -93, -93, -93, 0, 0, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93,
        // State 26
        -94, 0, -94, -94, 0, -94, -94, -94, 0, 0, 0, -94, -94, -94, -94, -94, -94, -94, 0, 0, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94,
        // State 27
        -92, 0, -92, -92, 0, -92, -92, -92, 0, 0, 0, -92, -92, -92, -92, -92, -92, -92, 0, 0, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92,
        // State 28
        -89, 0, -89, -89, 0, -89, -89, -89, 0, 0, 0, -89, -89, -89, -89, -89, -89, -89, 0, 0, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, 0, -89,
        // State 29
        -78, 0, -78, -78, 0, -78, -78, -78, 0, 0, 0, -78, -78, -78, -78, -78, -78, -78, 0, 0, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78,
        // State 30
        -82, 0, -82, -82, 0, -82, -82, -82, 0, 0, 0, -82, -82, -82, -82, -82, -82, -82, 0, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 0, -82,
        // State 31
        -84, 0, -84, -84, 0, -84, -84, -84, 0, 0, 0, -84, -84, -84, -84, -84, -84, -84, 0, 0, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, 0, -84,
        // State 32
        0, 0, 0, 0, 0, -80, 0, -80, 0, 6, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80,
        // State 33
        -90, 0, -90, -90, 0, -90, -90, -90, 0, 0, 0, -90, -90, -90, -90, -90, -90, -90, 0, 0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, 0, -90,
        // State 34
        -87, 0, -87, -87, 0, -87, -87, -87, 0, 0, 0, -87, -87, -87, -87, -87, -87, -87, 0, 0, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, 0, -87,
        // State 35
        -91, 0, -91, -91, 0, -91, -91, -91, 0, 0, 0, -91, -91, -91, -91, -91, -91, -91, 0, 0, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, 0, -91,
        // State 36
        0, 0, 0, 0, 0, -172, 0, 47, 0, 0, 0, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172,
        // State 37
        -80, 0, -80, -80, 0, -80, -80, -80, 0, 0, 0, -80, -80, -80, -80, -80, -80, -80, 0, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80,
        // State 38
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23, -23, -23, 0, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, 0, 0,
        // State 39
        -76, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, -76, -76, -76, 0, 0, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
        // State 41
        0, 0, 0, 0, 0, 0, -152, 0, 0, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192,
        // State 45
        0, 0, 0, 0, -185, 0, -185, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 0, 0,
        // State 47
        -77, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, -77, -77, -77, -77, 0, 0, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191,
        // State 50
        0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        -73, 0, -73, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, -73, -73, -73, -73, 0, 0, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113,
        // State 55
        0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190,
        // State 56
        0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114,
        // State 57
        0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111,
        // State 58
        0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117,
        // State 61
        -72, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, -72, -72, -72, -72, 0, 0, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 34 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        -150,
        // State 16
        -171,
        // State 17
        -189,
        // State 18
        -195,
        // State 19
        -83,
        // State 20
        -81,
        // State 21
        -86,
        // State 22
        -88,
        // State 23
        -85,
        // State 24
        -79,
        // State 25
        -93,
        // State 26
        -94,
        // State 27
        -92,
        // State 28
        -89,
        // State 29
        -78,
        // State 30
        -82,
        // State 31
        -84,
        // State 32
        -80,
        // State 33
        -90,
        // State 34
        -87,
        // State 35
        -91,
        // State 36
        -172,
        // State 37
        -80,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        -192,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        -191,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        -190,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            10 => 1,
            36 => match state {
                3 => 47,
                _ => 39,
            },
            38 => 3,
            39 => match state {
                4 => 51,
                _ => 15,
            },
            41 => match state {
                11 => 60,
                12 => 62,
                13 => 63,
                14 => 64,
                _ => 40,
            },
            47 => match state {
                1 => 36,
                2..=3 | 11..=14 => 41,
                _ => 16,
            },
            49 => match state {
                3 => 48,
                _ => 42,
            },
            59 => 17,
            66 => match state {
                9 => 58,
                _ => 43,
            },
            69 => match state {
                5 => 52,
                6 => 54,
                7 => 56,
                8 => 57,
                10 => 59,
                _ => 18,
            },
            _ => 0,
        }
    }
    #[allow(clippy::needless_raw_string_hashes)]
    const __TERMINAL: &[&str] = &[
        r###"STRINGLIT"###,
        r###"NUMBER"###,
        r###"IDENTIFIER"###,
        r###""(""###,
        r###"")""###,
        r###"",""###,
        r###"":""###,
        r###""::""###,
        r###"";""###,
        r###""<""###,
        r###""=""###,
        r###"">""###,
        r###""?""###,
        r###""@""###,
        r###"BOOL"###,
        r###"LONG"###,
        r###"SET"###,
        r###"STRING"###,
        r###""[""###,
        r###""]""###,
        r###"ACTION"###,
        r###"APPLIESTO"###,
        r###"ATTRIBUTES"###,
        r###"CONTEXT"###,
        r###"ENTITY"###,
        r###"ENUM"###,
        r###"IN"###,
        r###"NAMESPACE"###,
        r###"PRINCIPAL"###,
        r###"RESOURCE"###,
        r###"TAGS"###,
        r###"TYPE"###,
        r###""{""###,
        r###""}""###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        'err,
        's,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: 'err,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), &(), &())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, 'err, 's>
    where 'input: 'err
    {
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    }
    impl<'input, 'err, 's> __state_machine::ParserDefinition for __StateMachine<'input, 'err, 's>
    where 'input: 'err
    {
        type Location = usize;
        type Error = UserError;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Node<SType>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 34 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), &(), &())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.errors,
                self.src,
                self.keep_src,
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), &(), &())>)
        }
    }
    fn __token_to_integer<
        'input,
        'err,
        's,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> Option<usize>
    {
        #[warn(unused_variables)]
        match __token {
            Token(0, _) if true => Some(0),
            Token(2, _) if true => Some(1),
            Token(3, _) if true => Some(2),
            Token(5, _) if true => Some(3),
            Token(6, _) if true => Some(4),
            Token(7, _) if true => Some(5),
            Token(8, _) if true => Some(6),
            Token(9, _) if true => Some(7),
            Token(10, _) if true => Some(8),
            Token(11, _) if true => Some(9),
            Token(12, _) if true => Some(10),
            Token(13, _) if true => Some(11),
            Token(14, _) if true => Some(12),
            Token(15, _) if true => Some(13),
            Token(16, _) if true => Some(14),
            Token(17, _) if true => Some(15),
            Token(18, _) if true => Some(16),
            Token(19, _) if true => Some(17),
            Token(20, _) if true => Some(18),
            Token(21, _) if true => Some(19),
            Token(22, _) if true => Some(20),
            Token(23, _) if true => Some(21),
            Token(24, _) if true => Some(22),
            Token(25, _) if true => Some(23),
            Token(26, _) if true => Some(24),
            Token(27, _) if true => Some(25),
            Token(28, _) if true => Some(26),
            Token(29, _) if true => Some(27),
            Token(30, _) if true => Some(28),
            Token(31, _) if true => Some(29),
            Token(32, _) if true => Some(30),
            Token(33, _) if true => Some(31),
            Token(34, _) if true => Some(32),
            Token(35, _) if true => Some(33),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'err,
        's,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 => match __token {
                Token(0, __tok0) | Token(2, __tok0) | Token(3, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        'err,
        's,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'err, 's>>
    where
        'input: 'err,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 6,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 12,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 14,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 21,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 22,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 22,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 24,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 27,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 28,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 29,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 30,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 31,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 31,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 31,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 31,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 31,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 31,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 31,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 31,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 33,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 35,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 35,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 35,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 35,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 36,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 37,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 38,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 40,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 40,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 41,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 41,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 42,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 43,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 43,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 46,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 46,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 46,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 46,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 46,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 46,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 46,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 50,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 50,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 53,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 55,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 56,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 58,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 60,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 61,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 63,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 63,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 64,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 68,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 69,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 69,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 69,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 70,
                }
            }
            193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            194 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {__reduce_index}",)
        }
    }
    pub struct TypeParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl Default for TypeParser { fn default() -> Self { Self::new() } }
    impl TypeParser {
        pub fn new() -> TypeParser {
            let __builder = super::__intern_token::new_builder();
            TypeParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'err,
            's,
        >(
            &self,
            errors: &'err mut Vec<RawErrorRecovery<'input>>,
            src: &'s Arc<str>,
            keep_src: bool,
            input: &'input str,
        ) -> Result<Node<SType>, __lalrpop_util::ParseError<usize, Token<'input>, UserError>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    errors,
                    src,
                    keep_src,
                    input,
                    __phantom: core::marker::PhantomData::<(&(), &(), &())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        'err,
        's,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> bool
    where
        'input: 'err,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), &(), &())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> Option<Result<Node<SType>,__lalrpop_util::ParseError<usize, Token<'input>, UserError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            1 => {
                __reduce1(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            2 => {
                __reduce2(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            3 => {
                __reduce3(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            4 => {
                __reduce4(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            5 => {
                __reduce5(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            6 => {
                __reduce6(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            7 => {
                __reduce7(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            8 => {
                __reduce8(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            9 => {
                __reduce9(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            10 => {
                __reduce10(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            11 => {
                __reduce11(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            12 => {
                __reduce12(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            13 => {
                __reduce13(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            14 => {
                __reduce14(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            15 => {
                __reduce15(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            16 => {
                __reduce16(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            17 => {
                __reduce17(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            18 => {
                __reduce18(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            19 => {
                __reduce19(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            20 => {
                __reduce20(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            21 => {
                __reduce21(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            22 => {
                __reduce22(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            23 => {
                __reduce23(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            24 => {
                __reduce24(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            25 => {
                __reduce25(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            26 => {
                __reduce26(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            27 => {
                __reduce27(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            28 => {
                __reduce28(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            29 => {
                __reduce29(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            30 => {
                __reduce30(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            31 => {
                __reduce31(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            32 => {
                __reduce32(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            33 => {
                __reduce33(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            34 => {
                __reduce34(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            35 => {
                __reduce35(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            36 => {
                __reduce36(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            37 => {
                __reduce37(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            38 => {
                __reduce38(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            39 => {
                __reduce39(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            40 => {
                __reduce40(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            41 => {
                __reduce41(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            42 => {
                __reduce42(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            43 => {
                __reduce43(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            44 => {
                __reduce44(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            45 => {
                __reduce45(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            46 => {
                __reduce46(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            47 => {
                __reduce47(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            48 => {
                __reduce48(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            49 => {
                __reduce49(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            50 => {
                __reduce50(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            51 => {
                __reduce51(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            52 => {
                __reduce52(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            53 => {
                __reduce53(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            54 => {
                __reduce54(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            55 => {
                __reduce55(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            56 => {
                __reduce56(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            57 => {
                __reduce57(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            58 => {
                __reduce58(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            59 => {
                __reduce59(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            60 => {
                __reduce60(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            61 => {
                // Annotated<Decl> = Decl => ActionFn(397);
                let __sym0 = __pop_Variant24(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action397::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (1, 32)
            }
            62 => {
                // Annotated<Decl> = Annotation+, Decl => ActionFn(398);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant24(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action398::<>(errors, src, keep_src, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (2, 32)
            }
            63 => {
                __reduce63(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            64 => {
                __reduce64(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            65 => {
                __reduce65(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            66 => {
                __reduce66(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            67 => {
                // Annotated<Namedspace> = NAMESPACE, Path, "{", "}" => ActionFn(413);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant9(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action413::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (4, 35)
            }
            68 => {
                // Annotated<Namedspace> = NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(414);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant26(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant9(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action414::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (5, 35)
            }
            69 => {
                // Annotated<Namedspace> = Annotation+, NAMESPACE, Path, "{", "}" => ActionFn(415);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant9(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action415::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (5, 35)
            }
            70 => {
                // Annotated<Namedspace> = Annotation+, NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(416);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant26(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant9(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action416::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (6, 35)
            }
            71 => {
                __reduce71(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            72 => {
                __reduce72(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            73 => {
                __reduce73(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            74 => {
                __reduce74(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            75 => {
                __reduce75(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            76 => {
                __reduce76(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            77 => {
                __reduce77(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            78 => {
                __reduce78(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            79 => {
                __reduce79(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            80 => {
                __reduce80(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            81 => {
                __reduce81(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            82 => {
                __reduce82(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            83 => {
                __reduce83(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            84 => {
                __reduce84(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            85 => {
                __reduce85(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            86 => {
                __reduce86(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            87 => {
                __reduce87(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            88 => {
                __reduce88(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            89 => {
                __reduce89(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            90 => {
                __reduce90(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            91 => {
                __reduce91(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            92 => {
                __reduce92(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            93 => {
                __reduce93(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            94 => {
                __reduce94(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            95 => {
                __reduce95(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            96 => {
                __reduce96(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            97 => {
                __reduce97(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            98 => {
                __reduce98(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            99 => {
                __reduce99(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            100 => {
                __reduce100(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            101 => {
                __reduce101(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            102 => {
                __reduce102(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            103 => {
                __reduce103(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            104 => {
                __reduce104(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            105 => {
                __reduce105(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            106 => {
                // AttrDecls = Name, "?", ":", Type, "," => ActionFn(401);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action401::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            107 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type, "," => ActionFn(402);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action402::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            108 => {
                // AttrDecls = Name, ":", Type, "," => ActionFn(403);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action403::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            109 => {
                // AttrDecls = Annotation+, Name, ":", Type, "," => ActionFn(404);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action404::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            110 => {
                // AttrDecls = Name, "?", ":", Type => ActionFn(405);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action405::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            111 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type => ActionFn(406);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action406::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            112 => {
                // AttrDecls = Name, ":", Type => ActionFn(407);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action407::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (3, 41)
            }
            113 => {
                // AttrDecls = Annotation+, Name, ":", Type => ActionFn(408);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action408::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (4, 41)
            }
            114 => {
                // AttrDecls = Name, "?", ":", Type, ",", AttrDecls => ActionFn(409);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant31(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action409::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            115 => {
                // AttrDecls = Annotation+, Name, "?", ":", Type, ",", AttrDecls => ActionFn(410);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant31(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action410::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (7, 41)
            }
            116 => {
                // AttrDecls = Name, ":", Type, ",", AttrDecls => ActionFn(411);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant31(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action411::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (5, 41)
            }
            117 => {
                // AttrDecls = Annotation+, Name, ":", Type, ",", AttrDecls => ActionFn(412);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant31(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant21(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant2(__symbols);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action412::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (6, 41)
            }
            118 => {
                __reduce118(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            119 => {
                __reduce119(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            120 => {
                __reduce120(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            121 => {
                __reduce121(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            122 => {
                __reduce122(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            123 => {
                __reduce123(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            124 => {
                __reduce124(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            125 => {
                __reduce125(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            126 => {
                __reduce126(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            127 => {
                __reduce127(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            128 => {
                __reduce128(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            129 => {
                __reduce129(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            130 => {
                __reduce130(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            131 => {
                __reduce131(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            132 => {
                __reduce132(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            133 => {
                __reduce133(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            134 => {
                __reduce134(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            135 => {
                __reduce135(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            136 => {
                __reduce136(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            137 => {
                __reduce137(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            138 => {
                __reduce138(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            139 => {
                __reduce139(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            140 => {
                __reduce140(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            141 => {
                __reduce141(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            142 => {
                __reduce142(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            143 => {
                __reduce143(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            144 => {
                __reduce144(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            145 => {
                __reduce145(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            146 => {
                __reduce146(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            147 => {
                __reduce147(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            148 => {
                __reduce148(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            149 => {
                // Ident = AnyIdent => ActionFn(25);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action25::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 47)
            }
            150 => {
                __reduce150(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            151 => {
                __reduce151(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            152 => {
                __reduce152(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            153 => {
                __reduce153(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            154 => {
                __reduce154(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            155 => {
                __reduce155(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            156 => {
                __reduce156(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            157 => {
                __reduce157(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            158 => {
                __reduce158(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            159 => {
                __reduce159(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            160 => {
                __reduce160(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            161 => {
                __reduce161(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            162 => {
                __reduce162(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            163 => {
                __reduce163(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            164 => {
                __reduce164(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            165 => {
                __reduce165(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            166 => {
                __reduce166(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            167 => {
                __reduce167(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            168 => {
                __reduce168(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            169 => {
                __reduce169(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            170 => {
                __reduce170(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            171 => {
                __reduce171(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            172 => {
                __reduce172(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            173 => {
                __reduce173(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            174 => {
                __reduce174(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            175 => {
                __reduce175(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            176 => {
                __reduce176(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            177 => {
                __reduce177(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            178 => {
                __reduce178(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            179 => {
                __reduce179(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            180 => {
                __reduce180(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            181 => {
                __reduce181(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            182 => {
                __reduce182(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            183 => {
                __reduce183(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            184 => {
                // STR = STRINGLIT => ActionFn(390);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action390::<>(errors, src, keep_src, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (1, 66)
            }
            185 => {
                __reduce185(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            186 => {
                __reduce186(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            187 => {
                __reduce187(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            188 => {
                __reduce188(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            189 => {
                __reduce189(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            190 => {
                __reduce190(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            191 => {
                __reduce191(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            192 => {
                __reduce192(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            193 => {
                __reduce193(errors, src, keep_src, input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &(), &())>)
            }
            194 => {
                // __Type = Type => ActionFn(1);
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action1::<>(errors, src, keep_src, input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {__action}")
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (&'input str, &'input str, &'input str), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ASchema, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Annotated<Namespace>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Annotated<Node<Declaration>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Namespace, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<(Node<AnyId>, Option<Node<SmolStr>>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<AnyId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Declaration>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<Id>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<NonEmpty<Node<AppDecl>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<PR>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<QualName>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SType>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Node<SmolStr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<Id>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<QualName>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, NonEmpty<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<(&'input str, &'input str, &'input str)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<NonEmpty<Node<AppDecl>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<SType>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<NonEmpty<Node<QualName>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Option<Vec<Node<Annotated<AttrDecl>>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<Path>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Path, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Node<Annotated<AttrDecl>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Annotated<Namespace>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<Id>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<QualName>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Node<SmolStr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Path>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ","? = "," => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action78::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    fn __reduce1<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ","? =  => ActionFn(79);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action79::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    fn __reduce2<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "="? = "=" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action97::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 1)
    }
    fn __reduce3<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "="? =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action98::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 1)
    }
    fn __reduce4<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "?"? = "?" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 2)
    }
    fn __reduce5<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // "?"? =  => ActionFn(75);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action75::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 2)
    }
    fn __reduce6<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")") = "(", STR, ")" => ActionFn(111);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action111::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 3)
    }
    fn __reduce7<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")")? = "(", STR, ")" => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action152::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 4)
    }
    fn __reduce8<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("(" <STR> ")")? =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action110::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    fn __reduce9<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "=", "{", AttrDecls, "}" => ActionFn(155);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action155::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    fn __reduce10<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "=", "{", "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action156::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 5)
    }
    fn __reduce11<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "{", AttrDecls, "}" => ActionFn(157);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action157::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 5)
    }
    fn __reduce12<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}") = "{", "}" => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    fn __reduce13<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "=", "{", AttrDecls, "}" => ActionFn(167);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action167::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (4, 6)
    }
    fn __reduce14<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "=", "{", "}" => ActionFn(168);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action168::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 6)
    }
    fn __reduce15<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "{", AttrDecls, "}" => ActionFn(169);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action169::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 6)
    }
    fn __reduce16<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? = "{", "}" => ActionFn(170);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action170::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    fn __reduce17<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // ("="? "{" <AttrDecls?> "}")? =  => ActionFn(93);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action93::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    fn __reduce18<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",") = Ident, "," => ActionFn(121);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action121::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    fn __reduce19<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = Ident, "," => ActionFn(176);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action176::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 8)
    }
    fn __reduce20<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = (<Ident> ",")+, Ident, "," => ActionFn(177);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action177::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    fn __reduce21<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::") = Ident, "::" => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action73::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 9)
    }
    fn __reduce22<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::")+ = Ident, "::" => ActionFn(178);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action178::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 10)
    }
    fn __reduce23<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "::")+ = (<Ident> "::")+, Ident, "::" => ActionFn(179);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action179::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 10)
    }
    fn __reduce24<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",") = Name, "," => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action124::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 11)
    }
    fn __reduce25<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = Name, "," => ActionFn(180);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action180::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 12)
    }
    fn __reduce26<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = (<Name> ",")+, Name, "," => ActionFn(181);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action181::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 12)
    }
    fn __reduce27<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",") = Path, "," => ActionFn(133);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action133::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 13)
    }
    fn __reduce28<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",")+ = Path, "," => ActionFn(182);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action182::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 14)
    }
    fn __reduce29<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<Path> ",")+ = (<Path> ",")+, Path, "," => ActionFn(183);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action183::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 14)
    }
    fn __reduce30<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",") = QualName, "," => ActionFn(127);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action127::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 15)
    }
    fn __reduce31<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",")+ = QualName, "," => ActionFn(184);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action184::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 16)
    }
    fn __reduce32<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<QualName> ",")+ = (<QualName> ",")+, QualName, "," => ActionFn(185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action185::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 16)
    }
    fn __reduce33<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",") = STR, "," => ActionFn(130);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action130::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 17)
    }
    fn __reduce34<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",")+ = STR, "," => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action186::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 18)
    }
    fn __reduce35<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (<STR> ",")+ = (<STR> ",")+, STR, "," => ActionFn(187);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action187::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 18)
    }
    fn __reduce36<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}") = APPLIESTO, "{", AppDecls, "}" => ActionFn(85);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action85::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 19)
    }
    fn __reduce37<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}")? = APPLIESTO, "{", AppDecls, "}" => ActionFn(188);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action188::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 20)
    }
    fn __reduce38<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (APPLIESTO "{" <AppDecls> "}")? =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action84::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 20)
    }
    fn __reduce39<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}") = ATTRIBUTES, "{", "}" => ActionFn(82);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action82::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 21)
    }
    fn __reduce40<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}")? = ATTRIBUTES, "{", "}" => ActionFn(191);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action191::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 22)
    }
    fn __reduce41<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (ATTRIBUTES "{" "}")? =  => ActionFn(81);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action81::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 22)
    }
    fn __reduce42<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>) = IN, EntTypes => ActionFn(101);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action101::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    fn __reduce43<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>)? = IN, EntTypes => ActionFn(196);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action196::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    fn __reduce44<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <EntTypes>)? =  => ActionFn(100);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action100::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 24)
    }
    fn __reduce45<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>) = IN, QualNameOrQualNames => ActionFn(88);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action88::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 25)
    }
    fn __reduce46<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>)? = IN, QualNameOrQualNames => ActionFn(207);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action207::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 26)
    }
    fn __reduce47<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (IN <QualNameOrQualNames>)? =  => ActionFn(87);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action87::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    fn __reduce48<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>) = TAGS, Type => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action91::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 27)
    }
    fn __reduce49<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>)? = TAGS, Type => ActionFn(216);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action216::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 28)
    }
    fn __reduce50<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // (TAGS <Type>)? =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action90::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 28)
    }
    fn __reduce51<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(112);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action112::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 29)
    }
    fn __reduce52<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(108);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action108::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    fn __reduce53<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, APPLIESTO, "{", AppDecls, "}", ATTRIBUTES, "{", "}", ";" => ActionFn(316);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action316::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (12, 31)
    }
    fn __reduce54<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, APPLIESTO, "{", AppDecls, "}", ATTRIBUTES, "{", "}", ";" => ActionFn(317);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action317::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 31)
    }
    fn __reduce55<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, APPLIESTO, "{", AppDecls, "}", ";" => ActionFn(318);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action318::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 31)
    }
    fn __reduce56<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, APPLIESTO, "{", AppDecls, "}", ";" => ActionFn(319);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action319::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 31)
    }
    fn __reduce57<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, ATTRIBUTES, "{", "}", ";" => ActionFn(320);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action320::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 31)
    }
    fn __reduce58<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, ATTRIBUTES, "{", "}", ";" => ActionFn(321);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action321::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 31)
    }
    fn __reduce59<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, IN, QualNameOrQualNames, ";" => ActionFn(322);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action322::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 31)
    }
    fn __reduce60<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Action = ACTION, Names, ";" => ActionFn(323);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action323::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 31)
    }
    fn __reduce63<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>* =  => ActionFn(103);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action103::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 33)
    }
    fn __reduce64<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>* = Annotated<Decl>+ => ActionFn(104);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 33)
    }
    fn __reduce65<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>+ = Annotated<Decl> => ActionFn(115);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action115::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    fn __reduce66<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotated<Decl>+ = Annotated<Decl>+, Annotated<Decl> => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action116::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 34)
    }
    fn __reduce71<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", AnyIdent, "(", STR, ")" => ActionFn(324);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action324::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (5, 36)
    }
    fn __reduce72<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", AnyIdent => ActionFn(325);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action325::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 36)
    }
    fn __reduce73<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action76::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 37)
    }
    fn __reduce74<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation* = Annotation+ => ActionFn(77);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 37)
    }
    fn __reduce75<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation => ActionFn(117);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 38)
    }
    fn __reduce76<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation+, Annotation => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action118::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 38)
    }
    fn __reduce77<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = NAMESPACE => ActionFn(326);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action326::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce78<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ENTITY => ActionFn(327);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action327::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce79<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = SET => ActionFn(328);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action328::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce80<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = APPLIESTO => ActionFn(329);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action329::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce81<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = PRINCIPAL => ActionFn(330);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action330::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce82<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ACTION => ActionFn(331);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action331::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce83<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = RESOURCE => ActionFn(332);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action332::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce84<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = CONTEXT => ActionFn(333);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action333::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce85<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ATTRIBUTES => ActionFn(334);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action334::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce86<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = TAGS => ActionFn(335);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action335::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce87<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = BOOL => ActionFn(336);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action336::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce88<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = LONG => ActionFn(337);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action337::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce89<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = STRING => ActionFn(338);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action338::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce90<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = TYPE => ActionFn(339);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action339::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce91<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = IN => ActionFn(340);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action340::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce92<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = ENUM => ActionFn(341);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action341::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce93<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AnyIdent = IDENTIFIER => ActionFn(342);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action342::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 39)
    }
    fn __reduce94<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes, "," => ActionFn(343);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action343::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce95<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes => ActionFn(344);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action344::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 40)
    }
    fn __reduce96<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = PrincipalOrResource, ":", EntTypes, ",", AppDecls => ActionFn(345);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action345::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce97<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path, "," => ActionFn(346);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action346::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce98<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path => ActionFn(347);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action347::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 40)
    }
    fn __reduce99<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", Path, ",", AppDecls => ActionFn(348);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action348::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce100<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}", "," => ActionFn(349);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action349::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 40)
    }
    fn __reduce101<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}", "," => ActionFn(350);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action350::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce102<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}" => ActionFn(351);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action351::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 40)
    }
    fn __reduce103<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}" => ActionFn(352);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action352::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 40)
    }
    fn __reduce104<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", AttrDecls, "}", ",", AppDecls => ActionFn(353);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action353::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (7, 40)
    }
    fn __reduce105<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AppDecls = CONTEXT, ":", "{", "}", ",", AppDecls => ActionFn(354);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action354::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 40)
    }
    fn __reduce118<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AttrDecls? = AttrDecls => ActionFn(95);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action95::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 42)
    }
    fn __reduce119<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // AttrDecls? =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action96::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 42)
    }
    fn __reduce120<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> = Path => ActionFn(419);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action419::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 43)
    }
    fn __reduce121<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> =  => ActionFn(420);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action420::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 43)
    }
    fn __reduce122<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Comma<Path> = (<Path> ",")+, Path => ActionFn(62);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action62::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 43)
    }
    fn __reduce123<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = Entity => ActionFn(7);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce124<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = Action => ActionFn(8);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce125<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Decl = TypeDecl => ActionFn(9);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 44)
    }
    fn __reduce126<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // EntTypes = Path => ActionFn(56);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 45)
    }
    fn __reduce127<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // EntTypes = "[", Comma<Path>, "]" => ActionFn(57);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action57::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 45)
    }
    fn __reduce128<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(361);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant21(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant31(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action361::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (11, 46)
    }
    fn __reduce129<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", AttrDecls, "}", ";" => ActionFn(362);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant31(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action362::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce130<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(363);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action363::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce131<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", AttrDecls, "}", ";" => ActionFn(364);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action364::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce132<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", "}", TAGS, Type, ";" => ActionFn(365);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action365::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 46)
    }
    fn __reduce133<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "=", "{", "}", ";" => ActionFn(366);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action366::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce134<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", "}", TAGS, Type, ";" => ActionFn(367);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action367::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce135<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "=", "{", "}", ";" => ActionFn(368);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action368::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 46)
    }
    fn __reduce136<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(369);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant31(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action369::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (10, 46)
    }
    fn __reduce137<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", AttrDecls, "}", ";" => ActionFn(370);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant31(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action370::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce138<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", AttrDecls, "}", TAGS, Type, ";" => ActionFn(371);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action371::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 46)
    }
    fn __reduce139<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", AttrDecls, "}", ";" => ActionFn(372);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action372::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 46)
    }
    fn __reduce140<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", "}", TAGS, Type, ";" => ActionFn(373);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action373::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (9, 46)
    }
    fn __reduce141<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, "{", "}", ";" => ActionFn(374);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action374::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce142<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", "}", TAGS, Type, ";" => ActionFn(375);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action375::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce143<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, "{", "}", ";" => ActionFn(376);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action376::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce144<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, TAGS, Type, ";" => ActionFn(377);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action377::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce145<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, IN, EntTypes, ";" => ActionFn(378);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action378::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce146<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, TAGS, Type, ";" => ActionFn(379);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action379::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 46)
    }
    fn __reduce147<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, ";" => ActionFn(380);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action380::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 46)
    }
    fn __reduce148<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Entity = ENTITY, Idents, ENUM, "[", STRs, "]", ";" => ActionFn(381);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant34(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action381::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 46)
    }
    fn __reduce150<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Idents = NonEmptyComma<Ident> => ActionFn(50);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 48)
    }
    fn __reduce151<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Name = Ident => ActionFn(44);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 49)
    }
    fn __reduce152<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Name = STR => ActionFn(45);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 49)
    }
    fn __reduce153<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namedspace = NAMESPACE, Path, "{", "}" => ActionFn(395);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action395::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (4, 50)
    }
    fn __reduce154<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namedspace = NAMESPACE, Path, "{", Annotated<Decl>+, "}" => ActionFn(396);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant26(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action396::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (5, 50)
    }
    fn __reduce155<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Names = NonEmptyComma<Name> => ActionFn(51);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 51)
    }
    fn __reduce156<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace = Annotated<Namedspace> => ActionFn(5);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 52)
    }
    fn __reduce157<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace = Annotated<Decl> => ActionFn(383);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action383::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 52)
    }
    fn __reduce158<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace* =  => ActionFn(106);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action106::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 53)
    }
    fn __reduce159<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace* = Namespace+ => ActionFn(107);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 53)
    }
    fn __reduce160<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace+ = Namespace => ActionFn(113);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action113::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    fn __reduce161<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Namespace+ = Namespace+, Namespace => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action114::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 54)
    }
    fn __reduce162<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Ident> = Ident => ActionFn(69);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 55)
    }
    fn __reduce163<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Ident> = (<Ident> ",")+, Ident => ActionFn(70);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action70::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (2, 55)
    }
    fn __reduce164<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Name> = Name => ActionFn(67);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 56)
    }
    fn __reduce165<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<Name> = (<Name> ",")+, Name => ActionFn(68);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action68::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 56)
    }
    fn __reduce166<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<QualName> = QualName => ActionFn(65);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 57)
    }
    fn __reduce167<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<QualName> = (<QualName> ",")+, QualName => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 57)
    }
    fn __reduce168<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<STR> = STR => ActionFn(63);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 58)
    }
    fn __reduce169<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // NonEmptyComma<STR> = (<STR> ",")+, STR => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action64::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 58)
    }
    fn __reduce170<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path = Ident => ActionFn(421);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action421::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 59)
    }
    fn __reduce171<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path = (<Ident> "::")+, Ident => ActionFn(422);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action422::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 59)
    }
    fn __reduce172<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path? = Path => ActionFn(134);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 60)
    }
    fn __reduce173<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Path? =  => ActionFn(135);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action135::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 60)
    }
    fn __reduce174<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PathInline = Ident => ActionFn(384);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action384::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 61)
    }
    fn __reduce175<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PathInline = (<Ident> "::")+, Ident => ActionFn(385);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action385::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 61)
    }
    fn __reduce176<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PrincipalOrResource = PRINCIPAL => ActionFn(386);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action386::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 62)
    }
    fn __reduce177<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // PrincipalOrResource = RESOURCE => ActionFn(387);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action387::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 62)
    }
    fn __reduce178<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = Ident, "::", STR => ActionFn(423);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action423::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 63)
    }
    fn __reduce179<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = (<Ident> "::")+, Ident, "::", STR => ActionFn(424);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action424::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 63)
    }
    fn __reduce180<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualName = Name => ActionFn(389);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action389::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 63)
    }
    fn __reduce181<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNameOrQualNames = QualName => ActionFn(58);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 64)
    }
    fn __reduce182<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNameOrQualNames = "[", QualNames, "]" => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action59::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 64)
    }
    fn __reduce183<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // QualNames = NonEmptyComma<QualName> => ActionFn(52);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 65)
    }
    fn __reduce185<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // STRs = NonEmptyComma<STR> => ActionFn(53);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 67)
    }
    fn __reduce186<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Schema =  => ActionFn(417);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action417::<>(errors, src, keep_src, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 68)
    }
    fn __reduce187<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Schema = Namespace+ => ActionFn(418);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action418::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 68)
    }
    fn __reduce188<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = Path => ActionFn(20);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 69)
    }
    fn __reduce189<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = SET, "<", Type, ">" => ActionFn(391);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action391::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (4, 69)
    }
    fn __reduce190<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = "{", AttrDecls, "}" => ActionFn(392);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action392::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 69)
    }
    fn __reduce191<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // Type = "{", "}" => ActionFn(393);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action393::<>(errors, src, keep_src, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 69)
    }
    fn __reduce192<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // TypeDecl = TYPE, Ident, "=", Type, ";" => ActionFn(394);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action394::<>(errors, src, keep_src, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 70)
    }
    fn __reduce193<
        'input,
        'err,
        's,
    >(
        errors: &'err mut Vec<RawErrorRecovery<'input>>,
        src: &'s Arc<str>,
        keep_src: bool,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'err (), &'s ())>,
    ) -> (usize, usize)
    {
        // __Schema = Schema => ActionFn(0);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<>(errors, src, keep_src, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 71)
    }
}
#[allow(unused_imports)]
pub use self::__parse__Type::TypeParser;
#[rustfmt::skip]
mod __intern_token {
    #![allow(unused_imports)]
    use std::str::FromStr;
    use std::sync::Arc;
    use crate::validator::cedar_schema::err::{RawErrorRecovery, UserError};
    use crate::parser::{Node, Loc, unescape::to_unescaped_string, cst::Ref};
    use crate::ast::{Id, AnyId, Annotations};
    use smol_str::SmolStr;
    use smol_str::ToSmolStr;
    use crate::validator::cedar_schema::ast::{
    Path,
    EntityDecl,
    StandardEntityDecl,
    EnumEntityDecl,
    Declaration,
    Namespace,
    Schema as ASchema,
    Type as SType,
    AttrDecl,
    ActionDecl,
    PR,
    AppDecl,
    TypeDecl,
    PrimitiveType,
    QualName,
    PRAppDecl,
    deduplicate_annotations,
    Annotated,
};
    use nonempty::{NonEmpty, nonempty};
    use itertools::Either;
    use std::collections::BTreeMap;
    use lalrpop_util::{ParseError, ErrorRecovery};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    #[allow(unused_extern_crates)]
    extern crate alloc;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("(?:\"((?:(?:\\\\[\0-\t\u{b}-\u{10ffff}])|[\0-!\\#-\\[\\]-\u{10ffff}]))*\")", false),
            ("(?:(?://)[\0-\t\u{b}\u{c}\u{e}-\u{10ffff}]*[\n\r]*)", true),
            ("[0-9]+", false),
            ("(?:[A-Z_a-z][0-9A-Z_a-z]*)", false),
            ("[\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}\u{2029}\u{202f}\u{205f}\u{3000}]*", true),
            ("\\(", false),
            ("\\)", false),
            (",", false),
            (":", false),
            ("(?:::)", false),
            (";", false),
            ("<", false),
            ("=", false),
            (">", false),
            ("\\?", false),
            ("@", false),
            ("(?:Bool)", false),
            ("(?:Long)", false),
            ("(?:Set)", false),
            ("(?:String)", false),
            ("\\[", false),
            ("\\]", false),
            ("(?:action)", false),
            ("(?:appliesTo)", false),
            ("(?:attributes)", false),
            ("(?:context)", false),
            ("(?:entity)", false),
            ("(?:enum)", false),
            ("(?:in)", false),
            ("(?:namespace)", false),
            ("(?:principal)", false),
            ("(?:resource)", false),
            ("(?:tags)", false),
            ("(?:type)", false),
            ("\\{", false),
            ("\\}", false),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub(crate) use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action0<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, ASchema, usize),
) -> ASchema
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action1<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SType>, usize),
) -> Node<SType>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action2<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, key, _): (usize, Node<AnyId>, usize),
    (_, value, _): (usize, Option<Node<SmolStr>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    Node::with_source_loc((key, value), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action3<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, ns, _): (usize, alloc::vec::Vec<Annotated<Namespace>>, usize),
) -> ASchema
{
    ns
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action4<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Path, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, decls, _): (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Namespace
{
    Namespace { name: Some(p), decls, loc: Some(Loc::new(l..r, Arc::clone(src)))}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action5<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, ns, _): (usize, Annotated<Namespace>, usize),
) -> Annotated<Namespace>
{
    ns
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action6<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, decl, _): (usize, Annotated<Node<Declaration>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Annotated<Namespace>
{
    Annotated {data: Namespace {name: None, decls: vec![decl], loc: Some(Loc::new(l..r, Arc::clone(src)))}, annotations: Annotations::new()}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action7<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Node<Declaration>, usize),
) -> Node<Declaration>
{
    e
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action8<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, a, _): (usize, Node<Declaration>, usize),
) -> Node<Declaration>
{
    a
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action9<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, t, _): (usize, Node<Declaration>, usize),
) -> Node<Declaration>
{
    t
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action10<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l1, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ets, _): (usize, NonEmpty<Node<Id>>, usize),
    (_, ps, _): (usize, Option<Vec<Path>>, usize),
    (_, l2, _): (usize, usize, usize),
    (_, ds, _): (usize, Option<Option<Vec<Node<Annotated<AttrDecl>>>>>, usize),
    (_, r2, _): (usize, usize, usize),
    (_, ts, _): (usize, Option<Node<SType>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r1, _): (usize, usize, usize),
) -> Node<Declaration>
{
    Node::with_source_loc(Declaration::Entity(EntityDecl::Standard(StandardEntityDecl {
            names: ets,
            member_of_types: ps.unwrap_or_default(),
            attrs: Node::with_source_loc(ds.map(|ds| ds.unwrap_or_default()).unwrap_or_default(), Loc::new(l2..r2, Arc::clone(src))),
            tags: ts,
            })), Loc::new(l1..r1, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action11<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ets, _): (usize, NonEmpty<Node<Id>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, choices, _): (usize, NonEmpty<Node<SmolStr>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<Declaration>
{
    Node::with_source_loc(Declaration::Entity(EntityDecl::Enum(EnumEntityDecl {
        names: ets,
        choices,
    })), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action12<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ns, _): (usize, NonEmpty<Node<SmolStr>>, usize),
    (_, ps, _): (usize, Option<NonEmpty<Node<QualName>>>, usize),
    (_, ads, _): (usize, Option<Node<NonEmpty<Node<AppDecl>>>>, usize),
    (_, attrs, _): (usize, Option<(&'input str, &'input str, &'input str)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<Declaration>
{
    Node::with_source_loc(Declaration::Action(ActionDecl { names: ns, parents: ps, app_decls: ads}), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action13<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, Node<Id>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Node<SType>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<Declaration>
{
    Node::with_source_loc(Declaration::Type(TypeDecl { name : i, def : t}), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action14<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, pr, _): (usize, Node<PR>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ets, _): (usize, Vec<Path>, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, Option<&'input str>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    {
            let entity_tys: Option<NonEmpty<Path>> = NonEmpty::collect(ets.into_iter());
            Node::with_source_loc(
                nonempty![Node::with_source_loc(AppDecl::PR(PRAppDecl { kind:pr, entity_tys }), Loc::new(l..r, Arc::clone(src)))],
                Loc::new(l..r, Arc::clone(src)))
        }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action15<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, pr, _): (usize, Node<PR>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ets, _): (usize, Vec<Path>, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, mut ds, _): (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    {
            let (mut ds, _) = ds.into_inner();
            let entity_tys: Option<NonEmpty<Path>> = NonEmpty::collect(ets.into_iter());
            ds.insert(0, Node::with_source_loc(AppDecl::PR(PRAppDecl { kind:pr, entity_tys }), Loc::new(l..r, Arc::clone(src))));
            Node::with_source_loc(ds, Loc::new(l..r, Arc::clone(src)))
        }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action16<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Path, usize),
    (_, _, _): (usize, Option<&'input str>, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    Node::with_source_loc(
                nonempty![Node::with_source_loc(AppDecl::Context(Either::Left(p)), Loc::new(l..r, Arc::clone(src)))],
                Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action17<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Path, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
    (_, mut ds, _): (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    {
            let (mut ds, _) = ds.into_inner();
            ds.insert(0, Node::with_source_loc(AppDecl::Context(Either::Left(p)), Loc::new(l..r, Arc::clone(src))));
            Node::with_source_loc(
                ds,
                Loc::new(l..r, Arc::clone(src)))
        }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action18<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l1, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, l2, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, attrs, _): (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r2, _): (usize, usize, usize),
    (_, _, _): (usize, Option<&'input str>, usize),
    (_, r1, _): (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    Node::with_source_loc(
                nonempty![Node::with_source_loc(AppDecl::Context(Either::Right(Node::with_source_loc(attrs.unwrap_or_default(), Loc::new(l2..r2, Arc::clone(src))))), Loc::new(l1..r1, Arc::clone(src)))],
                Loc::new(l1..r1, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action19<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l1, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, l2, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, attrs, _): (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r2, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r1, _): (usize, usize, usize),
    (_, mut ds, _): (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    {
            let (mut ds, _) = ds.into_inner();
            ds.insert(0, Node::with_source_loc(AppDecl::Context(Either::Right(Node::with_source_loc(attrs.unwrap_or_default(), Loc::new(l2..r2, Arc::clone(src))))), Loc::new(l1..r1, Arc::clone(src))));
            Node::with_source_loc(
                ds,
                Loc::new(l1..r1, Arc::clone(src)))
        }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action20<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, p, _): (usize, Path, usize),
) -> Node<SType>
{
    { let loc = p.loc().cloned(); Node::with_maybe_source_loc(SType::Ident(p), loc) }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action21<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, t, _): (usize, Node<SType>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<SType>
{
    Node::with_source_loc(SType::Set(Box::new(t)), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action22<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ds, _): (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<SType>
{
    Node::with_source_loc(SType::Record(ds.unwrap_or_default()), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action23<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, annotations, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    (_, name, _): (usize, Node<SmolStr>, usize),
    (_, required, _): (usize, Option<&'input str>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, Node<SType>, usize),
    (_, _, _): (usize, Option<&'input str>, usize),
    (_, r, _): (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    Ok(deduplicate_annotations(AttrDecl { name, required: required.is_none(), ty}, annotations).map(|decl| vec![Node::with_source_loc(decl, Loc::new(l..r, Arc::clone(src)))])?)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action24<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, annotations, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    (_, name, _): (usize, Node<SmolStr>, usize),
    (_, required, _): (usize, Option<&'input str>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, Node<SType>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
    (_, mut ds, _): (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    {ds.insert(0, deduplicate_annotations(AttrDecl { name, required: required.is_none(), ty}, annotations).map(|decl| Node::with_source_loc(decl, Loc::new(l..r, Arc::clone(src))))?); Ok(ds)}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action25<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, id, _): (usize, Node<AnyId>, usize),
) -> Result<Node<Id>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    Id::from_str(id.node.as_ref()).map(|i| Node::with_maybe_source_loc(i, id.loc.clone())).map_err(|err : crate::parser::err::ParseErrors| ParseError::User {
        error: UserError::ReservedIdentifierUsed(Node::with_maybe_source_loc(id.node.to_smolstr(), id.loc.clone()))
    })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action26<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("namespace".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action27<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("entity".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action28<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("Set".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action29<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("appliesTo".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action30<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("principal".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action31<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("action".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action32<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("resource".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action33<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("context".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action34<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("attributes".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action35<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("tags".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action36<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("Bool".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action37<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("Long".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action38<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("String".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action39<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("type".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action40<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("in".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action41<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc("enum".parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action42<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, i, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<AnyId>
{
    Node::with_source_loc(i.parse().unwrap(), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action43<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Result<Node<SmolStr>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    to_unescaped_string(&s[1..(s.len() - 1)]).map_or_else(|e| Err(ParseError::User {
            error: UserError::StringEscape(Node::with_source_loc(e, Loc::new(l..r, Arc::clone(src)))),
        }), |v| Ok(Node::with_source_loc(v, Loc::new(l..r, Arc::clone(src)))))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action44<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, id, _): (usize, Node<Id>, usize),
) -> Node<SmolStr>
{
    id.map(|id| id.to_smolstr())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action45<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, s, _): (usize, Node<SmolStr>, usize),
) -> Node<SmolStr>
{
    s
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action46<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, p, _): (usize, Path, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, s, _): (usize, Node<SmolStr>, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<QualName>
{
    Node::with_source_loc(QualName::qualified(p, s.node), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action47<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, i, _): (usize, Node<SmolStr>, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<QualName>
{
    Node::with_source_loc(QualName::unqualified(i.node), Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action48<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, i, _): (usize, Node<Id>, usize),
    (_, r, _): (usize, usize, usize),
) -> Path
{
    Path::single(i.node, Some(Loc::new(l..r, Arc::clone(src))))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action49<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, is, _): (usize, alloc::vec::Vec<Node<Id>>, usize),
    (_, i, _): (usize, Node<Id>, usize),
    (_, r, _): (usize, usize, usize),
) -> Path
{
    Path::new(i.node, is.into_iter().map(|n| n.node), Some(Loc::new(l..r, Arc::clone(src))))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action50<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, NonEmpty<Node<Id>>, usize),
) -> NonEmpty<Node<Id>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action51<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, NonEmpty<Node<SmolStr>>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action52<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, NonEmpty<Node<QualName>>, usize),
) -> NonEmpty<Node<QualName>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action53<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, NonEmpty<Node<SmolStr>>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action54<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<PR>
{
    Node::with_source_loc(PR::Principal, Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action55<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Node<PR>
{
    Node::with_source_loc(PR::Resource, Loc::new(l..r, Arc::clone(src)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action56<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, et, _): (usize, Path, usize),
) -> Vec<Path>
{
    vec![et]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action57<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ets, _): (usize, Vec<Path>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Vec<Path>
{
    ets
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action58<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, qn, _): (usize, Node<QualName>, usize),
) -> NonEmpty<Node<QualName>>
{
    NonEmpty::singleton(qn)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action59<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ns, _): (usize, NonEmpty<Node<QualName>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> NonEmpty<Node<QualName>>
{
    ns
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action60<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Path, usize),
) -> Path
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action61<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Option<Path>, usize),
) -> Vec<Path>
{
    e.into_iter().collect()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action62<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, mut es, _): (usize, alloc::vec::Vec<Path>, usize),
    (_, e, _): (usize, Path, usize),
) -> Vec<Path>
{
    {
        es.push(e);
        es
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action63<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    NonEmpty::singleton(e)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action64<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, es, _): (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    {
        let mut all = NonEmpty::from_vec(es).unwrap();
        all.push(e);
        all
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action65<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Node<QualName>, usize),
) -> NonEmpty<Node<QualName>>
{
    NonEmpty::singleton(e)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action66<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, es, _): (usize, alloc::vec::Vec<Node<QualName>>, usize),
    (_, e, _): (usize, Node<QualName>, usize),
) -> NonEmpty<Node<QualName>>
{
    {
        let mut all = NonEmpty::from_vec(es).unwrap();
        all.push(e);
        all
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action67<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    NonEmpty::singleton(e)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action68<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, es, _): (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> NonEmpty<Node<SmolStr>>
{
    {
        let mut all = NonEmpty::from_vec(es).unwrap();
        all.push(e);
        all
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action69<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, e, _): (usize, Node<Id>, usize),
) -> NonEmpty<Node<Id>>
{
    NonEmpty::singleton(e)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action70<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, es, _): (usize, alloc::vec::Vec<Node<Id>>, usize),
    (_, e, _): (usize, Node<Id>, usize),
) -> NonEmpty<Node<Id>>
{
    {
        let mut all = NonEmpty::from_vec(es).unwrap();
        all.push(e);
        all
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action71<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<Id>, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action72<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<Id>>, usize),
    (_, e, _): (usize, Node<Id>, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action73<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<Id>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<Id>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action74<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Option<&'input str>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action75<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<&'input str>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action76<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action77<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
) -> alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action78<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Option<&'input str>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action79<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<&'input str>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action80<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, (&'input str, &'input str, &'input str), usize),
) -> Option<(&'input str, &'input str, &'input str)>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action81<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<(&'input str, &'input str, &'input str)>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action82<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
    (_, __2, _): (usize, &'input str, usize),
) -> (&'input str, &'input str, &'input str)
{
    (__0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action83<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Option<Node<NonEmpty<Node<AppDecl>>>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action84<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Node<NonEmpty<Node<AppDecl>>>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action85<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action86<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, NonEmpty<Node<QualName>>, usize),
) -> Option<NonEmpty<Node<QualName>>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action87<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<NonEmpty<Node<QualName>>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action88<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, NonEmpty<Node<QualName>>, usize),
) -> NonEmpty<Node<QualName>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action89<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SType>, usize),
) -> Option<Node<SType>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action90<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Node<SType>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action91<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Node<SType>, usize),
) -> Node<SType>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action92<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action93<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action94<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, Option<&'input str>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action95<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action96<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action97<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Option<&'input str>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action98<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<&'input str>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action99<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Vec<Path>, usize),
) -> Option<Vec<Path>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action100<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<Path>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action101<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Path>, usize),
) -> Vec<Path>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action102<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, annotations, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    (_, e, _): (usize, Namespace, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    {
        Ok(deduplicate_annotations(e, annotations)?)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action103<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Annotated<Node<Declaration>>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action104<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
) -> alloc::vec::Vec<Annotated<Node<Declaration>>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action105<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, annotations, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    (_, e, _): (usize, Node<Declaration>, usize),
) -> Result<Annotated<Node<Declaration>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    {
        Ok(deduplicate_annotations(e, annotations)?)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action106<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Annotated<Namespace>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action107<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotated<Namespace>>, usize),
) -> alloc::vec::Vec<Annotated<Namespace>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action108<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    *__lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action109<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SmolStr>, usize),
) -> Option<Node<SmolStr>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action110<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Node<SmolStr>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action111<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Node<SmolStr>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<SmolStr>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action112<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    *__lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action113<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Annotated<Namespace>, usize),
) -> alloc::vec::Vec<Annotated<Namespace>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action114<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotated<Namespace>>, usize),
    (_, e, _): (usize, Annotated<Namespace>, usize),
) -> alloc::vec::Vec<Annotated<Namespace>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action115<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Annotated<Node<Declaration>>, usize),
) -> alloc::vec::Vec<Annotated<Node<Declaration>>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action116<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    (_, e, _): (usize, Annotated<Node<Declaration>>, usize),
) -> alloc::vec::Vec<Annotated<Node<Declaration>>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action117<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<(Node<AnyId>, Option<Node<SmolStr>>)>, usize),
) -> alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action118<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    (_, e, _): (usize, Node<(Node<AnyId>, Option<Node<SmolStr>>)>, usize),
) -> alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action119<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<Id>, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action120<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<Id>>, usize),
    (_, e, _): (usize, Node<Id>, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action121<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<Id>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<Id>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action122<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SmolStr>, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action123<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action124<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SmolStr>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<SmolStr>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action125<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<QualName>, usize),
) -> alloc::vec::Vec<Node<QualName>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action126<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<QualName>>, usize),
    (_, e, _): (usize, Node<QualName>, usize),
) -> alloc::vec::Vec<Node<QualName>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action127<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<QualName>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<QualName>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action128<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SmolStr>, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action129<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    (_, e, _): (usize, Node<SmolStr>, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action130<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Node<SmolStr>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Node<SmolStr>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action131<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Path, usize),
) -> alloc::vec::Vec<Path>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action132<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Path>, usize),
    (_, e, _): (usize, Path, usize),
) -> alloc::vec::Vec<Path>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action133<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Path, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Path
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action134<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    (_, __0, _): (usize, Path, usize),
) -> Option<Path>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action135<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Path>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action136<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Node<PR>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action78(
        errors,
        src,
        keep_src,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action137<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, Node<PR>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action79(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action138<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Path, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action78(
        errors,
        src,
        keep_src,
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action139<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Path, usize),
    __4: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action79(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action140<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __8.0;
    let __end0 = __8.2;
    let __temp0 = __action78(
        errors,
        src,
        keep_src,
        input,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action141<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __temp0 = __action79(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action142<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, Option<&'input str>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action78(
        errors,
        src,
        keep_src,
        input,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action143<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, Option<&'input str>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __temp0 = __action79(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action144<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    __3: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action97(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action145<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Option<Vec<Node<Annotated<AttrDecl>>>>, usize),
    __2: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action98(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action146<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action74(
        errors,
        src,
        keep_src,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action147<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action75(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action148<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action74(
        errors,
        src,
        keep_src,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action149<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action75(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action150<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action74(
        errors,
        src,
        keep_src,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action151<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action75(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action152<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
) -> Option<Node<SmolStr>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action111(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action109(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action153<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<AnyId>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SmolStr>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __3.0;
    let __end0 = __5.2;
    let __temp0 = __action152(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action154<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<AnyId>, usize),
    __3: (usize, usize, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action110(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action155<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __3: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action156<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action157<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __2: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action158<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Option<Vec<Node<Annotated<AttrDecl>>>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action159<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action160<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action161<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action162<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action163<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action164<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action165<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> Node<SType>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action95(
        errors,
        src,
        keep_src,
        input,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action22(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action166<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Node<SType>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action96(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action22(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action167<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __3: (usize, &'input str, usize),
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    let __start0 = __0.0;
    let __end0 = __3.2;
    let __temp0 = __action155(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action168<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action156(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action169<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __2: (usize, &'input str, usize),
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action157(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action170<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Option<Option<Vec<Node<Annotated<AttrDecl>>>>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action158(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action171<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, Option<Vec<Path>>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, Option<Node<SType>>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __5.0;
    let __end0 = __8.2;
    let __temp0 = __action167(
        errors,
        src,
        keep_src,
        input,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __9,
        __10,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action172<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, Option<Vec<Path>>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, Option<Node<SType>>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __5.0;
    let __end0 = __7.2;
    let __temp0 = __action168(
        errors,
        src,
        keep_src,
        input,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action173<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, Option<Vec<Path>>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, Option<Node<SType>>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __5.0;
    let __end0 = __7.2;
    let __temp0 = __action169(
        errors,
        src,
        keep_src,
        input,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action174<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, Option<Vec<Path>>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, Option<Node<SType>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action170(
        errors,
        src,
        keep_src,
        input,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action175<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, Option<Vec<Path>>, usize),
    __4: (usize, usize, usize),
    __5: (usize, usize, usize),
    __6: (usize, Option<Node<SType>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action93(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action176<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action121(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action177<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action121(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action178<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action73(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action179<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<Id>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action73(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action180<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action124(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action181<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action124(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action182<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Path, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Path>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action133(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action183<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Path>, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Path>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action133(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action184<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<QualName>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<QualName>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action127(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action185<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<QualName>>, usize),
    __1: (usize, Node<QualName>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<QualName>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action127(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action186<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action130(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action187<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<SmolStr>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Node<SmolStr>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action130(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action188<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __3: (usize, &'input str, usize),
) -> Option<Node<NonEmpty<Node<AppDecl>>>>
{
    let __start0 = __0.0;
    let __end0 = __3.2;
    let __temp0 = __action85(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action189<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Option<(&'input str, &'input str, &'input str)>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action188(
        errors,
        src,
        keep_src,
        input,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action190<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, Option<(&'input str, &'input str, &'input str)>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action84(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action191<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> Option<(&'input str, &'input str, &'input str)>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action82(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action192<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __8.0;
    let __end0 = __10.2;
    let __temp0 = __action191(
        errors,
        src,
        keep_src,
        input,
        __8,
        __9,
        __10,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action193<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __temp0 = __action81(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action194<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action191(
        errors,
        src,
        keep_src,
        input,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action190(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action195<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, Option<NonEmpty<Node<QualName>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action81(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action190(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action196<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Path>, usize),
) -> Option<Vec<Path>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action101(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action197<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
    __11: (usize, Option<Node<SType>>, usize),
    __12: (usize, &'input str, usize),
    __13: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action196(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
        __13,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action198<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, Option<Node<SType>>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action100(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action199<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, Option<Node<SType>>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action196(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action172(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action200<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, Option<Node<SType>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action100(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action172(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action201<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, Option<Node<SType>>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action196(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action173(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action202<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, Option<Node<SType>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action100(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action173(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action203<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, Option<Node<SType>>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action196(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action174(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action204<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, Option<Node<SType>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action100(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action174(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action205<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, usize, usize),
    __7: (usize, Option<Node<SType>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action196(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action175(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action206<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, usize, usize),
    __5: (usize, Option<Node<SType>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action100(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action175(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action207<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<QualName>>, usize),
) -> Option<NonEmpty<Node<QualName>>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action88(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action208<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<QualName>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, &'input str, usize),
    __13: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action207(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
        __13,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action209<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action87(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action210<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<QualName>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action207(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action211<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action87(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action212<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<QualName>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action207(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action194(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action213<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action87(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action194(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action214<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<QualName>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action207(
        errors,
        src,
        keep_src,
        input,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action195(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action215<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<SmolStr>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action87(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action195(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action216<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<SType>, usize),
) -> Option<Node<SType>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action91(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action217<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, Node<SType>, usize),
    __13: (usize, &'input str, usize),
    __14: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __11.0;
    let __end0 = __12.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __11,
        __12,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __temp0,
        __13,
        __14,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action218<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __10.2;
    let __end0 = __11.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __temp0,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action219<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, Node<SType>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __9.0;
    let __end0 = __10.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __9,
        __10,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action198(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action220<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __8.2;
    let __end0 = __9.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action198(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action221<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, Node<SType>, usize),
    __12: (usize, &'input str, usize),
    __13: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __10.0;
    let __end0 = __11.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __10,
        __11,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action199(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
        __12,
        __13,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action222<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __9.2;
    let __end0 = __10.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action199(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action223<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, Node<SType>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __8.0;
    let __end0 = __9.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __8,
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action224<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action225<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, Node<SType>, usize),
    __12: (usize, &'input str, usize),
    __13: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __10.0;
    let __end0 = __11.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __10,
        __11,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
        __12,
        __13,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action226<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __9.2;
    let __end0 = __10.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action227<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, Node<SType>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __8.0;
    let __end0 = __9.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __8,
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action228<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action229<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, Node<SType>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __9.0;
    let __end0 = __10.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __9,
        __10,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action203(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action230<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __8.2;
    let __end0 = __9.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action203(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action231<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __7.0;
    let __end0 = __8.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action232<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action233<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __7.0;
    let __end0 = __8.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action234<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Path>, usize),
    __5: (usize, usize, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action235<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<SType>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action216(
        errors,
        src,
        keep_src,
        input,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action236<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, NonEmpty<Node<Id>>, usize),
    __3: (usize, usize, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action90(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action237<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action238<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action239<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action210(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action240<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action211(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action241<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action242<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action243<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action214(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action244<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action215(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action245<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<AnyId>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SmolStr>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action246<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<AnyId>, usize),
    __2: (usize, usize, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action247<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action248<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action249<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action28(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action250<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action251<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action252<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action253<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action32(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action254<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action33(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action255<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action256<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action257<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action36(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action258<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action259<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action38(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action260<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action261<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action40(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action262<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action41(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action263<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<AnyId>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action264<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action265<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
    __3: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action266<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
    __3: (usize, usize, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action267<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action268<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action269<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action270<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action159(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action271<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action160(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action272<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action161(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action273<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, usize, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action162(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action274<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action163(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action275<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action164(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action276<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action277<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action278<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action279<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, usize, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action280<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action281<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action282<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, Node<SType>, usize),
    __11: (usize, &'input str, usize),
    __12: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action217(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action283<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action218(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action284<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action219(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action285<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action220(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action286<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, Node<SType>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action221(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action287<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action222(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action288<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<SType>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action223(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action289<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action224(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action290<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, Node<SType>, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action225(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action291<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action226(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action292<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<SType>, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action227(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action293<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action228(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action294<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action229(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action295<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action230(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action296<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<SType>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action231(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action297<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action232(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action298<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<SType>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action233(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action299<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, usize, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action234(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __temp1,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action300<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action235(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action301<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __1.2;
    let __end1 = __2.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action236(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __temp1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action302<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<SmolStr>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action303<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Namespace
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action304<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Annotated<Node<Declaration>>, usize),
    __1: (usize, usize, usize),
) -> Annotated<Namespace>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action305<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
    __1: (usize, usize, usize),
) -> Path
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action306<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, usize, usize),
) -> Path
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action307<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<PR>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action308<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Node<PR>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action309<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Path, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SmolStr>, usize),
    __3: (usize, usize, usize),
) -> Node<QualName>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action310<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, usize, usize),
) -> Node<QualName>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action47(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action311<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<Node<SmolStr>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action312<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SType>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> Node<SType>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action313<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> Node<SType>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action165(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action314<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
) -> Node<SType>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action166(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action315<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, usize, usize),
) -> Node<Declaration>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action112(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action316<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __11.2;
    let __end0 = __11.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action237(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action317<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __9.2;
    let __end0 = __9.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action318<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __8.2;
    let __end0 = __8.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action239(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action319<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action240(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action320<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __7.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action321<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action322<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, NonEmpty<Node<QualName>>, usize),
    __4: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action243(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action323<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<SmolStr>>, usize),
    __2: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action244(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action324<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<AnyId>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SmolStr>, usize),
    __4: (usize, &'input str, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action245(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action325<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<AnyId>, usize),
) -> Node<(Node<AnyId>, Option<Node<SmolStr>>)>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action246(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action326<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action247(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action327<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action248(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action328<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action249(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action329<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action330<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action331<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action252(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action332<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action253(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action333<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action334<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action335<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action256(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action336<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action257(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action337<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action338<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action339<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action260(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action340<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action261(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action341<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action262(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action342<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<AnyId>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action343<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
    __3: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action344<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action265(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action345<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<PR>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Vec<Path>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action346<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action347<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action268(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action348<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action269(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action349<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __5.2;
    let __end1 = __5.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action270(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action350<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action271(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action351<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action272(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action352<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __start1 = __3.2;
    let __end1 = __3.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action273(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action353<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __5.2;
    let __end1 = __6.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action274(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __temp1,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action354<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<NonEmpty<Node<AppDecl>>>, usize),
) -> Node<NonEmpty<Node<AppDecl>>>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __4.2;
    let __end1 = __5.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action275(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __temp1,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action355<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action356<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action357<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action278(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action358<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action359<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action360<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action361<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
    __9: (usize, Node<SType>, usize),
    __10: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __start1 = __10.2;
    let __end1 = __10.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action282(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
        __9,
        __10,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action362<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __start1 = __8.2;
    let __end1 = __8.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action283(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action363<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<SType>, usize),
    __8: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __start1 = __8.2;
    let __end1 = __8.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __7,
        __8,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action364<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __start1 = __6.2;
    let __end1 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action285(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action365<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __start1 = __9.2;
    let __end1 = __9.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action286(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
        __9,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action366<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __start1 = __7.2;
    let __end1 = __7.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action287(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action367<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<SType>, usize),
    __7: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __7.2;
    let __end1 = __7.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action288(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action368<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __5.2;
    let __end1 = __5.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action289(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action369<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Node<SType>, usize),
    __9: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __start1 = __9.2;
    let __end1 = __9.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action290(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
        __9,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action370<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __7.0;
    let __start1 = __7.2;
    let __end1 = __7.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action291(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action371<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Node<SType>, usize),
    __7: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __7.2;
    let __end1 = __7.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action292(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action372<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __start1 = __5.2;
    let __end1 = __5.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action293(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action373<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, Node<SType>, usize),
    __8: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __start1 = __8.2;
    let __end1 = __8.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action294(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __7,
        __8,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action374<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __start1 = __6.2;
    let __end1 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action295(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action375<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __6.2;
    let __end1 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action296(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action376<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action297(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action377<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Node<SType>, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __6.2;
    let __end1 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action298(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action378<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Vec<Path>, usize),
    __4: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action299(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action379<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action300(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action380<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action301(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
        __2,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action381<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, NonEmpty<Node<Id>>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, NonEmpty<Node<SmolStr>>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action302(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action382<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    __4: (usize, &'input str, usize),
) -> Namespace
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action383<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Annotated<Node<Declaration>>, usize),
) -> Annotated<Namespace>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action304(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action384<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
) -> Path
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action305(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action385<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
) -> Path
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action306(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action386<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<PR>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action387<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Node<PR>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action308(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action388<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Path, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SmolStr>, usize),
) -> Node<QualName>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action389<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
) -> Node<QualName>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action310(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action390<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<Node<SmolStr>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action311(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action391<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SType>, usize),
    __3: (usize, &'input str, usize),
) -> Node<SType>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action312(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action392<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
    __2: (usize, &'input str, usize),
) -> Node<SType>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action313(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action393<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Node<SType>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action394<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
) -> Node<Declaration>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action108(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action315(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action395<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
) -> Namespace
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action103(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action396<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    __4: (usize, &'input str, usize),
) -> Namespace
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action104(
        errors,
        src,
        keep_src,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action397<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Declaration>, usize),
) -> Result<Annotated<Node<Declaration>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action398<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<Declaration>, usize),
) -> Result<Annotated<Node<Declaration>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action399<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Namespace, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action400<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Namespace, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action401<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action402<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action403<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SType>, usize),
    __3: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action404<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action405<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action357(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action406<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action357(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action407<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action358(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action408<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action358(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action409<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action359(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action410<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Node<SType>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action359(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action411<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<SmolStr>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SType>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action76(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action360(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action412<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, Node<SmolStr>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SType>, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Vec<Node<Annotated<AttrDecl>>>, usize),
) -> Result<Vec<Node<Annotated<AttrDecl>>>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action360(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action413<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __3.2;
    let __temp0 = __action395(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action399(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action414<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Path, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    __4: (usize, &'input str, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action396(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action399(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action415<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __1.0;
    let __end0 = __4.2;
    let __temp0 = __action395(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action400(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action416<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<(Node<AnyId>, Option<Node<SmolStr>>)>>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Path, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, alloc::vec::Vec<Annotated<Node<Declaration>>>, usize),
    __5: (usize, &'input str, usize),
) -> Result<Annotated<Namespace>,__lalrpop_util::ParseError<usize,Token<'input>,UserError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action396(
        errors,
        src,
        keep_src,
        input,
        __1,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action400(
        errors,
        src,
        keep_src,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action417<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ASchema
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action106(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action418<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Annotated<Namespace>>, usize),
) -> ASchema
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action107(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action419<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Path, usize),
) -> Vec<Path>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action134(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action420<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Path>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action135(
        errors,
        src,
        keep_src,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action421<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
) -> Path
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action384(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action60(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action422<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
) -> Path
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action385(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action60(
        errors,
        src,
        keep_src,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action423<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, Node<Id>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Node<SmolStr>, usize),
) -> Node<QualName>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action384(
        errors,
        src,
        keep_src,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action388(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action424<
    'input,
    'err,
    's,
>(
    errors: &'err mut Vec<RawErrorRecovery<'input>>,
    src: &'s Arc<str>,
    keep_src: bool,
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Node<Id>>, usize),
    __1: (usize, Node<Id>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Node<SmolStr>, usize),
) -> Node<QualName>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action385(
        errors,
        src,
        keep_src,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action388(
        errors,
        src,
        keep_src,
        input,
        __temp0,
        __2,
        __3,
    )
}

#[allow(clippy::type_complexity, dead_code)]
pub trait __ToTriple<'input, 'err, 's, >
{
    fn to_triple(self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, UserError>>;
}

impl<'input, 'err, 's, > __ToTriple<'input, 'err, 's, > for (usize, Token<'input>, usize)
{
    fn to_triple(self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, UserError>> {
        Ok(self)
    }
}
impl<'input, 'err, 's, > __ToTriple<'input, 'err, 's, > for Result<(usize, Token<'input>, usize), UserError>
{
    fn to_triple(self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, UserError>> {
        self.map_err(|error| __lalrpop_util::ParseError::User { error })
    }
}
