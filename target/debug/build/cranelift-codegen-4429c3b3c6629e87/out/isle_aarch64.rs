// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /Users/lapwing/Desktop/cedar/cedar-policy-compiler/target/debug/build/cranelift-codegen-4429c3b3c6629e87/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn stack_switch_model(&mut self) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn use_fp16(&mut self) -> bool;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_size_from_type(&mut self, arg0: Type) -> Option<u16>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn targets_jt_space(&mut self, arg0: &BoxVecMachLabel) -> CodeOffset;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn simm7_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<SImm7Scaled>;
    fn uimm12_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<UImm12Scaled>;
    fn simm9_from_i64(&mut self, arg0: i64) -> Option<SImm9>;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(
        &mut self,
        arg0: u64,
        arg1: &ScalarSize,
    ) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn test_and_compare_bit_const(&mut self, arg0: Type, arg1: u64) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 20.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 388.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 434.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 453.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 461.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel16 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TestBitAndBranch {
        kind: TestBitAndBranchKind,
        taken: BranchTarget,
        not_taken: BranchTarget,
        rn: Reg,
        bit: u8,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        default: MachLabel,
        targets: BoxVecMachLabel,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Paci {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: BoxExternalName,
        rd: WritableReg,
        tmp: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 1016.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 1054.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 1066.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1123.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1140.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
    },
    SPOffset {
        off: i64,
    },
    FPOffset {
        off: i64,
    },
    Const {
        addr: VCodeConstant,
    },
    IncomingArg {
        off: i64,
    },
    SlotOffset {
        off: i64,
    },
}

/// Internal type PairAMode: defined at src/isa/aarch64/inst.isle line 1242.
#[derive(Clone, Debug)]
pub enum PairAMode {
    SignedOffset { reg: Reg, simm7: SImm7Scaled },
    SPPreIndexed { simm7: SImm7Scaled },
    SPPostIndexed { simm7: SImm7Scaled },
}

/// Internal type TestBitAndBranchKind: defined at src/isa/aarch64/inst.isle line 1266.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum TestBitAndBranchKind {
    Z,
    NZ,
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1402.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1412.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1423.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
    MSub,
    NMAdd,
    NMSub,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1436.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1449.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1463.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1476.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1485.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1572.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1583.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1644.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1659.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1673.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1685.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1694.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1702.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1713.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1722.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1733.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1740.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1755.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1771.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    ASP,
    BSP,
    AZ,
    BZ,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1784.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ZeroCond: defined at src/isa/aarch64/inst.isle line 3511.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 3546.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src/isa/aarch64/inst.isle line 4530.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

/// Internal type IsFneg: defined at src/isa/aarch64/lower.isle line 537.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result { negate: u64, value: Value },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src/prelude.isle line 461.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 85.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 109.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src/prelude_lower.isle line 163.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src/prelude_lower.isle line 174.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 185.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 184"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 190.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 189"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 195.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 194"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 400.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 402.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 405.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 399"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 415.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 420.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 422.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 424.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 419"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 449.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 448"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 479.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 480.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 478"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 485.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 487.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 484"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 500.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 494.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 493"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 531.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 537.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 549.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 565.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 572.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 585.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 525.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 517.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 515"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src/prelude_lower.isle line 603.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 610.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 621.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 626.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 631.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 636.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 641.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 619"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 650.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 658.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 667.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 675.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 684.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 744.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 752.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 761.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 769.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 778.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 697.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 705.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 714.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 722.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 731.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 791.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 799.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 808.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 816.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 825.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 837.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 845.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 862.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 854.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 870.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 879.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 647"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1082.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 1281.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/aarch64/inst.isle line 1282.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src/isa/aarch64/inst.isle line 1280"
    )
}

// Generated as internal constructor for term diff_from_32.
pub fn constructor_diff_from_32<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1294.
            return 0x18_u8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1295.
            return 0x10_u8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "diff_from_32", "src/isa/aarch64/inst.isle line 1293"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1307.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1308.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src/isa/aarch64/inst.isle line 1309.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src/isa/aarch64/inst.isle line 1310.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src/isa/aarch64/inst.isle line 1311.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 1313.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 1314.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src/isa/aarch64/inst.isle line 1305"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1318.
                return ScalarSize::Size8;
            }
            0x10_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1319.
                return ScalarSize::Size16;
            }
            0x20_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1320.
                return ScalarSize::Size32;
            }
            0x40_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1321.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1322.
                return ScalarSize::Size8;
            }
            0x10_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1323.
                return ScalarSize::Size16;
            }
            0x20_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1324.
                return ScalarSize::Size32;
            }
            0x40_u32 => {
                // Rule at src/isa/aarch64/inst.isle line 1325.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src/isa/aarch64/inst.isle line 1317"
    )
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(ctx: &mut C, arg0: &VectorSize) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1330.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src/isa/aarch64/inst.isle line 1329.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1332.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1331.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1334.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1333.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1335.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_lane_size", "src/isa/aarch64/inst.isle line 1328"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                match v2.1 {
                    0x8_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1386.
                        return VectorSize::Size8x8;
                    }
                    0x10_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1387.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10_u32 => {
                match v2.1 {
                    0x4_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1388.
                        return VectorSize::Size16x4;
                    }
                    0x8_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1389.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20_u32 => {
                match v2.1 {
                    0x2_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1390.
                        return VectorSize::Size32x2;
                    }
                    0x4_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1391.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src/isa/aarch64/inst.isle line 1392.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8_u32 => {
                match v13.1 {
                    0x8_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1393.
                        return VectorSize::Size8x8;
                    }
                    0x10_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1394.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10_u32 => {
                match v13.1 {
                    0x4_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1395.
                        return VectorSize::Size16x4;
                    }
                    0x8_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1396.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20_u32 => {
                match v13.1 {
                    0x2_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1397.
                        return VectorSize::Size32x2;
                    }
                    0x4_u32 => {
                        // Rule at src/isa/aarch64/inst.isle line 1398.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40_u32 => {
                if v13.1 == 0x2_u32 {
                    // Rule at src/isa/aarch64/inst.isle line 1399.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src/isa/aarch64/inst.isle line 1385"
    )
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src/isa/aarch64/inst.isle line 1959.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src/isa/aarch64/inst.isle line 2023.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2031.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2038.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2045.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2052.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2077.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2102.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2109.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2116.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2124.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src/isa/aarch64/inst.isle line 2132.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2138.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2144.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2151.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2158.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2165.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2171.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2178.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2185.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2192.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2199.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2206.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2213.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 2221.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src/isa/aarch64/inst.isle line 2220"
    )
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 2230.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift_asr", "src/isa/aarch64/inst.isle line 2229"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2238.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2246.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2253.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2260.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2268.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2276.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2283.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2291.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2299.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2308.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2315.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2325.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2334.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2340.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2358.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2365.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2373.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2380.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2386.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2393.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2402.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2411.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2418.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2425.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2432.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2440.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2447.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F16 => {
            let v6 = C::use_fp16(ctx);
            if v6 == true {
                let v8 = C::temp_writable_reg(ctx, F16);
                let v9 = MInst::FpuCSel16 {
                    rd: v8,
                    rn: arg2,
                    rm: arg3,
                    cond: arg1.clone(),
                };
                let v10 = C::writable_reg_to_reg(ctx, v8);
                let v11 = ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: v9,
                    result: v10,
                };
                // Rule at src/isa/aarch64/inst.isle line 2458.
                return v11;
            }
            let v5 = &constructor_fpu_csel(ctx, F32, arg1, arg2, arg3);
            // Rule at src/isa/aarch64/inst.isle line 2455.
            return v5.clone();
        }
        F32 => {
            let v12 = C::temp_writable_reg(ctx, F32);
            let v13 = MInst::FpuCSel32 {
                rd: v12,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v14 = C::writable_reg_to_reg(ctx, v12);
            let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v13,
                result: v14,
            };
            // Rule at src/isa/aarch64/inst.isle line 2465.
            return v15;
        }
        F64 => {
            let v17 = C::temp_writable_reg(ctx, F64);
            let v18 = MInst::FpuCSel64 {
                rd: v17,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src/isa/aarch64/inst.isle line 2471.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src/isa/aarch64/inst.isle line 2454"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2479.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2487.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/aarch64/inst.isle line 2498.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2494.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    if let &ScalarSize::Size16 = arg1 {
        let v7 = C::use_fp16(ctx);
        if v7 == false {
            let v9 = constructor_mov_to_fpu(ctx, arg0, &ScalarSize::Size32);
            // Rule at src/isa/aarch64/inst.isle line 2511.
            return v9;
        }
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2507.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2517.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2524.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2531.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2562.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2569.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2575.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2587.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2594.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2601.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2608.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2615.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2622.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2630.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2644.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2652.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2659.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2665.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2675.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src/isa/aarch64/inst.isle line 2685.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 2690.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2705.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2718.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2745.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2748.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2764.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2767.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2777.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2790.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2817.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2831.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2834.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v6 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v7 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src/isa/aarch64/inst.isle line 2837.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2862.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2872.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2876.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2880.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2884.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2888.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2892.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2896.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2900.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2904.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2908.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2912.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2916.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2920.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2924.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2928.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2932.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2936.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2940.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2944.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2948.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2952.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2956.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/aarch64/inst.isle line 2960.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src/isa/aarch64/inst.isle line 2965.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src/isa/aarch64/inst.isle line 2970.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2997.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3001.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3005.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0_u8);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
    // Rule at src/isa/aarch64/inst.isle line 3020.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3048.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3052.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3057.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3060.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3063.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3066.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3070.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3074.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3078.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3082.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3086.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3090.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3094.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3098.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3101.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3111.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3120.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3130.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3139.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3149.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3159.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3163.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3173.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3181.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3192.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3205.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3208.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3211.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3222.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3235.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term eor.
pub fn constructor_eor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3242.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3245.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3258.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3261.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3265.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3269.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3273.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3277.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3281.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3292.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3302.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3313.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3324.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3335.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3340.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3343.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3346.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3351.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3373.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src/isa/aarch64/inst.isle line 3378.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3384.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3393.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3398.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3406.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3411.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3419.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3424.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3432.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload16.
pub fn constructor_aarch64_fpuload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3437.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3442.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3447.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3452.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src/isa/aarch64/inst.isle line 3457.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3468.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3473.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3478.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3483.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore16.
pub fn constructor_aarch64_fpustore16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3486.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3489.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3492.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3495.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 3498.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3504.
    return v7;
}

// Generated as internal constructor for term zero_cond_to_cond_br.
pub fn constructor_zero_cond_to_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Reg,
) -> CondBrKind {
    match arg0 {
        &ZeroCond::Zero => {
            let v2 = C::cond_br_zero(ctx, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3517.
            return v2;
        }
        &ZeroCond::NonZero => {
            let v3 = C::cond_br_not_zero(ctx, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3520.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zero_cond_to_cond_br", "src/isa/aarch64/inst.isle line 3516"
    )
}

// Generated as internal constructor for term trap_if_val.
pub fn constructor_trap_if_val<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Value,
    arg2: &TrapCode,
) -> InstOutput {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        let v6 = constructor_put_in_reg_zext64(ctx, arg1);
        let v7 = constructor_zero_cond_to_cond_br(ctx, arg0, v6);
        let v8 = MInst::TrapIf {
            kind: v7,
            trap_code: arg2.clone(),
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        let v10 = constructor_side_effect(ctx, &v9);
        // Rule at src/isa/aarch64/inst.isle line 3524.
        return v10;
    }
    if v2 == I128 {
        let v11 = C::put_in_regs(ctx, arg1);
        let v13 = C::value_regs_get(ctx, v11, 0x0_usize);
        let v15 = C::value_regs_get(ctx, v11, 0x1_usize);
        let v17 = constructor_orr(ctx, I64, v13, v15);
        let v18 = constructor_zero_cond_to_cond_br(ctx, arg0, v17);
        let v19 = MInst::TrapIf {
            kind: v18,
            trap_code: arg2.clone(),
        };
        let v20 = SideEffectNoResult::Inst { inst: v19 };
        let v21 = constructor_side_effect(ctx, &v20);
        // Rule at src/isa/aarch64/inst.isle line 3530.
        return v21;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_val", "src/isa/aarch64/inst.isle line 3523"
    )
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                let v10 = C::add_range_fact(ctx, v8, 0x40_u16, arg2, arg2);
                // Rule at src/isa/aarch64/inst.isle line 3580.
                return v10;
            }
            let v11 = C::ty_32_or_64(ctx, v2);
            if let Some(v12) = v11 {
                let v13 = C::move_wide_const_from_inverted_u64(ctx, v12, arg2);
                if let Some(v14) = v13 {
                    let v15 = &constructor_operand_size(ctx, v12);
                    let v16 = constructor_movn(ctx, v14, v15);
                    let v17 = C::add_range_fact(ctx, v16, 0x40_u16, arg2, arg2);
                    // Rule at src/isa/aarch64/inst.isle line 3585.
                    return v17;
                }
            }
            let v18 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v19) = v18 {
                let v20 = C::imm_size_from_type(ctx, v2);
                if let Some(v21) = v20 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = constructor_orr_imm(ctx, v2, v22, v19);
                    let v24 = C::add_range_fact(ctx, v23, v21, arg2, arg2);
                    // Rule at src/isa/aarch64/inst.isle line 3593.
                    return v24;
                }
            }
        }
        let v25 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src/isa/aarch64/inst.isle line 3604.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/aarch64/inst.isle line 3576"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3621.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3622.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = true;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x20_u8);
        // Rule at src/isa/aarch64/inst.isle line 3617.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/aarch64/inst.isle line 3616"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3636.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3637.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = false;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x20_u8);
        // Rule at src/isa/aarch64/inst.isle line 3632.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/aarch64/inst.isle line 3631"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = true;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x40_u8);
        // Rule at src/isa/aarch64/inst.isle line 3643.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3647.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/aarch64/inst.isle line 3642"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = false;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x40_u8);
        // Rule at src/isa/aarch64/inst.isle line 3653.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3657.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/aarch64/inst.isle line 3652"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/aarch64/inst.isle line 3662.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 3667.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 3668.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src/isa/aarch64/inst.isle line 3666"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_operand_size(ctx, arg0);
    let v6 = C::writable_zero_reg(ctx);
    let v8 = C::u8_into_imm12(ctx, 0x1_u8);
    let v9 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v5.clone(),
        rd: v6,
        rn: arg3,
        imm12: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = &constructor_size_from_ty(ctx, arg0);
    let v12 = C::u8_into_uimm5(ctx, 0x1_u8);
    let v13 = false;
    let v14 = C::nzcv(ctx, v13, v13, v13, v13);
    let v16 = MInst::CCmpImm {
        size: v11.clone(),
        rn: arg1,
        imm: v12,
        nzcv: v14,
        cond: Cond::Eq,
    };
    let v17 = C::emit(ctx, &v16);
    let v19 = C::cond_br_cond(ctx, &Cond::Vs);
    let v20 = &C::trap_code_integer_overflow(ctx);
    let v21 = MInst::TrapIf {
        kind: v19,
        trap_code: v20.clone(),
    };
    let v22 = C::emit(ctx, &v21);
    // Rule at src/isa/aarch64/inst.isle line 3675.
    return arg2;
}

// Generated as internal constructor for term intmin_check.
pub fn constructor_intmin_check<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_diff_from_32(ctx, v2);
        let v6 = C::imm_shift_from_u8(ctx, v5);
        let v7 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, v2, arg1, v6);
        // Rule at src/isa/aarch64/inst.isle line 3699.
        return v7;
    }
    // Rule at src/isa/aarch64/inst.isle line 3703.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src/isa/aarch64/inst.isle line 3707.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 3714.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src/isa/aarch64/inst.isle line 3713"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src/isa/aarch64/inst.isle line 3747.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src/isa/aarch64/inst.isle line 3739.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src/isa/aarch64/inst.isle line 3744.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3736.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3732.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src/isa/aarch64/inst.isle line 3767.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3764.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3762.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0_usize);
    let v8 = C::value_regs_get(ctx, v4, 0x1_usize);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0_usize);
    let v11 = C::value_regs_get(ctx, v9, 0x1_usize);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src/isa/aarch64/inst.isle line 3776.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 3791.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3798.
    return v6;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: i32) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v17 = C::i32_from_iconst(ctx, v9.0);
                if let Some(v18) = v17 {
                    let v19 = C::s32_add_fallible(ctx, v18, arg2);
                    if let Some(v20) = v19 {
                        let v21 = &constructor_amode_no_more_iconst(ctx, arg0, v9.1, v20);
                        // Rule at src/isa/aarch64/inst.isle line 3827.
                        return v21.clone();
                    }
                }
                let v12 = C::i32_from_iconst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = C::s32_add_fallible(ctx, v13, arg2);
                    if let Some(v15) = v14 {
                        let v16 = &constructor_amode_no_more_iconst(ctx, arg0, v9.0, v15);
                        // Rule at src/isa/aarch64/inst.isle line 3824.
                        return v16.clone();
                    }
                }
            }
        }
    }
    let v3 = &constructor_amode_no_more_iconst(ctx, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3822.
    return v3.clone();
}

// Generated as internal constructor for term amode_no_more_iconst.
pub fn constructor_amode_no_more_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v16 = C::def_inst(ctx, arg1);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::Binary {
            opcode: ref v19,
            args: ref v20,
        } = v18
        {
            if let &Opcode::Iadd = v19 {
                let v21 = C::unpack_value_array_2(ctx, v20);
                let v39 = C::def_inst(ctx, v21.0);
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Binary {
                        opcode: ref v67,
                        args: ref v68,
                    } = v41
                    {
                        if let &Opcode::Ishl = v67 {
                            let v69 = C::unpack_value_array_2(ctx, v68);
                            let v72 = C::def_inst(ctx, v69.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v75,
                                    imm: v76,
                                } = v74
                                {
                                    if let &Opcode::Iconst = v75 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v77 = C::u64_from_imm64(ctx, v76);
                                        let v78 = C::u64_shl(ctx, 0x1_u64, v77);
                                        let v79 = C::u64_eq(ctx, v62, v78);
                                        if v79 == true {
                                            let v45 = C::put_in_reg(ctx, v21.1);
                                            let v46 = constructor_amode_add(ctx, v45, arg2);
                                            let v80 =
                                                &constructor_amode_reg_scaled(ctx, v46, v69.0);
                                            // Rule at src/isa/aarch64/inst.isle line 3874.
                                            return v80.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v28 = C::def_inst(ctx, v21.1);
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Binary {
                        opcode: ref v50,
                        args: ref v51,
                    } = v30
                    {
                        if let &Opcode::Ishl = v50 {
                            let v52 = C::unpack_value_array_2(ctx, v51);
                            let v55 = C::def_inst(ctx, v52.1);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v58,
                                    imm: v59,
                                } = v57
                                {
                                    if let &Opcode::Iconst = v58 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v60 = C::u64_from_imm64(ctx, v59);
                                        let v64 = C::u64_shl(ctx, 0x1_u64, v60);
                                        let v65 = C::u64_eq(ctx, v62, v64);
                                        if v65 == true {
                                            let v24 = C::put_in_reg(ctx, v21.0);
                                            let v25 = constructor_amode_add(ctx, v24, arg2);
                                            let v66 =
                                                &constructor_amode_reg_scaled(ctx, v25, v52.0);
                                            // Rule at src/isa/aarch64/inst.isle line 3871.
                                            return v66.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Unary {
                        opcode: ref v42,
                        arg: v43,
                    } = v41
                    {
                        match v42 {
                            &Opcode::Uextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v48 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3859.
                                    return v48;
                                }
                            }
                            &Opcode::Sextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v49 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3861.
                                    return v49;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Unary {
                        opcode: ref v31,
                        arg: v32,
                    } = v30
                    {
                        match v31 {
                            &Opcode::Uextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v36 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3855.
                                    return v36;
                                }
                            }
                            &Opcode::Sextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v38 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3857.
                                    return v38;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v24 = C::put_in_reg(ctx, v21.0);
                let v25 = constructor_amode_add(ctx, v24, arg2);
                let v26 = C::put_in_reg(ctx, v21.1);
                let v27 = AMode::RegReg { rn: v25, rm: v26 };
                // Rule at src/isa/aarch64/inst.isle line 3853.
                return v27;
            }
        }
    }
    let v6 = C::i32_as_i64(ctx, arg2);
    let v13 = &C::uimm12_scaled_from_i64(ctx, v6, arg0);
    if let Some(v14) = v13 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v15 = AMode::UnsignedOffset {
            rn: v3,
            uimm12: v14.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3842.
        return v15;
    }
    let v10 = &C::simm9_from_i64(ctx, v6);
    if let Some(v11) = v10 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v12 = AMode::Unscaled {
            rn: v3,
            simm9: v11.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3839.
        return v12;
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v7 = C::i64_as_u64(ctx, v6);
    let v8 = constructor_imm(ctx, I64, &ImmExtend::Zero, v7);
    let v9 = AMode::RegReg { rn: v3, rm: v8 };
    // Rule at src/isa/aarch64/inst.isle line 3834.
    return v9;
}

// Generated as internal constructor for term amode_reg_scaled.
pub fn constructor_amode_reg_scaled<C: Context>(ctx: &mut C, arg0: Reg, arg1: Value) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Unary {
            opcode: ref v7,
            arg: v8,
        } = v6
        {
            match v7 {
                &Opcode::Uextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v12 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::UXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3881.
                        return v12;
                    }
                }
                &Opcode::Sextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v14 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::SXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3883.
                        return v14;
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg1);
    let v3 = AMode::RegScaled { rn: arg0, rm: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3879.
    return v3;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    if arg1 == 0_i32 {
        // Rule at src/isa/aarch64/inst.isle line 3894.
        return arg0;
    }
    let v4 = C::i32_as_i64(ctx, arg1);
    let v5 = C::i64_as_u64(ctx, v4);
    let v8 = C::imm12_from_u64(ctx, v5);
    if let Some(v9) = v8 {
        let v10 = constructor_add_imm(ctx, I64, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 3891.
        return v10;
    }
    let v6 = constructor_imm(ctx, I64, &ImmExtend::Zero, v5);
    let v7 = constructor_add(ctx, I64, arg0, v6);
    // Rule at src/isa/aarch64/inst.isle line 3889.
    return v7;
}

// Generated as internal constructor for term pair_amode.
pub fn constructor_pair_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> PairAMode {
    let v9 = C::i32_as_i64(ctx, arg1);
    let v10 = C::simm7_scaled_from_i64(ctx, v9, I64);
    if let Some(v11) = v10 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v12 = PairAMode::SignedOffset {
            reg: v6,
            simm7: v11,
        };
        // Rule at src/isa/aarch64/inst.isle line 3906.
        return v12;
    }
    let v4 = C::simm7_scaled_from_i64(ctx, 0_i64, I64);
    if let Some(v5) = v4 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = constructor_amode_add(ctx, v6, arg1);
        let v8 = PairAMode::SignedOffset { reg: v7, simm7: v5 };
        // Rule at src/isa/aarch64/inst.isle line 3901.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "pair_amode", "src/isa/aarch64/inst.isle line 3898"
    )
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> Reg {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::i32_as_i64(ctx, v7);
            let v11 = C::i64_as_u64(ctx, v10);
            let v12 = constructor_add_imm_to_addr(ctx, v9, v11);
            // Rule at src/isa/aarch64/inst.isle line 3921.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_addr", "src/isa/aarch64/inst.isle line 3920"
    )
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    if arg1 == 0x0_u64 {
        // Rule at src/isa/aarch64/inst.isle line 3926.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src/isa/aarch64/inst.isle line 3927.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src/isa/aarch64/inst.isle line 3928.
    return v8;
}

// Generated as internal constructor for term constant_f16.
pub fn constructor_constant_f16<C: Context>(ctx: &mut C, arg0: u16) -> Reg {
    let v1 = C::use_fp16(ctx);
    if v1 == false {
        let v2 = C::u16_as_u32(ctx, arg0);
        let v3 = constructor_constant_f32(ctx, v2);
        // Rule at src/isa/aarch64/inst.isle line 3936.
        return v3;
    }
    if arg0 == 0x0_u16 {
        let v5 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v6 = false;
        let v8 = constructor_vec_dup_imm(ctx, v5, v6, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3939.
        return v8;
    }
    let v9 = C::u16_as_u64(ctx, arg0);
    let v11 = C::asimd_fp_mod_imm_from_u64(ctx, v9, &ScalarSize::Size16);
    if let Some(v12) = v11 {
        let v13 = constructor_fpu_move_fp_imm(ctx, v12, &ScalarSize::Size16);
        // Rule at src/isa/aarch64/inst.isle line 3943.
        return v13;
    }
    let v16 = constructor_imm(ctx, I16, &ImmExtend::Zero, v9);
    let v17 = constructor_mov_to_fpu(ctx, v16, &ScalarSize::Size16);
    // Rule at src/isa/aarch64/inst.isle line 3946.
    return v17;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(ctx: &mut C, arg0: u32) -> Reg {
    if arg0 == 0x0_u32 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3955.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src/isa/aarch64/inst.isle line 3959.
        return v9;
    }
    let v10 = C::u32_as_u16(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::use_fp16(ctx);
        if v12 == true {
            let v13 = constructor_constant_f16(ctx, v11);
            // Rule at src/isa/aarch64/inst.isle line 3962.
            return v13;
        }
    }
    let v16 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v17 = constructor_mov_to_fpu(ctx, v16, &ScalarSize::Size32);
    // Rule at src/isa/aarch64/inst.isle line 3965.
    return v17;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(ctx: &mut C, arg0: u64) -> Reg {
    if arg0 == 0x0_u64 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3976.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3980.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src/isa/aarch64/inst.isle line 3983.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3985.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const { addr: v19 };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src/isa/aarch64/inst.isle line 3987.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(ctx: &mut C, arg0: u128) -> Reg {
    if arg0 == 0x0_u128 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size8x16);
        // Rule at src/isa/aarch64/inst.isle line 3996.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src/isa/aarch64/inst.isle line 4002.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src/isa/aarch64/inst.isle line 4006.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const { addr: v13 };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src/isa/aarch64/inst.isle line 4010.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(ctx: &mut C, arg0: u64, arg1: &VectorSize) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v18 = constructor_splat_const(ctx, v14, &VectorSize::Size8x8);
                // Rule at src/isa/aarch64/inst.isle line 4029.
                return v18;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v16 = constructor_splat_const(ctx, v14, &VectorSize::Size8x16);
                // Rule at src/isa/aarch64/inst.isle line 4027.
                return v16;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src/isa/aarch64/inst.isle line 4025.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src/isa/aarch64/inst.isle line 4023.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src/isa/aarch64/inst.isle line 4021.
                return v5;
            }
        }
        _ => {}
    }
    let v19 = &constructor_vector_lane_size(ctx, arg1);
    let v20 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v21) = v20 {
        let v22 = false;
        let v23 = constructor_vec_dup_imm(ctx, v21, v22, arg1);
        // Rule at src/isa/aarch64/inst.isle line 4034.
        return v23;
    }
    let v24 = C::u64_not(ctx, arg0);
    let v25 = C::asimd_mov_mod_imm_from_u64(ctx, v24, v19);
    if let Some(v26) = v25 {
        let v27 = true;
        let v28 = constructor_vec_dup_imm(ctx, v26, v27, arg1);
        // Rule at src/isa/aarch64/inst.isle line 4037.
        return v28;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20_u64);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v22 = false;
                let v36 = constructor_vec_dup_imm(ctx, v34, v22, &VectorSize::Size64x2);
                let v37 = constructor_fpu_extend(ctx, v36, &ScalarSize::Size64);
                // Rule at src/isa/aarch64/inst.isle line 4046.
                return v37;
            }
        }
        &VectorSize::Size32x4 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20_u64);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v22 = false;
                let v36 = constructor_vec_dup_imm(ctx, v34, v22, &VectorSize::Size64x2);
                // Rule at src/isa/aarch64/inst.isle line 4043.
                return v36;
            }
        }
        _ => {}
    }
    let v38 = constructor_vec_dup_fp_imm_supports_lane_size(ctx, v19);
    if v38 == true {
        let v39 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v19);
        if let Some(v40) = v39 {
            let v41 = constructor_vec_dup_fp_imm(ctx, v40, arg1);
            // Rule at src/isa/aarch64/inst.isle line 4050.
            return v41;
        }
    }
    let v44 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v45 = constructor_vec_dup(ctx, v44, arg1);
    // Rule at src/isa/aarch64/inst.isle line 4062.
    return v45;
}

// Generated as internal constructor for term vec_dup_fp_imm_supports_lane_size.
pub fn constructor_vec_dup_fp_imm_supports_lane_size<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
) -> bool {
    match arg0 {
        &ScalarSize::Size32 => {
            let v1 = true;
            // Rule at src/isa/aarch64/inst.isle line 4056.
            return v1;
        }
        &ScalarSize::Size64 => {
            let v1 = true;
            // Rule at src/isa/aarch64/inst.isle line 4057.
            return v1;
        }
        _ => {}
    }
    let v2 = false;
    // Rule at src/isa/aarch64/inst.isle line 4058.
    return v2;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4098.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4103.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 4108.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4128.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4133.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 4138.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 4143.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 4153.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 4167.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 4181.
    return v10;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 4189.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/aarch64/inst.isle line 4195.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 4211.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 4215.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 8_i64 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/aarch64/inst.isle line 4219.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 8_i64 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src/isa/aarch64/inst.isle line 4235.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src/isa/aarch64/inst.isle line 4218"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 4251.
            return 0x1f_u8;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 4250.
            return 0x3f_u8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src/isa/aarch64/inst.isle line 4249"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/aarch64/inst.isle line 4256.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src/isa/aarch64/inst.isle line 4261.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src/isa/aarch64/inst.isle line 4255"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0_usize);
    // Rule at src/isa/aarch64/inst.isle line 4270.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0_usize);
            // Rule at src/isa/aarch64/inst.isle line 4307.
            return v35;
        }
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0_usize);
                        // Rule at src/isa/aarch64/inst.isle line 4283.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0_usize);
                        // Rule at src/isa/aarch64/inst.isle line 4291.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0_usize);
            // Rule at src/isa/aarch64/inst.isle line 4299.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src/isa/aarch64/inst.isle line 4282"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0_usize);
    // Rule at src/isa/aarch64/inst.isle line 4317.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src/isa/aarch64/inst.isle line 4333.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 4352.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 4350.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src/isa/aarch64/inst.isle line 4354.
                return v14;
            }
        }
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src/isa/aarch64/inst.isle line 4360.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src/isa/aarch64/inst.isle line 4349"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80_u64);
            // Rule at src/isa/aarch64/inst.isle line 4373.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000_u64);
            // Rule at src/isa/aarch64/inst.isle line 4374.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src/isa/aarch64/inst.isle line 4372"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7f_u64);
            // Rule at src/isa/aarch64/inst.isle line 4377.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7fff_u64);
            // Rule at src/isa/aarch64/inst.isle line 4378.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src/isa/aarch64/inst.isle line 4376"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4381.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4389.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/aarch64/inst.isle line 4405.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4411.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4419.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4463.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4441.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src/isa/aarch64/inst.isle line 4466.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src/isa/aarch64/inst.isle line 4444.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4476.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4492.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4455.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src/isa/aarch64/inst.isle line 4431.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4428.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4479.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4489.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4458.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4470.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4448.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4486.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4473.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 4451.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 4483.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src/isa/aarch64/inst.isle line 4425"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0_u8, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0_u8);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src/isa/aarch64/inst.isle line 4504.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0_u8, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0_u8);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src/isa/aarch64/inst.isle line 4508.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src/isa/aarch64/inst.isle line 4503"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::ElfTlsGetAddr {
        symbol: v4,
        rd: v2,
        tmp: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 4517.
    return v7;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 4524.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/aarch64/inst.isle line 4550.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src/isa/aarch64/inst.isle line 4580.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src/isa/aarch64/inst.isle line 4579"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 4585.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src/isa/aarch64/inst.isle line 4584"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 4589.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src/isa/aarch64/inst.isle line 4588"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src/isa/aarch64/inst.isle line 4748.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src/isa/aarch64/inst.isle line 4815.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src/isa/aarch64/inst.isle line 4817.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src/isa/aarch64/inst.isle line 4752.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src/isa/aarch64/inst.isle line 4755.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src/isa/aarch64/inst.isle line 4758.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src/isa/aarch64/inst.isle line 4761.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src/isa/aarch64/inst.isle line 4634"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/inst.isle line 4720.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 4792.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 4796.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0_usize);
            let v29 = C::value_regs_get(ctx, v24, 0x1_usize);
            let v30 = C::value_regs_get(ctx, v25, 0x0_usize);
            let v31 = C::value_regs_get(ctx, v25, 0x1_usize);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src/isa/aarch64/inst.isle line 4825.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src/isa/aarch64/inst.isle line 4743.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src/isa/aarch64/inst.isle line 4675"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4920.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1_u64);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4899.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4928.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1_u64);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4909.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4924.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1_u64);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4904.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4932.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1_u64);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4914.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 4716.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1_u64);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 4777.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1_u64);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 4771.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src/isa/aarch64/inst.isle line 4783.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src/isa/aarch64/inst.isle line 4786.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src/isa/aarch64/inst.isle line 4713"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 4739.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 4737.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 4740.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 4738.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src/isa/aarch64/inst.isle line 4736"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0_usize);
    let v7 = C::value_regs_get(ctx, v2, 0x1_usize);
    let v8 = C::value_regs_get(ctx, v3, 0x0_usize);
    let v9 = C::value_regs_get(ctx, v3, 0x1_usize);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v12 = false;
    let v13 = C::nzcv(ctx, v12, v12, v12, v12);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src/isa/aarch64/inst.isle line 4804.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 4840.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src/isa/aarch64/inst.isle line 4889.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0_usize);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src/isa/aarch64/inst.isle line 4877.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v19 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/aarch64/inst.isle line 4868.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v11 = C::u8_into_imm12(ctx, 0x0_u8);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src/isa/aarch64/inst.isle line 4855.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/aarch64/inst.isle line 4848"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    match arg2 {
        I128 => {
            let v23 = C::temp_writable_reg(ctx, I64);
            let v24 = C::temp_writable_reg(ctx, I64);
            let v25 = C::put_in_regs(ctx, arg3);
            let v26 = C::put_in_regs(ctx, arg4);
            let v28 = C::value_regs_get(ctx, v25, 0x0_usize);
            let v30 = C::value_regs_get(ctx, v25, 0x1_usize);
            let v31 = C::value_regs_get(ctx, v26, 0x0_usize);
            let v32 = C::value_regs_get(ctx, v26, 0x1_usize);
            let v35 = C::writable_reg_to_reg(ctx, v23);
            let v36 = C::writable_reg_to_reg(ctx, v24);
            let v37 = C::value_regs(ctx, v35, v36);
            let v33 = MInst::CSel {
                rd: v23,
                cond: arg1.clone(),
                rn: v28,
                rm: v31,
            };
            let v34 = MInst::CSel {
                rd: v24,
                cond: arg1.clone(),
                rn: v30,
                rm: v32,
            };
            let v38 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                inst1: v33,
                inst2: v34,
                result: v37,
            };
            let v39 = constructor_with_flags(ctx, arg0, &v38);
            // Rule at src/isa/aarch64/inst.isle line 4948.
            return v39;
        }
        F128 => {
            let v9 = C::put_in_reg(ctx, arg3);
            let v10 = C::put_in_reg(ctx, arg4);
            let v13 = &constructor_vec_csel(ctx, arg1, v9, v10);
            let v14 = constructor_with_flags(ctx, arg0, v13);
            // Rule at src/isa/aarch64/inst.isle line 4941.
            return v14;
        }
        _ => {}
    }
    let v15 = C::ty_vec128(ctx, arg2);
    if let Some(v16) = v15 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v9, v10);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src/isa/aarch64/inst.isle line 4943.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::fits_in_64(ctx, v4);
        if let Some(v6) = v5 {
            let v9 = C::put_in_reg(ctx, arg3);
            let v10 = C::put_in_reg(ctx, arg4);
            let v11 = &constructor_fpu_csel(ctx, v6, arg1, v9, v10);
            let v12 = constructor_with_flags(ctx, arg0, v11);
            // Rule at src/isa/aarch64/inst.isle line 4939.
            return v12;
        }
    }
    let v40 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v41) = v40 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v42 = &constructor_csel(ctx, arg1, v9, v10);
        let v43 = constructor_with_flags(ctx, arg0, v42);
        // Rule at src/isa/aarch64/inst.isle line 4962.
        return v43;
    }
    let v17 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v18) = v17 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v20 = &constructor_fpu_csel(ctx, F64, arg1, v9, v10);
        let v21 = constructor_with_flags(ctx, arg0, v20);
        // Rule at src/isa/aarch64/inst.isle line 4945.
        return v21;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src/isa/aarch64/inst.isle line 4938"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4968.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::JTSequence {
        default: arg1,
        targets: arg2.clone(),
        ridx: arg0,
        rtmp1: v4,
        rtmp2: v5,
    };
    let v7 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 4990.
    return v7;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 4998.
    return v4;
}

// Generated as internal constructor for term test_branch.
pub fn constructor_test_branch<C: Context>(
    ctx: &mut C,
    arg0: &TestBitAndBranchKind,
    arg1: BranchTarget,
    arg2: BranchTarget,
    arg3: Reg,
    arg4: u8,
) -> SideEffectNoResult {
    let v5 = MInst::TestBitAndBranch {
        kind: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
        rn: arg3,
        bit: arg4,
    };
    let v6 = SideEffectNoResult::Inst { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 5004.
    return v6;
}

// Generated as internal constructor for term tbnz.
pub fn constructor_tbnz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::NZ, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 5009.
    return v5.clone();
}

// Generated as internal constructor for term tbz.
pub fn constructor_tbz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::Z, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 5014.
    return v5.clone();
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 5019.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 5025.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src/isa/aarch64/inst.isle line 5031.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v15 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
    let v16 = &constructor_with_flags_side_effect(ctx, v14, v15);
    let v17 = constructor_emit_side_effect(ctx, v16);
    // Rule at src/isa/aarch64/inst.isle line 5035.
    return v17;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5043.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5047.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5051.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5055.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5059.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 5063.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 5079.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 5086.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 5093.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst_neon.isle line 3.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1782,
            args: ref v1783,
            flags: v1784,
        } => {
            if let &Opcode::AtomicCas = v1782 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1666 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1667) = v1666 {
                        let v1689 = C::use_lse(ctx, arg0);
                        if let Some(v1690) = v1689 {
                            let v1785 = C::unpack_value_array_3(ctx, v1783);
                            let v1789 = C::put_in_reg(ctx, v1785.0);
                            let v1790 = C::put_in_reg(ctx, v1785.1);
                            let v1791 = C::put_in_reg(ctx, v1785.2);
                            let v1792 =
                                constructor_lse_atomic_cas(ctx, v1789, v1790, v1791, v1667, v1784);
                            let v1793 = constructor_output_reg(ctx, v1792);
                            let v1794 = Some(v1793);
                            // Rule at src/isa/aarch64/lower.isle line 2327.
                            return v1794;
                        }
                        let v1785 = C::unpack_value_array_3(ctx, v1783);
                        let v1789 = C::put_in_reg(ctx, v1785.0);
                        let v1790 = C::put_in_reg(ctx, v1785.1);
                        let v1791 = C::put_in_reg(ctx, v1785.2);
                        let v1795 =
                            constructor_atomic_cas_loop(ctx, v1789, v1790, v1791, v1667, v1784);
                        let v1796 = constructor_output_reg(ctx, v1795);
                        let v1797 = Some(v1796);
                        // Rule at src/isa/aarch64/lower.isle line 2332.
                        return v1797;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1691,
            args: ref v1692,
            flags: v1693,
            op: ref v1694,
        } => {
            if let &Opcode::AtomicRmw = v1691 {
                match v1694 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1700 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1701 = constructor_output_reg(ctx, v1700);
                                    let v1702 = Some(v1701);
                                    // Rule at src/isa/aarch64/lower.isle line 2254.
                                    return v1702;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1739 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1740 = constructor_output_reg(ctx, v1739);
                                let v1741 = Some(v1740);
                                // Rule at src/isa/aarch64/lower.isle line 2292.
                                return v1741;
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1590 = C::zero_reg(ctx);
                                    let v1733 = constructor_eon(ctx, v1667, v1699, v1590);
                                    let v1734 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1695.0,
                                        v1733,
                                        v1667,
                                        v1693,
                                    );
                                    let v1735 = constructor_output_reg(ctx, v1734);
                                    let v1736 = Some(v1735);
                                    // Rule at src/isa/aarch64/lower.isle line 2286.
                                    return v1736;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1747 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1748 = constructor_output_reg(ctx, v1747);
                                let v1749 = Some(v1748);
                                // Rule at src/isa/aarch64/lower.isle line 2298.
                                return v1749;
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1751 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1752 = constructor_output_reg(ctx, v1751);
                                let v1753 = Some(v1752);
                                // Rule at src/isa/aarch64/lower.isle line 2301.
                                return v1753;
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1708 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1709 = constructor_output_reg(ctx, v1708);
                                    let v1710 = Some(v1709);
                                    // Rule at src/isa/aarch64/lower.isle line 2262.
                                    return v1710;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1755 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1756 = constructor_output_reg(ctx, v1755);
                                let v1757 = Some(v1756);
                                // Rule at src/isa/aarch64/lower.isle line 2304.
                                return v1757;
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1712 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1713 = constructor_output_reg(ctx, v1712);
                                    let v1714 = Some(v1713);
                                    // Rule at src/isa/aarch64/lower.isle line 2266.
                                    return v1714;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1767 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1768 = constructor_output_reg(ctx, v1767);
                                let v1769 = Some(v1768);
                                // Rule at src/isa/aarch64/lower.isle line 2313.
                                return v1769;
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1716 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1717 = constructor_output_reg(ctx, v1716);
                                    let v1718 = Some(v1717);
                                    // Rule at src/isa/aarch64/lower.isle line 2270.
                                    return v1718;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1763 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1764 = constructor_output_reg(ctx, v1763);
                                let v1765 = Some(v1764);
                                // Rule at src/isa/aarch64/lower.isle line 2310.
                                return v1765;
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v776 = C::zero_reg(ctx);
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1727 = C::put_in_reg(ctx, v1695.1);
                                    let v1728 = constructor_sub(ctx, v1667, v776, v1727);
                                    let v1729 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1695.0,
                                        v1728,
                                        v1667,
                                        v1693,
                                    );
                                    let v1730 = constructor_output_reg(ctx, v1729);
                                    let v1731 = Some(v1730);
                                    // Rule at src/isa/aarch64/lower.isle line 2282.
                                    return v1731;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1743 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1744 = constructor_output_reg(ctx, v1743);
                                let v1745 = Some(v1744);
                                // Rule at src/isa/aarch64/lower.isle line 2295.
                                return v1745;
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1720 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1721 = constructor_output_reg(ctx, v1720);
                                    let v1722 = Some(v1721);
                                    // Rule at src/isa/aarch64/lower.isle line 2274.
                                    return v1722;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1775 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1776 = constructor_output_reg(ctx, v1775);
                                let v1777 = Some(v1776);
                                // Rule at src/isa/aarch64/lower.isle line 2319.
                                return v1777;
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1724 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1725 = constructor_output_reg(ctx, v1724);
                                    let v1726 = Some(v1725);
                                    // Rule at src/isa/aarch64/lower.isle line 2278.
                                    return v1726;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1771 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1772 = constructor_output_reg(ctx, v1771);
                                let v1773 = Some(v1772);
                                // Rule at src/isa/aarch64/lower.isle line 2316.
                                return v1773;
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1779 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1780 = constructor_output_reg(ctx, v1779);
                                let v1781 = Some(v1780);
                                // Rule at src/isa/aarch64/lower.isle line 2322.
                                return v1781;
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1666 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1667) = v1666 {
                                let v1689 = C::use_lse(ctx, arg0);
                                if let Some(v1690) = v1689 {
                                    let v1695 = C::unpack_value_array_2(ctx, v1692);
                                    let v1699 = C::put_in_reg(ctx, v1695.1);
                                    let v1704 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1695.0,
                                        v1699,
                                        v1667,
                                        v1693,
                                    );
                                    let v1705 = constructor_output_reg(ctx, v1704);
                                    let v1706 = Some(v1705);
                                    // Rule at src/isa/aarch64/lower.isle line 2258.
                                    return v1706;
                                }
                                let v1695 = C::unpack_value_array_2(ctx, v1692);
                                let v1738 = C::put_in_reg(ctx, v1695.0);
                                let v1727 = C::put_in_reg(ctx, v1695.1);
                                let v1759 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1738,
                                    v1727,
                                    v1667,
                                    v1693,
                                );
                                let v1760 = constructor_output_reg(ctx, v1759);
                                let v1761 = Some(v1760);
                                // Rule at src/isa/aarch64/lower.isle line 2307.
                                return v1761;
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v43,
            args: ref v44,
        } => {
            match v43 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v288 = constructor_vec_tbl(ctx, v48, v49);
                        let v289 = constructor_output_reg(ctx, v288);
                        let v290 = Some(v289);
                        // Rule at src/isa/aarch64/lower.isle line 247.
                        return v290;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v913 = C::ty_int(ctx, v3);
                            if let Some(v914) = v913 {
                                let v378 = true;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v920 = constructor_cmp_and_choose(
                                    ctx,
                                    v42,
                                    &Cond::Lt,
                                    v378,
                                    v45.0,
                                    v45.1,
                                );
                                let v921 = C::output(ctx, v920);
                                let v922 = Some(v921);
                                // Rule at src/isa/aarch64/lower.isle line 1172.
                                return v922;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v72 = C::put_in_reg(ctx, v45.1);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v939 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v72,
                                v450,
                                &VectorSize::Size64x2,
                            );
                            let v940 = C::put_in_reg(ctx, v45.0);
                            let v941 = C::put_in_reg(ctx, v45.1);
                            let v942 = constructor_bsl(ctx, I64X2, v939, v940, v941);
                            let v943 = constructor_output_reg(ctx, v942);
                            let v944 = Some(v943);
                            // Rule at src/isa/aarch64/lower.isle line 1184.
                            return v944;
                        }
                        let v931 = C::not_i64x2(ctx, v3);
                        if let Some(v932) = v931 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v934 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v48, v49, v147);
                            let v935 = constructor_output_reg(ctx, v934);
                            let v936 = Some(v935);
                            // Rule at src/isa/aarch64/lower.isle line 1181.
                            return v936;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v913 = C::ty_int(ctx, v3);
                            if let Some(v914) = v913 {
                                let v377 = false;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v916 = constructor_cmp_and_choose(
                                    ctx,
                                    v42,
                                    &Cond::Lo,
                                    v377,
                                    v45.0,
                                    v45.1,
                                );
                                let v917 = C::output(ctx, v916);
                                let v918 = Some(v917);
                                // Rule at src/isa/aarch64/lower.isle line 1170.
                                return v918;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v72 = C::put_in_reg(ctx, v45.1);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v950 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v72,
                                v450,
                                &VectorSize::Size64x2,
                            );
                            let v940 = C::put_in_reg(ctx, v45.0);
                            let v941 = C::put_in_reg(ctx, v45.1);
                            let v951 = constructor_bsl(ctx, I64X2, v950, v940, v941);
                            let v952 = constructor_output_reg(ctx, v951);
                            let v953 = Some(v952);
                            // Rule at src/isa/aarch64/lower.isle line 1190.
                            return v953;
                        }
                        let v931 = C::not_i64x2(ctx, v3);
                        if let Some(v932) = v931 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v946 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v48, v49, v147);
                            let v947 = constructor_output_reg(ctx, v946);
                            let v948 = Some(v947);
                            // Rule at src/isa/aarch64/lower.isle line 1187.
                            return v948;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v913 = C::ty_int(ctx, v3);
                            if let Some(v914) = v913 {
                                let v378 = true;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v928 = constructor_cmp_and_choose(
                                    ctx,
                                    v42,
                                    &Cond::Gt,
                                    v378,
                                    v45.0,
                                    v45.1,
                                );
                                let v929 = C::output(ctx, v928);
                                let v930 = Some(v929);
                                // Rule at src/isa/aarch64/lower.isle line 1176.
                                return v930;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v958 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v48,
                                v49,
                                &VectorSize::Size64x2,
                            );
                            let v940 = C::put_in_reg(ctx, v45.0);
                            let v941 = C::put_in_reg(ctx, v45.1);
                            let v959 = constructor_bsl(ctx, I64X2, v958, v940, v941);
                            let v960 = constructor_output_reg(ctx, v959);
                            let v961 = Some(v960);
                            // Rule at src/isa/aarch64/lower.isle line 1196.
                            return v961;
                        }
                        let v931 = C::not_i64x2(ctx, v3);
                        if let Some(v932) = v931 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v955 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v48, v49, v147);
                            let v956 = constructor_output_reg(ctx, v955);
                            let v957 = Some(v956);
                            // Rule at src/isa/aarch64/lower.isle line 1193.
                            return v957;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v913 = C::ty_int(ctx, v3);
                            if let Some(v914) = v913 {
                                let v377 = false;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v924 = constructor_cmp_and_choose(
                                    ctx,
                                    v42,
                                    &Cond::Hi,
                                    v377,
                                    v45.0,
                                    v45.1,
                                );
                                let v925 = C::output(ctx, v924);
                                let v926 = Some(v925);
                                // Rule at src/isa/aarch64/lower.isle line 1174.
                                return v926;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v966 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v48,
                                v49,
                                &VectorSize::Size64x2,
                            );
                            let v940 = C::put_in_reg(ctx, v45.0);
                            let v941 = C::put_in_reg(ctx, v45.1);
                            let v967 = constructor_bsl(ctx, I64X2, v966, v940, v941);
                            let v968 = constructor_output_reg(ctx, v967);
                            let v969 = Some(v968);
                            // Rule at src/isa/aarch64/lower.isle line 1202.
                            return v969;
                        }
                        let v931 = C::not_i64x2(ctx, v3);
                        if let Some(v932) = v931 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v963 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v48, v49, v147);
                            let v964 = constructor_output_reg(ctx, v963);
                            let v965 = Some(v964);
                            // Rule at src/isa/aarch64/lower.isle line 1199.
                            return v965;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v449 = constructor_splat_const(ctx, 0x1_u64, &VectorSize::Size64x2);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v136 = C::put_in_reg(ctx, v45.1);
                            let v451 = constructor_orr_vec(ctx, v450, v136, &VectorSize::Size64x2);
                            let v452 = constructor_and_vec(ctx, v451, v449, &VectorSize::Size64x2);
                            let v453 = C::put_in_reg(ctx, v45.0);
                            let v455 =
                                constructor_ushr_vec_imm(ctx, v453, 0x1_u8, &VectorSize::Size64x2);
                            let v456 = C::put_in_reg(ctx, v45.1);
                            let v457 =
                                constructor_ushr_vec_imm(ctx, v456, 0x1_u8, &VectorSize::Size64x2);
                            let v458 = constructor_add_vec(ctx, v455, v457, &VectorSize::Size64x2);
                            let v459 = constructor_add_vec(ctx, v452, v458, &VectorSize::Size64x2);
                            let v460 = constructor_output_reg(ctx, v459);
                            let v461 = Some(v460);
                            // Rule at src/isa/aarch64/lower.isle line 392.
                            return v461;
                        }
                        let v462 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v463) = v462 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v465 = &constructor_vector_size(ctx, v463);
                            let v466 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v48, v49, v465);
                            let v467 = constructor_output_reg(ctx, v466);
                            let v468 = Some(v467);
                            // Rule at src/isa/aarch64/lower.isle line 401.
                            return v468;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v764 = constructor_uqadd(ctx, v48, v49, v763);
                            let v765 = constructor_output_reg(ctx, v764);
                            let v766 = Some(v765);
                            // Rule at src/isa/aarch64/lower.isle line 773.
                            return v766;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v767 = constructor_sqadd(ctx, v48, v49, v763);
                            let v768 = constructor_output_reg(ctx, v767);
                            let v769 = Some(v768);
                            // Rule at src/isa/aarch64/lower.isle line 778.
                            return v769;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v770 = constructor_uqsub(ctx, v48, v49, v763);
                            let v771 = constructor_output_reg(ctx, v770);
                            let v772 = Some(v771);
                            // Rule at src/isa/aarch64/lower.isle line 783.
                            return v772;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v773 = constructor_sqsub(ctx, v48, v49, v763);
                            let v774 = constructor_output_reg(ctx, v773);
                            let v775 = Some(v774);
                            // Rule at src/isa/aarch64/lower.isle line 788.
                            return v775;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Binary {
                                    opcode: ref v96,
                                    args: ref v97,
                                } = v55
                                {
                                    match v96 {
                                        &Opcode::Imul => {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v128 = C::put_in_reg(ctx, v98.0);
                                            let v129 = C::put_in_reg(ctx, v98.1);
                                            let v130 = C::put_in_reg(ctx, v45.0);
                                            let v131 = constructor_madd(ctx, v42, v128, v129, v130);
                                            let v132 = constructor_output_reg(ctx, v131);
                                            let v133 = Some(v132);
                                            // Rule at src/isa/aarch64/lower.isle line 94.
                                            return v133;
                                        }
                                        &Opcode::Ishl => {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v101 = C::def_inst(ctx, v98.1);
                                            if let Some(v102) = v101 {
                                                let v103 = &C::inst_data(ctx, v102);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v104,
                                                    imm: v105,
                                                } = v103
                                                {
                                                    if let &Opcode::Iconst = v104 {
                                                        let v106 =
                                                            C::lshl_from_imm64(ctx, v42, v105);
                                                        if let Some(v107) = v106 {
                                                            let v48 = C::put_in_reg(ctx, v45.0);
                                                            let v108 = C::put_in_reg(ctx, v98.0);
                                                            let v109 = constructor_add_shift(
                                                                ctx, v42, v48, v108, v107,
                                                            );
                                                            let v110 =
                                                                constructor_output_reg(ctx, v109);
                                                            let v111 = Some(v110);
                                                            // Rule at src/isa/aarch64/lower.isle line 83.
                                                            return v111;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                match v66 {
                                    &InstructionData::Binary {
                                        opcode: ref v112,
                                        args: ref v113,
                                    } => {
                                        match v112 {
                                            &Opcode::Imul => {
                                                let v114 = C::unpack_value_array_2(ctx, v113);
                                                let v134 = C::put_in_reg(ctx, v114.0);
                                                let v135 = C::put_in_reg(ctx, v114.1);
                                                let v136 = C::put_in_reg(ctx, v45.1);
                                                let v137 =
                                                    constructor_madd(ctx, v42, v134, v135, v136);
                                                let v138 = constructor_output_reg(ctx, v137);
                                                let v139 = Some(v138);
                                                // Rule at src/isa/aarch64/lower.isle line 97.
                                                return v139;
                                            }
                                            &Opcode::Ishl => {
                                                let v114 = C::unpack_value_array_2(ctx, v113);
                                                let v117 = C::def_inst(ctx, v114.1);
                                                if let Some(v118) = v117 {
                                                    let v119 = &C::inst_data(ctx, v118);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v120,
                                                        imm: v121,
                                                    } = v119
                                                    {
                                                        if let &Opcode::Iconst = v120 {
                                                            let v122 =
                                                                C::lshl_from_imm64(ctx, v42, v121);
                                                            if let Some(v123) = v122 {
                                                                let v72 = C::put_in_reg(ctx, v45.1);
                                                                let v124 =
                                                                    C::put_in_reg(ctx, v114.0);
                                                                let v125 = constructor_add_shift(
                                                                    ctx, v42, v72, v124, v123,
                                                                );
                                                                let v126 = constructor_output_reg(
                                                                    ctx, v125,
                                                                );
                                                                let v127 = Some(v126);
                                                                // Rule at src/isa/aarch64/lower.isle line 88.
                                                                return v127;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v67,
                                        imm: v68,
                                    } => {
                                        if let &Opcode::Iconst = v67 {
                                            let v69 = C::u64_from_imm64(ctx, v68);
                                            let v70 = C::imm12_from_u64(ctx, v69);
                                            if let Some(v71) = v70 {
                                                let v72 = C::put_in_reg(ctx, v45.1);
                                                let v73 = constructor_add_imm(ctx, v42, v72, v71);
                                                let v74 = constructor_output_reg(ctx, v73);
                                                let v75 = Some(v74);
                                                // Rule at src/isa/aarch64/lower.isle line 60.
                                                return v75;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v59 = C::imm12_from_u64(ctx, v58);
                                        if let Some(v60) = v59 {
                                            let v48 = C::put_in_reg(ctx, v45.0);
                                            let v61 = constructor_add_imm(ctx, v42, v48, v60);
                                            let v62 = constructor_output_reg(ctx, v61);
                                            let v63 = Some(v62);
                                            // Rule at src/isa/aarch64/lower.isle line 57.
                                            return v63;
                                        }
                                    }
                                }
                            }
                            let v81 = constructor_imm12_from_negated_value(ctx, v45.0);
                            if let Some(v82) = v81 {
                                let v72 = C::put_in_reg(ctx, v45.1);
                                let v83 = constructor_sub_imm(ctx, v42, v72, v82);
                                let v84 = constructor_output_reg(ctx, v83);
                                let v85 = Some(v84);
                                // Rule at src/isa/aarch64/lower.isle line 69.
                                return v85;
                            }
                            let v76 = constructor_imm12_from_negated_value(ctx, v45.1);
                            if let Some(v77) = v76 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v78 = constructor_sub_imm(ctx, v42, v48, v77);
                                let v79 = constructor_output_reg(ctx, v78);
                                let v80 = Some(v79);
                                // Rule at src/isa/aarch64/lower.isle line 65.
                                return v80;
                            }
                            let v91 = &C::extended_value_from_value(ctx, v45.0);
                            if let Some(v92) = v91 {
                                let v72 = C::put_in_reg(ctx, v45.1);
                                let v93 = constructor_add_extend(ctx, v42, v72, v92);
                                let v94 = constructor_output_reg(ctx, v93);
                                let v95 = Some(v94);
                                // Rule at src/isa/aarch64/lower.isle line 78.
                                return v95;
                            }
                            let v86 = &C::extended_value_from_value(ctx, v45.1);
                            if let Some(v87) = v86 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v88 = constructor_add_extend(ctx, v42, v48, v87);
                                let v89 = constructor_output_reg(ctx, v88);
                                let v90 = Some(v89);
                                // Rule at src/isa/aarch64/lower.isle line 75.
                                return v90;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v50 = constructor_add(ctx, v42, v48, v49);
                            let v51 = constructor_output_reg(ctx, v50);
                            let v52 = Some(v51);
                            // Rule at src/isa/aarch64/lower.isle line 53.
                            return v52;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v148 = constructor_add_vec(ctx, v48, v49, v147);
                            let v149 = constructor_output_reg(ctx, v148);
                            let v150 = Some(v149);
                            // Rule at src/isa/aarch64/lower.isle line 106.
                            return v150;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v151 = C::put_in_regs(ctx, v45.0);
                            let v153 = C::value_regs_get(ctx, v151, 0x0_usize);
                            let v155 = C::value_regs_get(ctx, v151, 0x1_usize);
                            let v156 = C::put_in_regs(ctx, v45.1);
                            let v157 = C::value_regs_get(ctx, v156, 0x0_usize);
                            let v158 = C::value_regs_get(ctx, v156, 0x1_usize);
                            let v160 = &constructor_add_with_flags_paired(ctx, I64, v153, v157);
                            let v161 = &constructor_adc_paired(ctx, I64, v155, v158);
                            let v162 = constructor_with_flags(ctx, v160, v161);
                            let v163 = C::output(ctx, v162);
                            let v164 = Some(v163);
                            // Rule at src/isa/aarch64/lower.isle line 110.
                            return v164;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v148 = constructor_add_vec(ctx, v48, v49, v147);
                            let v2321 = C::value_reg(ctx, v148);
                            let v2322 = C::output(ctx, v2321);
                            let v2323 = Some(v2322);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 2.
                            return v2323;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v76 = constructor_imm12_from_negated_value(ctx, v45.1);
                            if let Some(v77) = v76 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v745 = constructor_add_imm(ctx, v42, v48, v77);
                                let v746 = constructor_output_reg(ctx, v745);
                                let v747 = Some(v746);
                                // Rule at src/isa/aarch64/lower.isle line 747.
                                return v747;
                            }
                            let v86 = &C::extended_value_from_value(ctx, v45.1);
                            if let Some(v87) = v86 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v748 = constructor_sub_extend(ctx, v42, v48, v87);
                                let v749 = constructor_output_reg(ctx, v748);
                                let v750 = Some(v749);
                                // Rule at src/isa/aarch64/lower.isle line 753.
                                return v750;
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                match v55 {
                                    &InstructionData::Binary {
                                        opcode: ref v96,
                                        args: ref v97,
                                    } => {
                                        if let &Opcode::Imul = v96 {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v128 = C::put_in_reg(ctx, v98.0);
                                            let v129 = C::put_in_reg(ctx, v98.1);
                                            let v130 = C::put_in_reg(ctx, v45.0);
                                            let v140 = constructor_msub(ctx, v42, v128, v129, v130);
                                            let v141 = constructor_output_reg(ctx, v140);
                                            let v142 = Some(v141);
                                            // Rule at src/isa/aarch64/lower.isle line 101.
                                            return v142;
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } => {
                                        if let &Opcode::Iconst = v56 {
                                            let v58 = C::u64_from_imm64(ctx, v57);
                                            let v59 = C::imm12_from_u64(ctx, v58);
                                            if let Some(v60) = v59 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v742 = constructor_sub_imm(ctx, v42, v48, v60);
                                                let v743 = constructor_output_reg(ctx, v742);
                                                let v744 = Some(v743);
                                                // Rule at src/isa/aarch64/lower.isle line 742.
                                                return v744;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v151 = C::put_in_regs(ctx, v45.0);
                            let v757 = C::put_in_regs(ctx, v45.1);
                            let v758 = constructor_sub_i128(ctx, v151, v757);
                            let v759 = C::output(ctx, v758);
                            let v760 = Some(v759);
                            // Rule at src/isa/aarch64/lower.isle line 768.
                            return v760;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v754 = constructor_sub_vec(ctx, v48, v49, v147);
                            let v755 = constructor_output_reg(ctx, v754);
                            let v756 = Some(v755);
                            // Rule at src/isa/aarch64/lower.isle line 764.
                            return v756;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Binary {
                                    opcode: ref v96,
                                    args: ref v97,
                                } = v55
                                {
                                    if let &Opcode::Ishl = v96 {
                                        let v98 = C::unpack_value_array_2(ctx, v97);
                                        let v101 = C::def_inst(ctx, v98.1);
                                        if let Some(v102) = v101 {
                                            let v103 = &C::inst_data(ctx, v102);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v104,
                                                imm: v105,
                                            } = v103
                                            {
                                                if let &Opcode::Iconst = v104 {
                                                    let v106 = C::lshl_from_imm64(ctx, v42, v105);
                                                    if let Some(v107) = v106 {
                                                        let v48 = C::put_in_reg(ctx, v45.0);
                                                        let v108 = C::put_in_reg(ctx, v98.0);
                                                        let v751 = constructor_sub_shift(
                                                            ctx, v42, v48, v108, v107,
                                                        );
                                                        let v752 =
                                                            constructor_output_reg(ctx, v751);
                                                        let v753 = Some(v752);
                                                        // Rule at src/isa/aarch64/lower.isle line 758.
                                                        return v753;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v739 = constructor_sub(ctx, v42, v48, v49);
                            let v740 = constructor_output_reg(ctx, v739);
                            let v741 = Some(v740);
                            // Rule at src/isa/aarch64/lower.isle line 738.
                            return v741;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v754 = constructor_sub_vec(ctx, v48, v49, v147);
                            let v2324 = C::value_reg(ctx, v754);
                            let v2325 = C::output(ctx, v2324);
                            let v2326 = Some(v2325);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 6.
                            return v2326;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::Uextend => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::Uextend = v404 {
                                                            let v801 =
                                                                constructor_put_in_reg_zext64(
                                                                    ctx, v405,
                                                                );
                                                            let v802 =
                                                                constructor_put_in_reg_zext64(
                                                                    ctx, v407,
                                                                );
                                                            let v372 = C::zero_reg(ctx);
                                                            let v803 = constructor_madd(
                                                                ctx, I64, v801, v802, v372,
                                                            );
                                                            let v804 = constructor_umulh(
                                                                ctx, I64, v801, v802,
                                                            );
                                                            let v805 =
                                                                C::value_regs(ctx, v803, v804);
                                                            let v806 = C::output(ctx, v805);
                                                            let v807 = Some(v806);
                                                            // Rule at src/isa/aarch64/lower.isle line 842.
                                                            return v807;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::Sextend => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::Sextend = v404 {
                                                            let v808 =
                                                                constructor_put_in_reg_sext64(
                                                                    ctx, v405,
                                                                );
                                                            let v809 =
                                                                constructor_put_in_reg_sext64(
                                                                    ctx, v407,
                                                                );
                                                            let v372 = C::zero_reg(ctx);
                                                            let v810 = constructor_madd(
                                                                ctx, I64, v808, v809, v372,
                                                            );
                                                            let v811 = constructor_smulh(
                                                                ctx, I64, v808, v809,
                                                            );
                                                            let v812 =
                                                                C::value_regs(ctx, v810, v811);
                                                            let v813 = C::output(ctx, v812);
                                                            let v814 = Some(v813);
                                                            // Rule at src/isa/aarch64/lower.isle line 850.
                                                            return v814;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v153 = C::value_regs_get(ctx, v151, 0x0_usize);
                                let v155 = C::value_regs_get(ctx, v151, 0x1_usize);
                                let v156 = C::put_in_regs(ctx, v45.1);
                                let v157 = C::value_regs_get(ctx, v156, 0x0_usize);
                                let v158 = C::value_regs_get(ctx, v156, 0x1_usize);
                                let v793 = constructor_umulh(ctx, I64, v153, v157);
                                let v794 = constructor_madd(ctx, I64, v153, v158, v793);
                                let v795 = constructor_madd(ctx, I64, v155, v157, v794);
                                let v796 = C::zero_reg(ctx);
                                let v797 = constructor_madd(ctx, I64, v153, v157, v796);
                                let v798 = C::value_regs(ctx, v797, v795);
                                let v799 = C::output(ctx, v798);
                                let v800 = Some(v799);
                                // Rule at src/isa/aarch64/lower.isle line 812.
                                return v800;
                            }
                            I16X8 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v832 = constructor_smull8(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v833 =
                                                                        constructor_output_reg(
                                                                            ctx, v832,
                                                                        );
                                                                    let v834 = Some(v833);
                                                                    // Rule at src/isa/aarch64/lower.isle line 931.
                                                                    return v834;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v835 = constructor_smull8(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v836 =
                                                                        constructor_output_reg(
                                                                            ctx, v835,
                                                                        );
                                                                    let v837 = Some(v836);
                                                                    // Rule at src/isa/aarch64/lower.isle line 937.
                                                                    return v837;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v838 = constructor_umull8(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v839 =
                                                                        constructor_output_reg(
                                                                            ctx, v838,
                                                                        );
                                                                    let v840 = Some(v839);
                                                                    // Rule at src/isa/aarch64/lower.isle line 943.
                                                                    return v840;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v841 = constructor_umull8(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v842 =
                                                                        constructor_output_reg(
                                                                            ctx, v841,
                                                                        );
                                                                    let v843 = Some(v842);
                                                                    // Rule at src/isa/aarch64/lower.isle line 949.
                                                                    return v843;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v844 = constructor_smull16(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v845 =
                                                                        constructor_output_reg(
                                                                            ctx, v844,
                                                                        );
                                                                    let v846 = Some(v845);
                                                                    // Rule at src/isa/aarch64/lower.isle line 955.
                                                                    return v846;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v847 = constructor_smull16(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v848 =
                                                                        constructor_output_reg(
                                                                            ctx, v847,
                                                                        );
                                                                    let v849 = Some(v848);
                                                                    // Rule at src/isa/aarch64/lower.isle line 961.
                                                                    return v849;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v850 = constructor_umull16(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v851 =
                                                                        constructor_output_reg(
                                                                            ctx, v850,
                                                                        );
                                                                    let v852 = Some(v851);
                                                                    // Rule at src/isa/aarch64/lower.isle line 967.
                                                                    return v852;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v853 = constructor_umull16(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v854 =
                                                                        constructor_output_reg(
                                                                            ctx, v853,
                                                                        );
                                                                    let v855 = Some(v854);
                                                                    // Rule at src/isa/aarch64/lower.isle line 973.
                                                                    return v855;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v856 = constructor_smull32(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v857 =
                                                                        constructor_output_reg(
                                                                            ctx, v856,
                                                                        );
                                                                    let v858 = Some(v857);
                                                                    // Rule at src/isa/aarch64/lower.isle line 979.
                                                                    return v858;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v859 = constructor_smull32(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v860 =
                                                                        constructor_output_reg(
                                                                            ctx, v859,
                                                                        );
                                                                    let v861 = Some(v860);
                                                                    // Rule at src/isa/aarch64/lower.isle line 985.
                                                                    return v861;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v862 = constructor_umull32(
                                                                        ctx, v408, v831, v377,
                                                                    );
                                                                    let v863 =
                                                                        constructor_output_reg(
                                                                            ctx, v862,
                                                                        );
                                                                    let v864 = Some(v863);
                                                                    // Rule at src/isa/aarch64/lower.isle line 991.
                                                                    return v864;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 =
                                                                        C::put_in_reg(ctx, v405);
                                                                    let v831 =
                                                                        C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v865 = constructor_umull32(
                                                                        ctx, v408, v831, v378,
                                                                    );
                                                                    let v866 =
                                                                        constructor_output_reg(
                                                                            ctx, v865,
                                                                        );
                                                                    let v867 = Some(v866);
                                                                    // Rule at src/isa/aarch64/lower.isle line 997.
                                                                    return v867;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v820 = constructor_rev64(ctx, v49, &VectorSize::Size32x4);
                                let v821 = constructor_mul(ctx, v820, v48, &VectorSize::Size32x4);
                                let v822 = constructor_xtn(ctx, v48, &ScalarSize::Size32);
                                let v823 = constructor_addp(ctx, v821, v821, &VectorSize::Size32x4);
                                let v824 = constructor_xtn(ctx, v49, &ScalarSize::Size32);
                                let v377 = false;
                                let v825 = constructor_shll32(ctx, v823, v377);
                                let v826 = constructor_umlal32(ctx, v825, v824, v822, v377);
                                let v827 = constructor_output_reg(ctx, v826);
                                let v828 = Some(v827);
                                // Rule at src/isa/aarch64/lower.isle line 892.
                                return v828;
                            }
                            _ => {}
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v815 = C::not_i64x2(ctx, v762);
                            if let Some(v816) = v815 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v763 = &constructor_vector_size(ctx, v762);
                                let v817 = constructor_mul(ctx, v48, v49, v763);
                                let v818 = constructor_output_reg(ctx, v817);
                                let v819 = Some(v818);
                                // Rule at src/isa/aarch64/lower.isle line 860.
                                return v819;
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v790 = constructor_madd(ctx, v42, v48, v49, v372);
                            let v791 = constructor_output_reg(ctx, v790);
                            let v792 = Some(v791);
                            // Rule at src/isa/aarch64/lower.isle line 808.
                            return v792;
                        }
                        let v462 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v463) = v462 {
                            let v2327 = C::dynamic_lane(ctx, v463);
                            if let Some(v2328) = v2327 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v465 = &constructor_vector_size(ctx, v463);
                                let v2332 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v48, v49, v465);
                                let v2333 = C::value_reg(ctx, v2332);
                                let v2334 = C::output(ctx, v2333);
                                let v2335 = Some(v2334);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 10.
                                return v2335;
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v879 = constructor_umulh(ctx, I64, v48, v49);
                            let v880 = constructor_output_reg(ctx, v879);
                            let v881 = Some(v880);
                            // Rule at src/isa/aarch64/lower.isle line 1016.
                            return v881;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                            let v883 = constructor_put_in_reg_zext64(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v884 = constructor_madd(ctx, I64, v882, v883, v372);
                            let v874 = C::ty_bits(ctx, v432);
                            let v875 = C::imm_shift_from_u8(ctx, v874);
                            let v885 = constructor_lsr_imm(ctx, I64, v884, v875);
                            let v886 = C::value_reg(ctx, v885);
                            let v887 = C::output(ctx, v886);
                            let v888 = Some(v887);
                            // Rule at src/isa/aarch64/lower.isle line 1019.
                            return v888;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v868 = constructor_smulh(ctx, I64, v48, v49);
                            let v869 = constructor_output_reg(ctx, v868);
                            let v870 = Some(v869);
                            // Rule at src/isa/aarch64/lower.isle line 1004.
                            return v870;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v872 = constructor_put_in_reg_sext64(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v873 = constructor_madd(ctx, I64, v871, v872, v372);
                            let v874 = C::ty_bits(ctx, v432);
                            let v875 = C::imm_shift_from_u8(ctx, v874);
                            let v876 = constructor_asr_imm(ctx, I64, v873, v875);
                            let v877 = constructor_output_reg(ctx, v876);
                            let v878 = Some(v877);
                            // Rule at src/isa/aarch64/lower.isle line 1007.
                            return v878;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v470 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v48, v49, v147);
                            let v471 = constructor_output_reg(ctx, v470);
                            let v472 = Some(v471);
                            // Rule at src/isa/aarch64/lower.isle line 406.
                            return v472;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                            let v889 = constructor_put_nonzero_in_reg_zext64(ctx, v45.1);
                            let v890 = constructor_a64_udiv(ctx, I64, v882, v889);
                            let v891 = constructor_output_reg(ctx, v890);
                            let v892 = Some(v891);
                            // Rule at src/isa/aarch64/lower.isle line 1035.
                            return v892;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v899 = C::safe_divisor_from_imm64(ctx, v42, v57);
                                        if let Some(v900) = v899 {
                                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                                            let v902 =
                                                constructor_imm(ctx, v42, &ImmExtend::Sign, v900);
                                            let v903 = constructor_a64_sdiv(ctx, I64, v871, v902);
                                            let v904 = constructor_output_reg(ctx, v903);
                                            let v905 = Some(v904);
                                            // Rule at src/isa/aarch64/lower.isle line 1084.
                                            return v905;
                                        }
                                    }
                                }
                            }
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v893 = constructor_put_nonzero_in_reg_sext64(ctx, v45.1);
                            let v894 = constructor_intmin_check(ctx, v42, v871);
                            let v895 = constructor_trap_if_div_overflow(ctx, v42, v894, v871, v893);
                            let v896 = constructor_a64_sdiv(ctx, I64, v895, v893);
                            let v897 = constructor_output_reg(ctx, v896);
                            let v898 = Some(v897);
                            // Rule at src/isa/aarch64/lower.isle line 1074.
                            return v898;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                            let v889 = constructor_put_nonzero_in_reg_zext64(ctx, v45.1);
                            let v890 = constructor_a64_udiv(ctx, I64, v882, v889);
                            let v906 = constructor_msub(ctx, I64, v890, v889, v882);
                            let v907 = constructor_output_reg(ctx, v906);
                            let v908 = Some(v907);
                            // Rule at src/isa/aarch64/lower.isle line 1116.
                            return v908;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v893 = constructor_put_nonzero_in_reg_sext64(ctx, v45.1);
                            let v909 = constructor_a64_sdiv(ctx, I64, v871, v893);
                            let v910 = constructor_msub(ctx, I64, v909, v893, v871);
                            let v911 = constructor_output_reg(ctx, v910);
                            let v912 = Some(v911);
                            // Rule at src/isa/aarch64/lower.isle line 1123.
                            return v912;
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2216 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2217) = v2216 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2220 = constructor_overflow_op_normal(
                                ctx,
                                v2217,
                                v45.0,
                                v45.1,
                                &ALUOp::AddS,
                                &Cond::Hs,
                            );
                            let v2221 = Some(v2220);
                            // Rule at src/isa/aarch64/lower.isle line 2876.
                            return v2221;
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2214 = constructor_overflow_op_small(
                                ctx,
                                v1213,
                                v45.0,
                                v45.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Add,
                            );
                            let v2215 = Some(v2214);
                            // Rule at src/isa/aarch64/lower.isle line 2872.
                            return v2215;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2223 = constructor_overflow_op_128(
                                ctx,
                                v45.0,
                                v45.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Hs,
                            );
                            let v2224 = Some(v2223);
                            // Rule at src/isa/aarch64/lower.isle line 2880.
                            return v2224;
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2216 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2217) = v2216 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2229 = constructor_overflow_op_normal(
                                ctx,
                                v2217,
                                v45.0,
                                v45.1,
                                &ALUOp::AddS,
                                &Cond::Vs,
                            );
                            let v2230 = Some(v2229);
                            // Rule at src/isa/aarch64/lower.isle line 2894.
                            return v2230;
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2226 = constructor_overflow_op_small(
                                ctx,
                                v1213,
                                v45.0,
                                v45.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Add,
                            );
                            let v2227 = Some(v2226);
                            // Rule at src/isa/aarch64/lower.isle line 2889.
                            return v2227;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2231 = constructor_overflow_op_128(
                                ctx,
                                v45.0,
                                v45.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Vs,
                            );
                            let v2232 = Some(v2231);
                            // Rule at src/isa/aarch64/lower.isle line 2900.
                            return v2232;
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2216 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2217) = v2216 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2237 = constructor_overflow_op_normal(
                                ctx,
                                v2217,
                                v45.0,
                                v45.1,
                                &ALUOp::SubS,
                                &Cond::Lo,
                            );
                            let v2238 = Some(v2237);
                            // Rule at src/isa/aarch64/lower.isle line 2914.
                            return v2238;
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2234 = constructor_overflow_op_small(
                                ctx,
                                v1213,
                                v45.0,
                                v45.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Sub,
                            );
                            let v2235 = Some(v2234);
                            // Rule at src/isa/aarch64/lower.isle line 2909.
                            return v2235;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2240 = constructor_overflow_op_128(
                                ctx,
                                v45.0,
                                v45.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Lo,
                            );
                            let v2241 = Some(v2240);
                            // Rule at src/isa/aarch64/lower.isle line 2920.
                            return v2241;
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2216 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2217) = v2216 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2244 = constructor_overflow_op_normal(
                                ctx,
                                v2217,
                                v45.0,
                                v45.1,
                                &ALUOp::SubS,
                                &Cond::Vs,
                            );
                            let v2245 = Some(v2244);
                            // Rule at src/isa/aarch64/lower.isle line 2934.
                            return v2245;
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2242 = constructor_overflow_op_small(
                                ctx,
                                v1213,
                                v45.0,
                                v45.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Sub,
                            );
                            let v2243 = Some(v2242);
                            // Rule at src/isa/aarch64/lower.isle line 2929.
                            return v2243;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2246 = constructor_overflow_op_128(
                                ctx,
                                v45.0,
                                v45.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Vs,
                            );
                            let v2247 = Some(v2246);
                            // Rule at src/isa/aarch64/lower.isle line 2940.
                            return v2247;
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2259 = constructor_umaddl(ctx, v48, v49, v372);
                                let v2261 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2259,
                                    v2259,
                                    &ExtendOp::UXTW,
                                );
                                let v2262 = &constructor_cset(ctx, &Cond::Ne);
                                let v2263 = constructor_with_flags_reg(ctx, v2261, v2262);
                                let v2264 = C::value_reg(ctx, v2259);
                                let v2265 = C::value_reg(ctx, v2263);
                                let v2266 = C::output_pair(ctx, v2264, v2265);
                                let v2267 = Some(v2266);
                                // Rule at src/isa/aarch64/lower.isle line 2966.
                                return v2267;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2268 = constructor_madd(ctx, I64, v48, v49, v372);
                                let v1227 = C::put_in_reg(ctx, v45.0);
                                let v2269 = C::put_in_reg(ctx, v45.1);
                                let v2270 = constructor_umulh(ctx, I64, v1227, v2269);
                                let v2271 = C::u8_into_imm12(ctx, 0x0_u8);
                                let v2272 = &constructor_cmp64_imm(ctx, v2270, v2271);
                                let v2273 = &constructor_cset(ctx, &Cond::Ne);
                                let v2274 = constructor_with_flags_reg(ctx, v2272, v2273);
                                let v2275 = C::value_reg(ctx, v2268);
                                let v2276 = C::value_reg(ctx, v2274);
                                let v2277 = C::output_pair(ctx, v2275, v2276);
                                let v2278 = Some(v2277);
                                // Rule at src/isa/aarch64/lower.isle line 2980.
                                return v2278;
                            }
                            _ => {}
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v2248 =
                                &constructor_lower_extend_op(ctx, v1213, &ArgumentExtension::Uext);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2249 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v2250 = constructor_put_in_reg_zext32(ctx, v45.1);
                            let v1057 = C::zero_reg(ctx);
                            let v2251 = constructor_madd(ctx, v1213, v2249, v2250, v1057);
                            let v2252 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v2251,
                                v2251,
                                v2248,
                            );
                            let v2253 = &constructor_cset(ctx, &Cond::Ne);
                            let v2254 = constructor_with_flags_reg(ctx, v2252, v2253);
                            let v2255 = C::value_reg(ctx, v2251);
                            let v2256 = C::value_reg(ctx, v2254);
                            let v2257 = C::output_pair(ctx, v2255, v2256);
                            let v2258 = Some(v2257);
                            // Rule at src/isa/aarch64/lower.isle line 2950.
                            return v2258;
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2289 = constructor_smaddl(ctx, v48, v49, v372);
                                let v2291 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2289,
                                    v2289,
                                    &ExtendOp::SXTW,
                                );
                                let v2262 = &constructor_cset(ctx, &Cond::Ne);
                                let v2292 = constructor_with_flags_reg(ctx, v2291, v2262);
                                let v2293 = C::value_reg(ctx, v2289);
                                let v2294 = C::value_reg(ctx, v2292);
                                let v2295 = C::output_pair(ctx, v2293, v2294);
                                let v2296 = Some(v2295);
                                // Rule at src/isa/aarch64/lower.isle line 3014.
                                return v2296;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2268 = constructor_madd(ctx, I64, v48, v49, v372);
                                let v1227 = C::put_in_reg(ctx, v45.0);
                                let v2269 = C::put_in_reg(ctx, v45.1);
                                let v2297 = constructor_smulh(ctx, I64, v1227, v2269);
                                let v2299 = &constructor_cmp_rr_shift_asr(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2297,
                                    v2268,
                                    0x3f_u64,
                                );
                                let v2300 = &constructor_cset(ctx, &Cond::Ne);
                                let v2301 = constructor_with_flags_reg(ctx, v2299, v2300);
                                let v2302 = C::value_reg(ctx, v2268);
                                let v2303 = C::value_reg(ctx, v2301);
                                let v2304 = C::output_pair(ctx, v2302, v2303);
                                let v2305 = Some(v2304);
                                // Rule at src/isa/aarch64/lower.isle line 3028.
                                return v2305;
                            }
                            _ => {}
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v2279 =
                                &constructor_lower_extend_op(ctx, v1213, &ArgumentExtension::Sext);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2280 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v2281 = constructor_put_in_reg_sext32(ctx, v45.1);
                            let v1057 = C::zero_reg(ctx);
                            let v2282 = constructor_madd(ctx, v1213, v2280, v2281, v1057);
                            let v2283 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v2282,
                                v2282,
                                v2279,
                            );
                            let v2253 = &constructor_cset(ctx, &Cond::Ne);
                            let v2284 = constructor_with_flags_reg(ctx, v2283, v2253);
                            let v2285 = C::value_reg(ctx, v2282);
                            let v2286 = C::value_reg(ctx, v2284);
                            let v2287 = C::output_pair(ctx, v2285, v2286);
                            let v2288 = Some(v2287);
                            // Rule at src/isa/aarch64/lower.isle line 2998.
                            return v2288;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v72 = C::put_in_reg(ctx, v45.1);
                                        let v1100 = C::put_in_reg(ctx, v405);
                                        let v763 = &constructor_vector_size(ctx, v762);
                                        let v1101 = constructor_bic_vec(ctx, v72, v1100, v763);
                                        let v1102 = constructor_output_reg(ctx, v1101);
                                        let v1103 = Some(v1102);
                                        // Rule at src/isa/aarch64/lower.isle line 1366.
                                        return v1103;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v831 = C::put_in_reg(ctx, v407);
                                        let v763 = &constructor_vector_size(ctx, v762);
                                        let v1097 = constructor_bic_vec(ctx, v48, v831, v763);
                                        let v1098 = constructor_output_reg(ctx, v1097);
                                        let v1099 = Some(v1098);
                                        // Rule at src/isa/aarch64/lower.isle line 1364.
                                        return v1099;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1094 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v45.1,
                                            v405,
                                        );
                                        let v1095 = C::output(ctx, v1094);
                                        let v1096 = Some(v1095);
                                        // Rule at src/isa/aarch64/lower.isle line 1362.
                                        return v1096;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1091 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v45.0,
                                            v407,
                                        );
                                        let v1092 = C::output(ctx, v1091);
                                        let v1093 = Some(v1092);
                                        // Rule at src/isa/aarch64/lower.isle line 1361.
                                        return v1093;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1088 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v42,
                                            v45.1,
                                            v405,
                                        );
                                        let v1089 = constructor_output_reg(ctx, v1088);
                                        let v1090 = Some(v1089);
                                        // Rule at src/isa/aarch64/lower.isle line 1358.
                                        return v1090;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1085 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v42,
                                            v45.0,
                                            v407,
                                        );
                                        let v1086 = constructor_output_reg(ctx, v1085);
                                        let v1087 = Some(v1086);
                                        // Rule at src/isa/aarch64/lower.isle line 1356.
                                        return v1087;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1078 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v45.0, v45.1);
                            let v1079 = C::output(ctx, v1078);
                            let v1080 = Some(v1079);
                            // Rule at src/isa/aarch64/lower.isle line 1348.
                            return v1080;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1075 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v42,
                                v45.0,
                                v45.1,
                            );
                            let v1076 = constructor_output_reg(ctx, v1075);
                            let v1077 = Some(v1076);
                            // Rule at src/isa/aarch64/lower.isle line 1345.
                            return v1077;
                        }
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1081 = constructor_and_vec(ctx, v48, v49, v763);
                            let v1082 = constructor_output_reg(ctx, v1081);
                            let v1083 = Some(v1082);
                            // Rule at src/isa/aarch64/lower.isle line 1350.
                            return v1083;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1124 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v45.1,
                                            v405,
                                        );
                                        let v1125 = C::output(ctx, v1124);
                                        let v1126 = Some(v1125);
                                        // Rule at src/isa/aarch64/lower.isle line 1388.
                                        return v1126;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1121 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v45.0,
                                            v407,
                                        );
                                        let v1122 = C::output(ctx, v1121);
                                        let v1123 = Some(v1122);
                                        // Rule at src/isa/aarch64/lower.isle line 1387.
                                        return v1123;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1118 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v42,
                                            v45.1,
                                            v405,
                                        );
                                        let v1119 = constructor_output_reg(ctx, v1118);
                                        let v1120 = Some(v1119);
                                        // Rule at src/isa/aarch64/lower.isle line 1384.
                                        return v1120;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1115 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v42,
                                            v45.0,
                                            v407,
                                        );
                                        let v1116 = constructor_output_reg(ctx, v1115);
                                        let v1117 = Some(v1116);
                                        // Rule at src/isa/aarch64/lower.isle line 1382.
                                        return v1117;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1108 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v45.0, v45.1);
                            let v1109 = C::output(ctx, v1108);
                            let v1110 = Some(v1109);
                            // Rule at src/isa/aarch64/lower.isle line 1374.
                            return v1110;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1105 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v42,
                                v45.0,
                                v45.1,
                            );
                            let v1106 = constructor_output_reg(ctx, v1105);
                            let v1107 = Some(v1106);
                            // Rule at src/isa/aarch64/lower.isle line 1371.
                            return v1107;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1111 = constructor_orr_vec(ctx, v48, v49, v763);
                            let v1112 = constructor_output_reg(ctx, v1111);
                            let v1113 = Some(v1112);
                            // Rule at src/isa/aarch64/lower.isle line 1376.
                            return v1113;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1146 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v45.1,
                                            v405,
                                        );
                                        let v1147 = C::output(ctx, v1146);
                                        let v1148 = Some(v1147);
                                        // Rule at src/isa/aarch64/lower.isle line 1410.
                                        return v1148;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1143 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v45.0,
                                            v407,
                                        );
                                        let v1144 = C::output(ctx, v1143);
                                        let v1145 = Some(v1144);
                                        // Rule at src/isa/aarch64/lower.isle line 1409.
                                        return v1145;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66
                                {
                                    if let &Opcode::Bnot = v404 {
                                        let v1140 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v42,
                                            v45.1,
                                            v405,
                                        );
                                        let v1141 = constructor_output_reg(ctx, v1140);
                                        let v1142 = Some(v1141);
                                        // Rule at src/isa/aarch64/lower.isle line 1406.
                                        return v1142;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55
                                {
                                    if let &Opcode::Bnot = v406 {
                                        let v1137 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v42,
                                            v45.0,
                                            v407,
                                        );
                                        let v1138 = constructor_output_reg(ctx, v1137);
                                        let v1139 = Some(v1138);
                                        // Rule at src/isa/aarch64/lower.isle line 1404.
                                        return v1139;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1131 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v45.0, v45.1);
                            let v1132 = C::output(ctx, v1131);
                            let v1133 = Some(v1132);
                            // Rule at src/isa/aarch64/lower.isle line 1395.
                            return v1133;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1128 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v42,
                                v45.0,
                                v45.1,
                            );
                            let v1129 = constructor_output_reg(ctx, v1128);
                            let v1130 = Some(v1129);
                            // Rule at src/isa/aarch64/lower.isle line 1392.
                            return v1130;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1134 = constructor_eor_vec(ctx, v48, v49, v763);
                            let v1135 = constructor_output_reg(ctx, v1134);
                            let v1136 = Some(v1135);
                            // Rule at src/isa/aarch64/lower.isle line 1397.
                            return v1136;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55
                                    {
                                        if let &Opcode::Iconst = v56 {
                                            let v1235 = C::imm_shift_from_imm64(ctx, I32, v57);
                                            if let Some(v1236) = v1235 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1237 = C::negate_imm_shift(ctx, I32, v1236);
                                                let v1238 =
                                                    constructor_a64_rotr_imm(ctx, I32, v48, v1237);
                                                let v1239 = constructor_output_reg(ctx, v1238);
                                                let v1240 = Some(v1239);
                                                // Rule at src/isa/aarch64/lower.isle line 1694.
                                                return v1240;
                                            }
                                        }
                                    }
                                }
                                let v1214 = C::put_in_regs(ctx, v45.1);
                                let v1215 = C::value_regs_get(ctx, v1214, 0x0_usize);
                                let v372 = C::zero_reg(ctx);
                                let v1216 = constructor_sub(ctx, I32, v372, v1215);
                                let v1227 = C::put_in_reg(ctx, v45.0);
                                let v1228 = constructor_a64_rotr(ctx, I32, v1227, v1216);
                                let v1229 = constructor_output_reg(ctx, v1228);
                                let v1230 = Some(v1229);
                                // Rule at src/isa/aarch64/lower.isle line 1682.
                                return v1230;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55
                                    {
                                        if let &Opcode::Iconst = v56 {
                                            let v1241 = C::imm_shift_from_imm64(ctx, I64, v57);
                                            if let Some(v1242) = v1241 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1243 = C::negate_imm_shift(ctx, I64, v1242);
                                                let v1244 =
                                                    constructor_a64_rotr_imm(ctx, I64, v48, v1243);
                                                let v1245 = constructor_output_reg(ctx, v1244);
                                                let v1246 = Some(v1245);
                                                // Rule at src/isa/aarch64/lower.isle line 1699.
                                                return v1246;
                                            }
                                        }
                                    }
                                }
                                let v1214 = C::put_in_regs(ctx, v45.1);
                                let v1215 = C::value_regs_get(ctx, v1214, 0x0_usize);
                                let v372 = C::zero_reg(ctx);
                                let v1231 = constructor_sub(ctx, I64, v372, v1215);
                                let v1227 = C::put_in_reg(ctx, v45.0);
                                let v1232 = constructor_a64_rotr(ctx, I64, v1227, v1231);
                                let v1233 = constructor_output_reg(ctx, v1232);
                                let v1234 = Some(v1233);
                                // Rule at src/isa/aarch64/lower.isle line 1688.
                                return v1234;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1248 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80_u64);
                                let v1249 = constructor_sub(ctx, I64, v1248, v1156);
                                let v1250 = constructor_lower_shl128(ctx, v151, v1156);
                                let v1251 = constructor_lower_ushr128(ctx, v151, v1249);
                                let v1252 = C::value_regs_get(ctx, v1250, 0x0_usize);
                                let v1253 = C::value_regs_get(ctx, v1251, 0x0_usize);
                                let v1254 = constructor_orr(ctx, I64, v1252, v1253);
                                let v1255 = C::value_regs_get(ctx, v1250, 0x1_usize);
                                let v1256 = C::value_regs_get(ctx, v1251, 0x1_usize);
                                let v1257 = constructor_orr(ctx, I64, v1255, v1256);
                                let v1258 = C::value_regs(ctx, v1254, v1257);
                                let v1259 = C::output(ctx, v1258);
                                let v1260 = Some(v1259);
                                // Rule at src/isa/aarch64/lower.isle line 1718.
                                return v1260;
                            }
                            _ => {}
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v1221 = C::imm_shift_from_imm64(ctx, v1213, v57);
                                        if let Some(v1222) = v1221 {
                                            let v1173 = constructor_put_in_reg_zext32(ctx, v45.0);
                                            let v1223 = C::negate_imm_shift(ctx, v1213, v1222);
                                            let v1224 = constructor_small_rotr_imm(
                                                ctx, v1213, v1173, v1223,
                                            );
                                            let v1225 = constructor_output_reg(ctx, v1224);
                                            let v1226 = Some(v1225);
                                            // Rule at src/isa/aarch64/lower.isle line 1669.
                                            return v1226;
                                        }
                                    }
                                }
                            }
                            let v1214 = C::put_in_regs(ctx, v45.1);
                            let v1215 = C::value_regs_get(ctx, v1214, 0x0_usize);
                            let v372 = C::zero_reg(ctx);
                            let v1216 = constructor_sub(ctx, I32, v372, v1215);
                            let v1217 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v1218 = constructor_small_rotr(ctx, v1213, v1217, v1216);
                            let v1219 = constructor_output_reg(ctx, v1218);
                            let v1220 = Some(v1219);
                            // Rule at src/isa/aarch64/lower.isle line 1663.
                            return v1220;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55
                                    {
                                        if let &Opcode::Iconst = v56 {
                                            let v1235 = C::imm_shift_from_imm64(ctx, I32, v57);
                                            if let Some(v1236) = v1235 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1273 =
                                                    constructor_a64_rotr_imm(ctx, I32, v48, v1236);
                                                let v1274 = constructor_output_reg(ctx, v1273);
                                                let v1275 = Some(v1274);
                                                // Rule at src/isa/aarch64/lower.isle line 1748.
                                                return v1275;
                                            }
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1264 = constructor_a64_rotr(ctx, I32, v48, v1156);
                                let v1265 = constructor_output_reg(ctx, v1264);
                                let v1266 = Some(v1265);
                                // Rule at src/isa/aarch64/lower.isle line 1735.
                                return v1266;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55
                                    {
                                        if let &Opcode::Iconst = v56 {
                                            let v1241 = C::imm_shift_from_imm64(ctx, I64, v57);
                                            if let Some(v1242) = v1241 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1276 =
                                                    constructor_a64_rotr_imm(ctx, I64, v48, v1242);
                                                let v1277 = constructor_output_reg(ctx, v1276);
                                                let v1278 = Some(v1277);
                                                // Rule at src/isa/aarch64/lower.isle line 1753.
                                                return v1278;
                                            }
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1267 = constructor_a64_rotr(ctx, I64, v48, v1156);
                                let v1268 = constructor_output_reg(ctx, v1267);
                                let v1269 = Some(v1268);
                                // Rule at src/isa/aarch64/lower.isle line 1739.
                                return v1269;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1248 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80_u64);
                                let v1249 = constructor_sub(ctx, I64, v1248, v1156);
                                let v1279 = constructor_lower_ushr128(ctx, v151, v1156);
                                let v1280 = constructor_lower_shl128(ctx, v151, v1249);
                                let v1281 = C::value_regs_get(ctx, v1279, 0x1_usize);
                                let v1282 = C::value_regs_get(ctx, v1280, 0x1_usize);
                                let v1283 = constructor_orr(ctx, I64, v1281, v1282);
                                let v1284 = C::value_regs_get(ctx, v1279, 0x0_usize);
                                let v1285 = C::value_regs_get(ctx, v1280, 0x0_usize);
                                let v1286 = constructor_orr(ctx, I64, v1284, v1285);
                                let v1287 = C::value_regs(ctx, v1286, v1283);
                                let v1288 = C::output(ctx, v1287);
                                let v1289 = Some(v1288);
                                // Rule at src/isa/aarch64/lower.isle line 1834.
                                return v1289;
                            }
                            _ => {}
                        }
                        let v1212 = C::fits_in_16(ctx, v3);
                        if let Some(v1213) = v1212 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v1221 = C::imm_shift_from_imm64(ctx, v1213, v57);
                                        if let Some(v1222) = v1221 {
                                            let v1173 = constructor_put_in_reg_zext32(ctx, v45.0);
                                            let v1270 = constructor_small_rotr_imm(
                                                ctx, v1213, v1173, v1222,
                                            );
                                            let v1271 = constructor_output_reg(ctx, v1270);
                                            let v1272 = Some(v1271);
                                            // Rule at src/isa/aarch64/lower.isle line 1743.
                                            return v1272;
                                        }
                                    }
                                }
                            }
                            let v1173 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v757 = C::put_in_regs(ctx, v45.1);
                            let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                            let v1261 = constructor_small_rotr(ctx, v1213, v1173, v1156);
                            let v1262 = constructor_output_reg(ctx, v1261);
                            let v1263 = Some(v1262);
                            // Rule at src/isa/aarch64/lower.isle line 1731.
                            return v1263;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1153 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v48, v45.1);
                                let v1154 = constructor_output_reg(ctx, v1153);
                                let v1155 = Some(v1154);
                                // Rule at src/isa/aarch64/lower.isle line 1419.
                                return v1155;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1157 = constructor_lower_shl128(ctx, v151, v1156);
                                let v1158 = C::output(ctx, v1157);
                                let v1159 = Some(v1158);
                                // Rule at src/isa/aarch64/lower.isle line 1423.
                                return v1159;
                            }
                            _ => {}
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1150 = constructor_do_shift(ctx, &ALUOp::Lsl, v432, v48, v45.1);
                            let v1151 = constructor_output_reg(ctx, v1150);
                            let v1152 = Some(v1151);
                            // Rule at src/isa/aarch64/lower.isle line 1415.
                            return v1152;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1168 = C::shift_masked_imm(ctx, v762, v58);
                                        let v1169 = constructor_ushl_vec_imm(ctx, v48, v1168, v786);
                                        let v1170 = constructor_output_reg(ctx, v1169);
                                        let v1171 = Some(v1170);
                                        // Rule at src/isa/aarch64/lower.isle line 1458.
                                        return v1171;
                                    }
                                }
                            }
                            let v1160 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1162 = C::shift_mask(ctx, v762);
                            let v1163 = constructor_and_imm(ctx, I32, v49, v1162);
                            let v1164 = constructor_vec_dup(ctx, v1163, v1160);
                            let v453 = C::put_in_reg(ctx, v45.0);
                            let v1165 = constructor_sshl(ctx, v453, v1164, v1160);
                            let v1166 = constructor_output_reg(ctx, v1165);
                            let v1167 = Some(v1166);
                            // Rule at src/isa/aarch64/lower.isle line 1453.
                            return v1167;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                                let v1177 =
                                    constructor_do_shift(ctx, &ALUOp::Lsr, I64, v882, v45.1);
                                let v1178 = constructor_output_reg(ctx, v1177);
                                let v1179 = Some(v1178);
                                // Rule at src/isa/aarch64/lower.isle line 1550.
                                return v1179;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1180 = constructor_lower_ushr128(ctx, v151, v1156);
                                let v1181 = C::output(ctx, v1180);
                                let v1182 = Some(v1181);
                                // Rule at src/isa/aarch64/lower.isle line 1554.
                                return v1182;
                            }
                            _ => {}
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1173 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v1174 = constructor_do_shift(ctx, &ALUOp::Lsr, v432, v1173, v45.1);
                            let v1175 = constructor_output_reg(ctx, v1174);
                            let v1176 = Some(v1175);
                            // Rule at src/isa/aarch64/lower.isle line 1546.
                            return v1176;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1168 = C::shift_masked_imm(ctx, v762, v58);
                                        if v1168 == 0x0_u8 {
                                            let v1193 = constructor_output_value(ctx, v45.0);
                                            let v1194 = Some(v1193);
                                            // Rule at src/isa/aarch64/lower.isle line 1569.
                                            return v1194;
                                        }
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v1190 = constructor_ushr_vec_imm(ctx, v48, v1168, v786);
                                        let v1191 = constructor_output_reg(ctx, v1190);
                                        let v1192 = Some(v1191);
                                        // Rule at src/isa/aarch64/lower.isle line 1567.
                                        return v1192;
                                    }
                                }
                            }
                            let v1160 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1162 = C::shift_mask(ctx, v762);
                            let v1163 = constructor_and_imm(ctx, I32, v49, v1162);
                            let v1183 = C::zero_reg(ctx);
                            let v1184 = constructor_sub(ctx, I64, v1183, v1163);
                            let v1185 = constructor_vec_dup(ctx, v1184, v1160);
                            let v1186 = C::put_in_reg(ctx, v45.0);
                            let v1187 = constructor_ushl(ctx, v1186, v1185, v1160);
                            let v1188 = constructor_output_reg(ctx, v1187);
                            let v1189 = Some(v1188);
                            // Rule at src/isa/aarch64/lower.isle line 1562.
                            return v1189;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                                let v1200 =
                                    constructor_do_shift(ctx, &ALUOp::Asr, I64, v871, v45.1);
                                let v1201 = constructor_output_reg(ctx, v1200);
                                let v1202 = Some(v1201);
                                // Rule at src/isa/aarch64/lower.isle line 1607.
                                return v1202;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1156 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1203 = constructor_lower_sshr128(ctx, v151, v1156);
                                let v1204 = C::output(ctx, v1203);
                                let v1205 = Some(v1204);
                                // Rule at src/isa/aarch64/lower.isle line 1611.
                                return v1205;
                            }
                            _ => {}
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55
                                {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1168 = C::shift_masked_imm(ctx, v762, v58);
                                        if v1168 == 0x0_u8 {
                                            let v1193 = constructor_output_value(ctx, v45.0);
                                            let v1194 = Some(v1193);
                                            // Rule at src/isa/aarch64/lower.isle line 1627.
                                            return v1194;
                                        }
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v1209 = constructor_sshr_vec_imm(ctx, v48, v1168, v786);
                                        let v1210 = constructor_output_reg(ctx, v1209);
                                        let v1211 = Some(v1210);
                                        // Rule at src/isa/aarch64/lower.isle line 1625.
                                        return v1211;
                                    }
                                }
                            }
                            let v1160 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1162 = C::shift_mask(ctx, v762);
                            let v1163 = constructor_and_imm(ctx, I32, v49, v1162);
                            let v1183 = C::zero_reg(ctx);
                            let v1184 = constructor_sub(ctx, I64, v1183, v1163);
                            let v1185 = constructor_vec_dup(ctx, v1184, v1160);
                            let v1186 = C::put_in_reg(ctx, v45.0);
                            let v1206 = constructor_sshl(ctx, v1186, v1185, v1160);
                            let v1207 = constructor_output_reg(ctx, v1206);
                            let v1208 = Some(v1207);
                            // Rule at src/isa/aarch64/lower.isle line 1620.
                            return v1208;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1196 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v1197 = constructor_do_shift(ctx, &ALUOp::Asr, v432, v1196, v45.1);
                            let v1198 = constructor_output_reg(ctx, v1197);
                            let v1199 = Some(v1198);
                            // Rule at src/isa/aarch64/lower.isle line 1603.
                            return v1199;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v481 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v48, v49, v480);
                            let v482 = constructor_output_reg(ctx, v481);
                            let v483 = Some(v482);
                            // Rule at src/isa/aarch64/lower.isle line 414.
                            return v483;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v474 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v48, v49, v147);
                            let v475 = constructor_output_reg(ctx, v474);
                            let v476 = Some(v475);
                            // Rule at src/isa/aarch64/lower.isle line 411.
                            return v476;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v474 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v48, v49, v147);
                            let v2336 = C::value_reg(ctx, v474);
                            let v2337 = C::output(ctx, v2336);
                            let v2338 = Some(v2337);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 14.
                            return v2338;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v489 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v48, v49, v480);
                            let v490 = constructor_output_reg(ctx, v489);
                            let v491 = Some(v490);
                            // Rule at src/isa/aarch64/lower.isle line 422.
                            return v491;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v485 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v48, v49, v147);
                            let v486 = constructor_output_reg(ctx, v485);
                            let v487 = Some(v486);
                            // Rule at src/isa/aarch64/lower.isle line 419.
                            return v487;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v485 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v48, v49, v147);
                            let v2339 = C::value_reg(ctx, v485);
                            let v2340 = C::output(ctx, v2339);
                            let v2341 = Some(v2340);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 18.
                            return v2341;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v497 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v48, v49, v480);
                            let v498 = constructor_output_reg(ctx, v497);
                            let v499 = Some(v498);
                            // Rule at src/isa/aarch64/lower.isle line 430.
                            return v499;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v493 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v48, v49, v147);
                            let v494 = constructor_output_reg(ctx, v493);
                            let v495 = Some(v494);
                            // Rule at src/isa/aarch64/lower.isle line 427.
                            return v495;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v493 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v48, v49, v147);
                            let v2342 = C::value_reg(ctx, v493);
                            let v2343 = C::output(ctx, v2342);
                            let v2344 = Some(v2343);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 22.
                            return v2344;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v505 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v48, v49, v480);
                            let v506 = constructor_output_reg(ctx, v505);
                            let v507 = Some(v506);
                            // Rule at src/isa/aarch64/lower.isle line 438.
                            return v507;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v501 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v48, v49, v147);
                            let v502 = constructor_output_reg(ctx, v501);
                            let v503 = Some(v502);
                            // Rule at src/isa/aarch64/lower.isle line 435.
                            return v503;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v501 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v48, v49, v147);
                            let v2345 = C::value_reg(ctx, v501);
                            let v2346 = C::output(ctx, v2345);
                            let v2347 = Some(v2346);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 26.
                            return v2347;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v3 = C::value_type(ctx, v2);
                        let v628 = constructor_fcopy_sign(ctx, v48, v49, v3);
                        let v629 = constructor_output_reg(ctx, v628);
                        let v630 = Some(v629);
                        // Rule at src/isa/aarch64/lower.isle line 622.
                        return v630;
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v513 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v48, v49, v480);
                            let v514 = constructor_output_reg(ctx, v513);
                            let v515 = Some(v514);
                            // Rule at src/isa/aarch64/lower.isle line 446.
                            return v515;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v509 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v48, v49, v147);
                            let v510 = constructor_output_reg(ctx, v509);
                            let v511 = Some(v510);
                            // Rule at src/isa/aarch64/lower.isle line 443.
                            return v511;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v509 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v48, v49, v147);
                            let v2348 = C::value_reg(ctx, v509);
                            let v2349 = C::output(ctx, v2348);
                            let v2350 = Some(v2349);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 30.
                            return v2350;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v521 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v48, v49, v480);
                            let v522 = constructor_output_reg(ctx, v521);
                            let v523 = Some(v522);
                            // Rule at src/isa/aarch64/lower.isle line 454.
                            return v523;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v517 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v48, v49, v147);
                            let v518 = constructor_output_reg(ctx, v517);
                            let v519 = Some(v518);
                            // Rule at src/isa/aarch64/lower.isle line 451.
                            return v519;
                        }
                        let v2317 = C::dynamic_lane(ctx, v3);
                        if let Some(v2318) = v2317 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v517 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v48, v49, v147);
                            let v2351 = C::value_reg(ctx, v517);
                            let v2352 = C::output(ctx, v2351);
                            let v2353 = Some(v2352);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 34.
                            return v2353;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1809 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1810) = v1809 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v1812 = &constructor_lane_size(ctx, v1810);
                            let v1813 = constructor_sqxtn(ctx, v1811, v1812);
                            let v1814 = constructor_output_reg(ctx, v1813);
                            let v1815 = Some(v1814);
                            // Rule at src/isa/aarch64/lower.isle line 2346.
                            return v1815;
                        }
                        let v1801 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1802) = v1801 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1805 = &constructor_lane_size(ctx, v1802);
                                let v1806 = constructor_sqxtn(ctx, v48, v1805);
                                let v1807 = constructor_output_reg(ctx, v1806);
                                let v1808 = Some(v1807);
                                // Rule at src/isa/aarch64/lower.isle line 2342.
                                return v1808;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1805 = &constructor_lane_size(ctx, v1802);
                            let v1806 = constructor_sqxtn(ctx, v48, v1805);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v1817 = &constructor_lane_size(ctx, v1802);
                            let v1818 = constructor_sqxtn2(ctx, v1806, v1816, v1817);
                            let v1819 = constructor_output_reg(ctx, v1818);
                            let v1820 = Some(v1819);
                            // Rule at src/isa/aarch64/lower.isle line 2350.
                            return v1820;
                        }
                        let v2360 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2361) = v2360 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v2362 = &constructor_lane_size(ctx, v2361);
                            let v2363 = constructor_sqxtn(ctx, v1811, v2362);
                            let v2364 = constructor_output_reg(ctx, v2363);
                            let v2365 = Some(v2364);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 42.
                            return v2365;
                        }
                        let v2354 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2355) = v2354 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2356 = &constructor_lane_size(ctx, v2355);
                                let v2357 = constructor_sqxtn(ctx, v48, v2356);
                                let v2358 = constructor_output_reg(ctx, v2357);
                                let v2359 = Some(v2358);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 38.
                                return v2359;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2356 = &constructor_lane_size(ctx, v2355);
                            let v2357 = constructor_sqxtn(ctx, v48, v2356);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v2366 = &constructor_lane_size(ctx, v2355);
                            let v2367 = constructor_sqxtn2(ctx, v2357, v1816, v2366);
                            let v2368 = constructor_output_reg(ctx, v2367);
                            let v2369 = Some(v2368);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 46.
                            return v2369;
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1809 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1810) = v1809 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v1812 = &constructor_lane_size(ctx, v1810);
                            let v1824 = constructor_sqxtun(ctx, v1811, v1812);
                            let v1825 = constructor_output_reg(ctx, v1824);
                            let v1826 = Some(v1825);
                            // Rule at src/isa/aarch64/lower.isle line 2361.
                            return v1826;
                        }
                        let v1801 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1802) = v1801 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1805 = &constructor_lane_size(ctx, v1802);
                                let v1821 = constructor_sqxtun(ctx, v48, v1805);
                                let v1822 = constructor_output_reg(ctx, v1821);
                                let v1823 = Some(v1822);
                                // Rule at src/isa/aarch64/lower.isle line 2357.
                                return v1823;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1805 = &constructor_lane_size(ctx, v1802);
                            let v1821 = constructor_sqxtun(ctx, v48, v1805);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v1817 = &constructor_lane_size(ctx, v1802);
                            let v1827 = constructor_sqxtun2(ctx, v1821, v1816, v1817);
                            let v1828 = constructor_output_reg(ctx, v1827);
                            let v1829 = Some(v1828);
                            // Rule at src/isa/aarch64/lower.isle line 2365.
                            return v1829;
                        }
                        let v2360 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2361) = v2360 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v2362 = &constructor_lane_size(ctx, v2361);
                            let v2373 = constructor_sqxtun(ctx, v1811, v2362);
                            let v2374 = constructor_output_reg(ctx, v2373);
                            let v2375 = Some(v2374);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 56.
                            return v2375;
                        }
                        let v2354 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2355) = v2354 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2356 = &constructor_lane_size(ctx, v2355);
                                let v2370 = constructor_sqxtun(ctx, v48, v2356);
                                let v2371 = constructor_output_reg(ctx, v2370);
                                let v2372 = Some(v2371);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 52.
                                return v2372;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2356 = &constructor_lane_size(ctx, v2355);
                            let v2370 = constructor_sqxtun(ctx, v48, v2356);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v2366 = &constructor_lane_size(ctx, v2355);
                            let v2376 = constructor_sqxtun2(ctx, v2370, v1816, v2366);
                            let v2377 = constructor_output_reg(ctx, v2376);
                            let v2378 = Some(v2377);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 60.
                            return v2378;
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1809 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1810) = v1809 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v1812 = &constructor_lane_size(ctx, v1810);
                            let v1833 = constructor_uqxtn(ctx, v1811, v1812);
                            let v1834 = constructor_output_reg(ctx, v1833);
                            let v1835 = Some(v1834);
                            // Rule at src/isa/aarch64/lower.isle line 2377.
                            return v1835;
                        }
                        let v1801 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1802) = v1801 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1805 = &constructor_lane_size(ctx, v1802);
                                let v1830 = constructor_uqxtn(ctx, v48, v1805);
                                let v1831 = constructor_output_reg(ctx, v1830);
                                let v1832 = Some(v1831);
                                // Rule at src/isa/aarch64/lower.isle line 2373.
                                return v1832;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1805 = &constructor_lane_size(ctx, v1802);
                            let v1830 = constructor_uqxtn(ctx, v48, v1805);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v1817 = &constructor_lane_size(ctx, v1802);
                            let v1836 = constructor_uqxtn2(ctx, v1830, v1816, v1817);
                            let v1837 = constructor_output_reg(ctx, v1836);
                            let v1838 = Some(v1837);
                            // Rule at src/isa/aarch64/lower.isle line 2381.
                            return v1838;
                        }
                        let v2360 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2361) = v2360 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1811 = constructor_mov_vec_elem(
                                ctx,
                                v48,
                                v49,
                                0x1_u8,
                                0x0_u8,
                                &VectorSize::Size64x2,
                            );
                            let v2362 = &constructor_lane_size(ctx, v2361);
                            let v2382 = constructor_uqxtn(ctx, v1811, v2362);
                            let v2383 = constructor_output_reg(ctx, v2382);
                            let v2384 = Some(v2383);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 70.
                            return v2384;
                        }
                        let v2354 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2355) = v2354 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1803 = C::zero_value(ctx, v45.1);
                            if let Some(v1804) = v1803 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2356 = &constructor_lane_size(ctx, v2355);
                                let v2379 = constructor_uqxtn(ctx, v48, v2356);
                                let v2380 = constructor_output_reg(ctx, v2379);
                                let v2381 = Some(v2380);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 66.
                                return v2381;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2356 = &constructor_lane_size(ctx, v2355);
                            let v2379 = constructor_uqxtn(ctx, v48, v2356);
                            let v1816 = C::put_in_reg(ctx, v45.1);
                            let v2366 = &constructor_lane_size(ctx, v2355);
                            let v2385 = constructor_uqxtn2(ctx, v2379, v1816, v2366);
                            let v2386 = constructor_output_reg(ctx, v2385);
                            let v2387 = Some(v2386);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 74.
                            return v2387;
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v409 =
                                                                    constructor_saddlp8(ctx, v408);
                                                                let v410 = constructor_output_reg(
                                                                    ctx, v409,
                                                                );
                                                                let v411 = Some(v410);
                                                                // Rule at src/isa/aarch64/lower.isle line 343.
                                                                return v411;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v415 =
                                                                    constructor_uaddlp8(ctx, v408);
                                                                let v416 = constructor_output_reg(
                                                                    ctx, v415,
                                                                );
                                                                let v417 = Some(v416);
                                                                // Rule at src/isa/aarch64/lower.isle line 351.
                                                                return v417;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55
                                    {
                                        match v406 {
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v412 =
                                                                    constructor_saddlp16(ctx, v408);
                                                                let v413 = constructor_output_reg(
                                                                    ctx, v412,
                                                                );
                                                                let v414 = Some(v413);
                                                                // Rule at src/isa/aarch64/lower.isle line 347.
                                                                return v414;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66
                                                    {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v418 =
                                                                    constructor_uaddlp16(ctx, v408);
                                                                let v419 = constructor_output_reg(
                                                                    ctx, v418,
                                                                );
                                                                let v420 = Some(v419);
                                                                // Rule at src/isa/aarch64/lower.isle line 355.
                                                                return v420;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v147 = &constructor_vector_size(ctx, v3);
                        let v421 = constructor_addp(ctx, v48, v49, v147);
                        let v422 = constructor_output_reg(ctx, v421);
                        let v423 = Some(v422);
                        // Rule at src/isa/aarch64/lower.isle line 358.
                        return v423;
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v336 = C::value_regs(ctx, v48, v49);
                            let v337 = C::output(ctx, v336);
                            let v338 = Some(v337);
                            // Rule at src/isa/aarch64/lower.isle line 276.
                            return v338;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2116,
            arg: v2117,
            imm: v2118,
        } => {
            match v2116 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v2119 = C::u8_from_uimm8(ctx, v2118);
                            if v2119 == 0x0_u8 {
                                let v2120 = constructor_output_value(ctx, v2117);
                                let v2121 = Some(v2120);
                                // Rule at src/isa/aarch64/lower.isle line 2687.
                                return v2121;
                            }
                            let v2122 = C::put_in_reg(ctx, v2117);
                            let v2127 = C::value_type(ctx, v2117);
                            let v2128 = &constructor_vector_size(ctx, v2127);
                            let v2129 = constructor_fpu_move_from_vec(ctx, v2122, v2119, v2128);
                            let v2130 = constructor_output_reg(ctx, v2129);
                            let v2131 = Some(v2130);
                            // Rule at src/isa/aarch64/lower.isle line 2695.
                            return v2131;
                        }
                        let v913 = C::ty_int(ctx, v3);
                        if let Some(v914) = v913 {
                            let v2122 = C::put_in_reg(ctx, v2117);
                            let v2123 = &constructor_scalar_size(ctx, v914);
                            let v2119 = C::u8_from_uimm8(ctx, v2118);
                            let v2124 = constructor_mov_from_vec(ctx, v2122, v2119, v2123);
                            let v2125 = constructor_output_reg(ctx, v2124);
                            let v2126 = Some(v2125);
                            // Rule at src/isa/aarch64/lower.isle line 2690.
                            return v2126;
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v2118 == 0x0 {
                        let v2122 = C::put_in_reg(ctx, v2117);
                        let v2397 = C::value_reg(ctx, v2122);
                        let v2398 = C::output(ctx, v2397);
                        let v2399 = Some(v2398);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 86.
                        return v2399;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1901,
            args: v1902,
            func_ref: v1903,
        } => {
            match v1901 {
                &Opcode::Call => {
                    let v1905 = C::func_ref_data(ctx, v1903);
                    let v1904 = C::value_list_slice(ctx, v1902);
                    let v1909 = C::gen_call(ctx, v1905.0, v1905.1, v1905.2, v1904);
                    let v1910 = Some(v1909);
                    // Rule at src/isa/aarch64/lower.isle line 2449.
                    return v1910;
                }
                &Opcode::ReturnCall => {
                    let v1905 = C::func_ref_data(ctx, v1903);
                    let v1904 = C::value_list_slice(ctx, v1902);
                    let v1926 = C::gen_return_call(ctx, v1905.0, v1905.1, v1905.2, v1904);
                    let v1927 = Some(v1926);
                    // Rule at src/isa/aarch64/lower.isle line 2463.
                    return v1927;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1911,
            args: v1912,
            sig_ref: v1913,
        } => {
            match v1911 {
                &Opcode::CallIndirect => {
                    let v1914 = C::value_list_slice(ctx, v1912);
                    let v1915 = C::value_slice_unwrap(ctx, v1914);
                    if let Some(v1916) = v1915 {
                        let v1919 = C::gen_call_indirect(ctx, v1913, v1916.0, v1916.1);
                        let v1920 = Some(v1919);
                        // Rule at src/isa/aarch64/lower.isle line 2452.
                        return v1920;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1914 = C::value_list_slice(ctx, v1912);
                    let v1915 = C::value_slice_unwrap(ctx, v1914);
                    if let Some(v1916) = v1915 {
                        let v1928 = C::gen_return_call_indirect(ctx, v1913, v1916.0, v1916.1);
                        let v1929 = Some(v1928);
                        // Rule at src/isa/aarch64/lower.isle line 2466.
                        return v1929;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1537,
            arg: v1538,
            code: ref v1539,
        } => {
            match v1537 {
                &Opcode::Trapz => {
                    let v1541 = constructor_trap_if_val(ctx, &ZeroCond::Zero, v1538, v1539);
                    let v1542 = Some(v1541);
                    // Rule at src/isa/aarch64/lower.isle line 2116.
                    return v1542;
                }
                &Opcode::Trapnz => {
                    let v1544 = constructor_trap_if_val(ctx, &ZeroCond::NonZero, v1538, v1539);
                    let v1545 = Some(v1544);
                    // Rule at src/isa/aarch64/lower.isle line 2121.
                    return v1545;
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v2388,
            dynamic_stack_slot: v2389,
        } => {
            if let &Opcode::DynamicStackAddr = v2388 {
                let v2390 = C::temp_writable_reg(ctx, I64);
                let v2391 = &C::abi_dynamic_stackslot_addr(ctx, v2390, v2389);
                let v2392 = C::emit(ctx, v2391);
                let v2393 = C::writable_reg_to_reg(ctx, v2390);
                let v2394 = C::value_reg(ctx, v2393);
                let v2395 = C::output(ctx, v2394);
                let v2396 = Some(v2395);
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 80.
                return v2396;
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1440,
            args: ref v1441,
            cond: ref v1442,
        } => {
            if let &Opcode::Fcmp = v1440 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v143 = C::multi_lane(ctx, v3);
                    if let Some(v144) = v143 {
                        let v1443 = C::unpack_value_array_2(ctx, v1441);
                        let v1448 = C::zero_value(ctx, v1443.1);
                        if let Some(v1449) = v1448 {
                            let v1446 = &C::fcmp_zero_cond_not_eq(ctx, v1442);
                            if let Some(v1447) = v1446 {
                                let v1450 = C::put_in_reg(ctx, v1443.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1451 = constructor_fcmeq0(ctx, v1450, v424);
                                let v1452 = constructor_not(ctx, v1451, v424);
                                let v1453 = C::value_reg(ctx, v1452);
                                let v1454 = C::output(ctx, v1453);
                                let v1455 = Some(v1454);
                                // Rule at src/isa/aarch64/lower.isle line 2047.
                                return v1455;
                            }
                            let v1456 = &C::fcmp_zero_cond(ctx, v1442);
                            if let Some(v1457) = v1456 {
                                let v1450 = C::put_in_reg(ctx, v1443.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1458 = constructor_float_cmp_zero(ctx, v1457, v1450, v424);
                                let v1459 = C::value_reg(ctx, v1458);
                                let v1460 = C::output(ctx, v1459);
                                let v1461 = Some(v1460);
                                // Rule at src/isa/aarch64/lower.isle line 2053.
                                return v1461;
                            }
                        }
                        let v1462 = C::zero_value(ctx, v1443.0);
                        if let Some(v1463) = v1462 {
                            let v1446 = &C::fcmp_zero_cond_not_eq(ctx, v1442);
                            if let Some(v1447) = v1446 {
                                let v1464 = C::put_in_reg(ctx, v1443.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1465 = constructor_fcmeq0(ctx, v1464, v424);
                                let v1466 = constructor_not(ctx, v1465, v424);
                                let v1467 = C::value_reg(ctx, v1466);
                                let v1468 = C::output(ctx, v1467);
                                let v1469 = Some(v1468);
                                // Rule at src/isa/aarch64/lower.isle line 2059.
                                return v1469;
                            }
                            let v1456 = &C::fcmp_zero_cond(ctx, v1442);
                            if let Some(v1457) = v1456 {
                                let v1464 = C::put_in_reg(ctx, v1443.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1470 =
                                    constructor_float_cmp_zero_swap(ctx, v1457, v1464, v424);
                                let v1471 = C::value_reg(ctx, v1470);
                                let v1472 = C::output(ctx, v1471);
                                let v1473 = Some(v1472);
                                // Rule at src/isa/aarch64/lower.isle line 2065.
                                return v1473;
                            }
                        }
                    }
                    let v1443 = C::unpack_value_array_2(ctx, v1441);
                    let v1474 = C::value_type(ctx, v1443.0);
                    let v1475 = C::ty_scalar_float(ctx, v1474);
                    if let Some(v1476) = v1475 {
                        let v1477 = &constructor_scalar_size(ctx, v1476);
                        let v1478 = C::put_in_reg(ctx, v1443.0);
                        let v1479 = C::put_in_reg(ctx, v1443.1);
                        let v1480 = &constructor_fpu_cmp(ctx, v1477, v1478, v1479);
                        let v1481 = &C::fp_cond_code(ctx, v1442);
                        let v1482 = &constructor_materialize_bool_result(ctx, v1481);
                        let v1483 = constructor_with_flags(ctx, v1480, v1482);
                        let v1484 = C::output(ctx, v1483);
                        let v1485 = Some(v1484);
                        // Rule at src/isa/aarch64/lower.isle line 2071.
                        return v1485;
                    }
                    let v1486 = C::ty_vector_float(ctx, v1474);
                    if let Some(v1487) = v1486 {
                        let v1450 = C::put_in_reg(ctx, v1443.0);
                        let v1488 = C::put_in_reg(ctx, v1443.1);
                        let v1489 = &C::fp_cond_code(ctx, v1442);
                        let v1490 = constructor_vec_cmp(ctx, v1450, v1488, v1474, v1489);
                        let v1491 = constructor_output_reg(ctx, v1490);
                        let v1492 = Some(v1491);
                        // Rule at src/isa/aarch64/lower.isle line 2076.
                        return v1492;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1870,
            func_ref: v1871,
        } => {
            if let &Opcode::FuncAddr = v1870 {
                let v1872 = C::func_ref_data(ctx, v1871);
                let v1876 = C::box_external_name(ctx, v1872.1);
                let v1878 = constructor_load_ext_name(ctx, v1876, 0_i64);
                let v1879 = constructor_output_reg(ctx, v1878);
                let v1880 = Some(v1879);
                // Rule at src/isa/aarch64/lower.isle line 2428.
                return v1880;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2200,
            args: ref v2201,
            code: ref v2202,
        } => {
            if let &Opcode::UaddOverflowTrap = v2200 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v41 = C::fits_in_64(ctx, v3);
                    if let Some(v42) = v41 {
                        let v2203 = C::unpack_value_array_2(ctx, v2201);
                        let v2206 = C::put_in_reg(ctx, v2203.0);
                        let v2207 = C::put_in_reg(ctx, v2203.1);
                        let v2208 = &constructor_add_with_flags_paired(ctx, v42, v2206, v2207);
                        let v2209 = constructor_trap_if_overflow(ctx, v2208, v2202);
                        let v2210 = constructor_output_reg(ctx, v2209);
                        let v2211 = Some(v2210);
                        // Rule at src/isa/aarch64/lower.isle line 2792.
                        return v2211;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1493,
            args: ref v1494,
            cond: ref v1495,
        } => {
            if let &Opcode::Icmp = v1493 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v143 = C::multi_lane(ctx, v3);
                    if let Some(v144) = v143 {
                        let v1496 = C::unpack_value_array_2(ctx, v1494);
                        let v1501 = C::zero_value(ctx, v1496.1);
                        if let Some(v1502) = v1501 {
                            let v1499 = &C::icmp_zero_cond_not_eq(ctx, v1495);
                            if let Some(v1500) = v1499 {
                                let v1503 = C::put_in_reg(ctx, v1496.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1504 = constructor_cmeq0(ctx, v1503, v424);
                                let v1505 = constructor_not(ctx, v1504, v424);
                                let v1506 = C::value_reg(ctx, v1505);
                                let v1507 = C::output(ctx, v1506);
                                let v1508 = Some(v1507);
                                // Rule at src/isa/aarch64/lower.isle line 2082.
                                return v1508;
                            }
                            let v1509 = &C::icmp_zero_cond(ctx, v1495);
                            if let Some(v1510) = v1509 {
                                let v1503 = C::put_in_reg(ctx, v1496.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1511 = constructor_int_cmp_zero(ctx, v1510, v1503, v424);
                                let v1512 = C::value_reg(ctx, v1511);
                                let v1513 = C::output(ctx, v1512);
                                let v1514 = Some(v1513);
                                // Rule at src/isa/aarch64/lower.isle line 2088.
                                return v1514;
                            }
                        }
                        let v1515 = C::zero_value(ctx, v1496.0);
                        if let Some(v1516) = v1515 {
                            let v1499 = &C::icmp_zero_cond_not_eq(ctx, v1495);
                            if let Some(v1500) = v1499 {
                                let v1517 = C::put_in_reg(ctx, v1496.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1518 = constructor_cmeq0(ctx, v1517, v424);
                                let v1519 = constructor_not(ctx, v1518, v424);
                                let v1520 = C::value_reg(ctx, v1519);
                                let v1521 = C::output(ctx, v1520);
                                let v1522 = Some(v1521);
                                // Rule at src/isa/aarch64/lower.isle line 2094.
                                return v1522;
                            }
                            let v1509 = &C::icmp_zero_cond(ctx, v1495);
                            if let Some(v1510) = v1509 {
                                let v1517 = C::put_in_reg(ctx, v1496.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1523 = constructor_int_cmp_zero_swap(ctx, v1510, v1517, v424);
                                let v1524 = C::value_reg(ctx, v1523);
                                let v1525 = C::output(ctx, v1524);
                                let v1526 = Some(v1525);
                                // Rule at src/isa/aarch64/lower.isle line 2100.
                                return v1526;
                            }
                        }
                    }
                }
                let v1496 = C::unpack_value_array_2(ctx, v1494);
                let v1527 = C::value_type(ctx, v1496.0);
                let v1529 =
                    constructor_lower_icmp_into_reg(ctx, v1495, v1496.0, v1496.1, v1527, I8);
                let v1530 = C::output(ctx, v1529);
                let v1531 = Some(v1530);
                // Rule at src/isa/aarch64/lower.isle line 2106.
                return v1531;
            }
        }
        &InstructionData::Load {
            opcode: ref v1930,
            arg: v1931,
            flags: v1932,
            offset: v1933,
        } => {
            match v1930 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1935 = &constructor_amode(ctx, I8, v1931, v1934);
                                let v1936 = constructor_aarch64_uload8(ctx, v1935, v1932);
                                let v1937 = constructor_output_reg(ctx, v1936);
                                let v1938 = Some(v1937);
                                // Rule at src/isa/aarch64/lower.isle line 2471.
                                return v1938;
                            }
                            I16 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1939 = &constructor_amode(ctx, I16, v1931, v1934);
                                let v1940 = constructor_aarch64_uload16(ctx, v1939, v1932);
                                let v1941 = constructor_output_reg(ctx, v1940);
                                let v1942 = Some(v1941);
                                // Rule at src/isa/aarch64/lower.isle line 2474.
                                return v1942;
                            }
                            I32 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1943 = &constructor_amode(ctx, I32, v1931, v1934);
                                let v1944 = constructor_aarch64_uload32(ctx, v1943, v1932);
                                let v1945 = constructor_output_reg(ctx, v1944);
                                let v1946 = Some(v1945);
                                // Rule at src/isa/aarch64/lower.isle line 2477.
                                return v1946;
                            }
                            I64 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1947 = &constructor_amode(ctx, I64, v1931, v1934);
                                let v1948 = constructor_aarch64_uload64(ctx, v1947, v1932);
                                let v1949 = constructor_output_reg(ctx, v1948);
                                let v1950 = Some(v1949);
                                // Rule at src/isa/aarch64/lower.isle line 2480.
                                return v1950;
                            }
                            I128 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1969 = &constructor_pair_amode(ctx, v1931, v1934);
                                let v1970 = constructor_aarch64_loadp64(ctx, v1969, v1932);
                                let v1971 = C::output(ctx, v1970);
                                let v1972 = Some(v1971);
                                // Rule at src/isa/aarch64/lower.isle line 2495.
                                return v1972;
                            }
                            F16 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1952 = &constructor_amode(ctx, F16, v1931, v1934);
                                let v1953 = constructor_aarch64_fpuload16(ctx, v1952, v1932);
                                let v1954 = constructor_output_reg(ctx, v1953);
                                let v1955 = Some(v1954);
                                // Rule at src/isa/aarch64/lower.isle line 2483.
                                return v1955;
                            }
                            F32 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1956 = &constructor_amode(ctx, F32, v1931, v1934);
                                let v1957 = constructor_aarch64_fpuload32(ctx, v1956, v1932);
                                let v1958 = constructor_output_reg(ctx, v1957);
                                let v1959 = Some(v1958);
                                // Rule at src/isa/aarch64/lower.isle line 2486.
                                return v1959;
                            }
                            F64 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                                let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                                let v1962 = constructor_output_reg(ctx, v1961);
                                let v1963 = Some(v1962);
                                // Rule at src/isa/aarch64/lower.isle line 2489.
                                return v1963;
                            }
                            F128 => {
                                let v1934 = C::offset32_to_i32(ctx, v1933);
                                let v1965 = &constructor_amode(ctx, F128, v1931, v1934);
                                let v1966 = constructor_aarch64_fpuload128(ctx, v1965, v1932);
                                let v1967 = constructor_output_reg(ctx, v1966);
                                let v1968 = Some(v1967);
                                // Rule at src/isa/aarch64/lower.isle line 2492.
                                return v1968;
                            }
                            _ => {}
                        }
                        let v1973 = C::ty_vec64(ctx, v3);
                        if let Some(v1974) = v1973 {
                            let v1934 = C::offset32_to_i32(ctx, v1933);
                            let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                            let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                            let v1962 = constructor_output_reg(ctx, v1961);
                            let v1963 = Some(v1962);
                            // Rule at src/isa/aarch64/lower.isle line 2498.
                            return v1963;
                        }
                        let v1980 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1981) = v1980 {
                            let v1934 = C::offset32_to_i32(ctx, v1933);
                            let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                            let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                            let v1962 = constructor_output_reg(ctx, v1961);
                            let v1963 = Some(v1962);
                            // Rule at src/isa/aarch64/lower.isle line 2506.
                            return v1963;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1934 = C::offset32_to_i32(ctx, v1933);
                            let v1976 = &constructor_amode(ctx, I8X16, v1931, v1934);
                            let v1977 = constructor_aarch64_fpuload128(ctx, v1976, v1932);
                            let v1978 = constructor_output_reg(ctx, v1977);
                            let v1979 = Some(v1978);
                            // Rule at src/isa/aarch64/lower.isle line 2502.
                            return v1979;
                        }
                        let v1982 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1983) = v1982 {
                            let v1934 = C::offset32_to_i32(ctx, v1933);
                            let v1976 = &constructor_amode(ctx, I8X16, v1931, v1934);
                            let v1977 = constructor_aarch64_fpuload128(ctx, v1976, v1932);
                            let v1978 = constructor_output_reg(ctx, v1977);
                            let v1979 = Some(v1978);
                            // Rule at src/isa/aarch64/lower.isle line 2510.
                            return v1979;
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1935 = &constructor_amode(ctx, I8, v1931, v1934);
                    let v1936 = constructor_aarch64_uload8(ctx, v1935, v1932);
                    let v1937 = constructor_output_reg(ctx, v1936);
                    let v1938 = Some(v1937);
                    // Rule at src/isa/aarch64/lower.isle line 2515.
                    return v1938;
                }
                &Opcode::Sload8 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1935 = &constructor_amode(ctx, I8, v1931, v1934);
                    let v1984 = constructor_aarch64_sload8(ctx, v1935, v1932);
                    let v1985 = constructor_output_reg(ctx, v1984);
                    let v1986 = Some(v1985);
                    // Rule at src/isa/aarch64/lower.isle line 2518.
                    return v1986;
                }
                &Opcode::Uload16 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1939 = &constructor_amode(ctx, I16, v1931, v1934);
                    let v1940 = constructor_aarch64_uload16(ctx, v1939, v1932);
                    let v1941 = constructor_output_reg(ctx, v1940);
                    let v1942 = Some(v1941);
                    // Rule at src/isa/aarch64/lower.isle line 2521.
                    return v1942;
                }
                &Opcode::Sload16 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1939 = &constructor_amode(ctx, I16, v1931, v1934);
                    let v1987 = constructor_aarch64_sload16(ctx, v1939, v1932);
                    let v1988 = constructor_output_reg(ctx, v1987);
                    let v1989 = Some(v1988);
                    // Rule at src/isa/aarch64/lower.isle line 2524.
                    return v1989;
                }
                &Opcode::Uload32 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1943 = &constructor_amode(ctx, I32, v1931, v1934);
                    let v1944 = constructor_aarch64_uload32(ctx, v1943, v1932);
                    let v1945 = constructor_output_reg(ctx, v1944);
                    let v1946 = Some(v1945);
                    // Rule at src/isa/aarch64/lower.isle line 2527.
                    return v1946;
                }
                &Opcode::Sload32 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1943 = &constructor_amode(ctx, I32, v1931, v1934);
                    let v1990 = constructor_aarch64_sload32(ctx, v1943, v1932);
                    let v1991 = constructor_output_reg(ctx, v1990);
                    let v1992 = Some(v1991);
                    // Rule at src/isa/aarch64/lower.isle line 2530.
                    return v1992;
                }
                &Opcode::Uload8x8 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v1997 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size16,
                    );
                    let v1998 = constructor_output_reg(ctx, v1997);
                    let v1999 = Some(v1998);
                    // Rule at src/isa/aarch64/lower.isle line 2540.
                    return v1999;
                }
                &Opcode::Sload8x8 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v1994 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size16,
                    );
                    let v1995 = constructor_output_reg(ctx, v1994);
                    let v1996 = Some(v1995);
                    // Rule at src/isa/aarch64/lower.isle line 2534.
                    return v1996;
                }
                &Opcode::Uload16x4 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v2003 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size32,
                    );
                    let v2004 = constructor_output_reg(ctx, v2003);
                    let v2005 = Some(v2004);
                    // Rule at src/isa/aarch64/lower.isle line 2552.
                    return v2005;
                }
                &Opcode::Sload16x4 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v2000 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size32,
                    );
                    let v2001 = constructor_output_reg(ctx, v2000);
                    let v2002 = Some(v2001);
                    // Rule at src/isa/aarch64/lower.isle line 2546.
                    return v2002;
                }
                &Opcode::Uload32x2 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v2009 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size64,
                    );
                    let v2010 = constructor_output_reg(ctx, v2009);
                    let v2011 = Some(v2010);
                    // Rule at src/isa/aarch64/lower.isle line 2564.
                    return v2011;
                }
                &Opcode::Sload32x2 => {
                    let v1934 = C::offset32_to_i32(ctx, v1933);
                    let v1960 = &constructor_amode(ctx, F64, v1931, v1934);
                    let v1961 = constructor_aarch64_fpuload64(ctx, v1960, v1932);
                    let v377 = false;
                    let v2006 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1961,
                        v377,
                        &ScalarSize::Size64,
                    );
                    let v2007 = constructor_output_reg(ctx, v2006);
                    let v2008 = Some(v2007);
                    // Rule at src/isa/aarch64/lower.isle line 2558.
                    return v2008;
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1668,
            arg: v1669,
            flags: v1670,
        } => {
            match v1668 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2081 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v2082) = v2081 {
                            let v2083 = C::value_type(ctx, v1669);
                            let v2084 = C::ty_float_or_vec(ctx, v2083);
                            if let Some(v2085) = v2084 {
                                let v2086 = constructor_output_value(ctx, v1669);
                                let v2087 = Some(v2086);
                                // Rule at src/isa/aarch64/lower.isle line 2655.
                                return v2087;
                            }
                            if v2083 == I128 {
                                let v2088 = C::put_in_regs(ctx, v1669);
                                let v2089 = C::value_regs_get(ctx, v2088, 0x0_usize);
                                let v2090 = constructor_mov_to_fpu(ctx, v2089, &ScalarSize::Size64);
                                let v2091 = C::put_in_regs(ctx, v1669);
                                let v2092 = C::value_regs_get(ctx, v2091, 0x1_usize);
                                let v2093 = constructor_mov_to_vec(
                                    ctx,
                                    v2090,
                                    v2092,
                                    0x1_u8,
                                    &VectorSize::Size64x2,
                                );
                                let v2094 = constructor_output_reg(ctx, v2093);
                                let v2095 = Some(v2094);
                                // Rule at src/isa/aarch64/lower.isle line 2659.
                                return v2095;
                            }
                        }
                        if v3 == I128 {
                            let v2083 = C::value_type(ctx, v1669);
                            let v2084 = C::ty_float_or_vec(ctx, v2083);
                            if let Some(v2085) = v2084 {
                                let v1671 = C::put_in_reg(ctx, v1669);
                                let v2096 = constructor_mov_from_vec(
                                    ctx,
                                    v1671,
                                    0x0_u8,
                                    &ScalarSize::Size64,
                                );
                                let v2097 = C::put_in_reg(ctx, v1669);
                                let v2098 = constructor_mov_from_vec(
                                    ctx,
                                    v2097,
                                    0x1_u8,
                                    &ScalarSize::Size64,
                                );
                                let v2099 = C::value_regs(ctx, v2096, v2098);
                                let v2100 = C::output(ctx, v2099);
                                let v2101 = Some(v2100);
                                // Rule at src/isa/aarch64/lower.isle line 2663.
                                return v2101;
                            }
                        }
                        if let Some(v2082) = v2081 {
                            let v2083 = C::value_type(ctx, v1669);
                            let v2102 = C::ty_int_ref_scalar_64(ctx, v2083);
                            if let Some(v2103) = v2102 {
                                let v1671 = C::put_in_reg(ctx, v1669);
                                let v2104 = &constructor_scalar_size(ctx, v2083);
                                let v2105 = constructor_mov_to_fpu(ctx, v1671, v2104);
                                let v2106 = constructor_output_reg(ctx, v2105);
                                let v2107 = Some(v2106);
                                // Rule at src/isa/aarch64/lower.isle line 2667.
                                return v2107;
                            }
                        }
                        let v1421 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1422) = v1421 {
                            let v2083 = C::value_type(ctx, v1669);
                            let v2108 = C::fits_in_64(ctx, v2083);
                            if let Some(v2109) = v2108 {
                                let v2110 = C::ty_float_or_vec(ctx, v2109);
                                if let Some(v2111) = v2110 {
                                    let v1671 = C::put_in_reg(ctx, v1669);
                                    let v2112 = &constructor_scalar_size(ctx, v3);
                                    let v2113 = constructor_mov_from_vec(ctx, v1671, 0x0_u8, v2112);
                                    let v2114 = constructor_output_reg(ctx, v2113);
                                    let v2115 = Some(v2114);
                                    // Rule at src/isa/aarch64/lower.isle line 2672.
                                    return v2115;
                                }
                            }
                            let v2102 = C::ty_int_ref_scalar_64(ctx, v2083);
                            if let Some(v2103) = v2102 {
                                let v2086 = constructor_output_value(ctx, v1669);
                                let v2087 = Some(v2086);
                                // Rule at src/isa/aarch64/lower.isle line 2677.
                                return v2087;
                            }
                        }
                        if v3 == I128 {
                            let v2083 = C::value_type(ctx, v1669);
                            if v2083 == I128 {
                                let v2086 = constructor_output_value(ctx, v1669);
                                let v2087 = Some(v2086);
                                // Rule at src/isa/aarch64/lower.isle line 2681.
                                return v2087;
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1666 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1667) = v1666 {
                            let v1671 = C::put_in_reg(ctx, v1669);
                            let v1672 = constructor_load_acquire(ctx, v1667, v1670, v1671);
                            let v1673 = constructor_output_reg(ctx, v1672);
                            let v1674 = Some(v1673);
                            // Rule at src/isa/aarch64/lower.isle line 2242.
                            return v1674;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1921,
            args: v1922,
        } => {
            if let &Opcode::Return = v1921 {
                let v1923 = C::value_list_slice(ctx, v1922);
                let v1924 = constructor_lower_return(ctx, v1923);
                let v1925 = Some(v1924);
                // Rule at src/isa/aarch64/lower.isle line 2458.
                return v1925;
            }
        }
        &InstructionData::NullAry { opcode: ref v37 } => {
            match v37 {
                &Opcode::Debugtrap => {
                    let v1867 = &constructor_brk(ctx);
                    let v1868 = constructor_side_effect(ctx, v1867);
                    let v1869 = Some(v1868);
                    // Rule at src/isa/aarch64/lower.isle line 2423.
                    return v1869;
                }
                &Opcode::GetPinnedReg => {
                    let v2074 = C::preg_pinned(ctx);
                    let v2075 = constructor_mov_from_preg(ctx, v2074);
                    let v2076 = constructor_output_reg(ctx, v2075);
                    let v2077 = Some(v2076);
                    // Rule at src/isa/aarch64/lower.isle line 2646.
                    return v2077;
                }
                &Opcode::GetFramePointer => {
                    let v1892 = constructor_aarch64_fp(ctx);
                    let v1893 = constructor_output_reg(ctx, v1892);
                    let v1894 = Some(v1893);
                    // Rule at src/isa/aarch64/lower.isle line 2438.
                    return v1894;
                }
                &Opcode::GetStackPointer => {
                    let v1895 = constructor_aarch64_sp(ctx);
                    let v1896 = constructor_output_reg(ctx, v1895);
                    let v1897 = Some(v1896);
                    // Rule at src/isa/aarch64/lower.isle line 2441.
                    return v1897;
                }
                &Opcode::GetReturnAddress => {
                    let v1898 = constructor_aarch64_link(ctx);
                    let v1899 = constructor_output_reg(ctx, v1898);
                    let v1900 = Some(v1899);
                    // Rule at src/isa/aarch64/lower.isle line 2444.
                    return v1900;
                }
                &Opcode::Nop => {
                    let v38 = C::invalid_reg(ctx);
                    let v39 = constructor_output_reg(ctx, v38);
                    let v40 = Some(v39);
                    // Rule at src/isa/aarch64/lower.isle line 45.
                    return v40;
                }
                &Opcode::Fence => {
                    let v1864 = &constructor_aarch64_fence(ctx);
                    let v1865 = constructor_side_effect(ctx, v1864);
                    let v1866 = Some(v1865);
                    // Rule at src/isa/aarch64/lower.isle line 2418.
                    return v1866;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v165,
            args: ref v166,
            imm: v167,
        } => {
            if let &Opcode::Shuffle = v165 {
                let v171 = C::shuffle_dup8_from_imm(ctx, v167);
                if let Some(v172) = v171 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v175 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size8x16, v172);
                    let v176 = constructor_output_reg(ctx, v175);
                    let v177 = Some(v176);
                    // Rule at src/isa/aarch64/lower.isle line 133.
                    return v177;
                }
                let v178 = C::shuffle_dup16_from_imm(ctx, v167);
                if let Some(v179) = v178 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v181 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size16x8, v179);
                    let v182 = constructor_output_reg(ctx, v181);
                    let v183 = Some(v182);
                    // Rule at src/isa/aarch64/lower.isle line 135.
                    return v183;
                }
                let v184 = C::shuffle_dup32_from_imm(ctx, v167);
                if let Some(v185) = v184 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v187 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size32x4, v185);
                    let v188 = constructor_output_reg(ctx, v187);
                    let v189 = Some(v188);
                    // Rule at src/isa/aarch64/lower.isle line 137.
                    return v189;
                }
                let v190 = C::shuffle_dup64_from_imm(ctx, v167);
                if let Some(v191) = v190 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v193 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size64x2, v191);
                    let v194 = constructor_output_reg(ctx, v193);
                    let v195 = Some(v194);
                    // Rule at src/isa/aarch64/lower.isle line 139.
                    return v195;
                }
                let v196 = C::vec_extract_imm4_from_immediate(ctx, v167);
                if let Some(v197) = v196 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v198 = C::put_in_reg(ctx, v168.1);
                    let v199 = constructor_vec_extract(ctx, v173, v198, v197);
                    let v200 = constructor_output_reg(ctx, v199);
                    let v201 = Some(v200);
                    // Rule at src/isa/aarch64/lower.isle line 158.
                    return v201;
                }
                let v202 = C::u128_from_immediate(ctx, v167);
                if let Some(v203) = v202 {
                    match v203 {
                        0x8090a0b0c0d0e0f0001020304050607_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v273 = constructor_rev64(ctx, v173, &VectorSize::Size8x16);
                            let v274 = constructor_output_reg(ctx, v273);
                            let v275 = Some(v274);
                            // Rule at src/isa/aarch64/lower.isle line 234.
                            return v275;
                        }
                        0x9080b0a0d0c0f0e0100030205040706_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v276 = constructor_rev64(ctx, v173, &VectorSize::Size16x8);
                            let v277 = constructor_output_reg(ctx, v276);
                            let v278 = Some(v277);
                            // Rule at src/isa/aarch64/lower.isle line 236.
                            return v278;
                        }
                        0xb0a09080f0e0d0c0302010007060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v279 = constructor_rev64(ctx, v173, &VectorSize::Size32x4);
                            let v280 = constructor_output_reg(ctx, v279);
                            let v281 = Some(v280);
                            // Rule at src/isa/aarch64/lower.isle line 238.
                            return v281;
                        }
                        0xc0d0e0f08090a0b0405060700010203_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v267 = constructor_rev32(ctx, v173, &VectorSize::Size8x16);
                            let v268 = constructor_output_reg(ctx, v267);
                            let v269 = Some(v268);
                            // Rule at src/isa/aarch64/lower.isle line 230.
                            return v269;
                        }
                        0xd0c0f0e09080b0a0504070601000302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v270 = constructor_rev32(ctx, v173, &VectorSize::Size16x8);
                            let v271 = constructor_output_reg(ctx, v270);
                            let v272 = Some(v271);
                            // Rule at src/isa/aarch64/lower.isle line 232.
                            return v272;
                        }
                        0xe0f0c0d0a0b08090607040502030001_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v264 = constructor_rev16(ctx, v173, &VectorSize::Size8x16);
                            let v265 = constructor_output_reg(ctx, v264);
                            let v266 = Some(v265);
                            // Rule at src/isa/aarch64/lower.isle line 228.
                            return v266;
                        }
                        0x17071606150514041303120211011000_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v228 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v229 = constructor_output_reg(ctx, v228);
                            let v230 = Some(v229);
                            // Rule at src/isa/aarch64/lower.isle line 190.
                            return v230;
                        }
                        0x17160706151405041312030211100100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v234 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v235 = constructor_output_reg(ctx, v234);
                            let v236 = Some(v235);
                            // Rule at src/isa/aarch64/lower.isle line 194.
                            return v236;
                        }
                        0x17161514070605041312111003020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v240 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v241 = constructor_output_reg(ctx, v240);
                            let v242 = Some(v241);
                            // Rule at src/isa/aarch64/lower.isle line 198.
                            return v242;
                        }
                        0x17161514131211100706050403020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v222 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size64x2);
                            let v223 = constructor_output_reg(ctx, v222);
                            let v224 = Some(v223);
                            // Rule at src/isa/aarch64/lower.isle line 183.
                            return v224;
                        }
                        0x1b1a19180b0a09081312111003020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v258 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v259 = constructor_output_reg(ctx, v258);
                            let v260 = Some(v259);
                            // Rule at src/isa/aarch64/lower.isle line 216.
                            return v260;
                        }
                        0x1b1a1918131211100b0a090803020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v216 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v217 = constructor_output_reg(ctx, v216);
                            let v218 = Some(v217);
                            // Rule at src/isa/aarch64/lower.isle line 179.
                            return v218;
                        }
                        0x1d1c0d0c191809081514050411100100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v252 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v253 = constructor_output_reg(ctx, v252);
                            let v254 = Some(v253);
                            // Rule at src/isa/aarch64/lower.isle line 212.
                            return v254;
                        }
                        0x1d1c1918151411100d0c090805040100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v210 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v211 = constructor_output_reg(ctx, v210);
                            let v212 = Some(v211);
                            // Rule at src/isa/aarch64/lower.isle line 175.
                            return v212;
                        }
                        0x1e0e1c0c1a0a18081606140412021000_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v246 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v247 = constructor_output_reg(ctx, v246);
                            let v248 = Some(v247);
                            // Rule at src/isa/aarch64/lower.isle line 208.
                            return v248;
                        }
                        0x1e1c1a18161412100e0c0a0806040200_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v204 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v205 = constructor_output_reg(ctx, v204);
                            let v206 = Some(v205);
                            // Rule at src/isa/aarch64/lower.isle line 171.
                            return v206;
                        }
                        0x1f0f1d0d1b0b19091707150513031101_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v249 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v250 = constructor_output_reg(ctx, v249);
                            let v251 = Some(v250);
                            // Rule at src/isa/aarch64/lower.isle line 210.
                            return v251;
                        }
                        0x1f0f1e0e1d0d1c0c1b0b1a0a19091808_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v231 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v232 = constructor_output_reg(ctx, v231);
                            let v233 = Some(v232);
                            // Rule at src/isa/aarch64/lower.isle line 192.
                            return v233;
                        }
                        0x1f1d1b19171513110f0d0b0907050301_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v207 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v208 = constructor_output_reg(ctx, v207);
                            let v209 = Some(v208);
                            // Rule at src/isa/aarch64/lower.isle line 173.
                            return v209;
                        }
                        0x1f1e0f0e1b1a0b0a1716070613120302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v255 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v256 = constructor_output_reg(ctx, v255);
                            let v257 = Some(v256);
                            // Rule at src/isa/aarch64/lower.isle line 214.
                            return v257;
                        }
                        0x1f1e0f0e1d1c0d0c1b1a0b0a19180908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v237 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v238 = constructor_output_reg(ctx, v237);
                            let v239 = Some(v238);
                            // Rule at src/isa/aarch64/lower.isle line 196.
                            return v239;
                        }
                        0x1f1e1b1a171613120f0e0b0a07060302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v213 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v214 = constructor_output_reg(ctx, v213);
                            let v215 = Some(v214);
                            // Rule at src/isa/aarch64/lower.isle line 177.
                            return v215;
                        }
                        0x1f1e1d1c0f0e0d0c1716151407060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v261 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v262 = constructor_output_reg(ctx, v261);
                            let v263 = Some(v262);
                            // Rule at src/isa/aarch64/lower.isle line 218.
                            return v263;
                        }
                        0x1f1e1d1c0f0e0d0c1b1a19180b0a0908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v243 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v244 = constructor_output_reg(ctx, v243);
                            let v245 = Some(v244);
                            // Rule at src/isa/aarch64/lower.isle line 200.
                            return v245;
                        }
                        0x1f1e1d1c171615140f0e0d0c07060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v219 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v220 = constructor_output_reg(ctx, v219);
                            let v221 = Some(v220);
                            // Rule at src/isa/aarch64/lower.isle line 181.
                            return v221;
                        }
                        0x1f1e1d1c1b1a19180f0e0d0c0b0a0908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v225 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size64x2);
                            let v226 = constructor_output_reg(ctx, v225);
                            let v227 = Some(v226);
                            // Rule at src/isa/aarch64/lower.isle line 185.
                            return v227;
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v282 = constructor_constant_f128(ctx, v203);
                        let v168 = C::unpack_value_array_2(ctx, v166);
                        let v283 = C::put_in_reg(ctx, v168.0);
                        let v284 = C::put_in_reg(ctx, v168.1);
                        let v3 = C::value_type(ctx, v2);
                        let v285 = constructor_vec_tbl2(ctx, v283, v284, v282, v3);
                        let v286 = constructor_output_reg(ctx, v285);
                        let v287 = Some(v286);
                        // Rule at src/isa/aarch64/lower.isle line 241.
                        return v287;
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2154,
            stack_slot: v2155,
            offset: v2156,
        } => {
            if let &Opcode::StackAddr = v2154 {
                let v2157 = constructor_compute_stack_addr(ctx, v2155, v2156);
                let v2158 = constructor_output_reg(ctx, v2157);
                let v2159 = Some(v2158);
                // Rule at src/isa/aarch64/lower.isle line 2714.
                return v2159;
            }
        }
        &InstructionData::Store {
            opcode: ref v2012,
            args: ref v2013,
            flags: v2014,
            offset: v2015,
        } => {
            match v2012 {
                &Opcode::Store => {
                    let v2016 = C::unpack_value_array_2(ctx, v2013);
                    let v2019 = C::value_type(ctx, v2016.0);
                    match v2019 {
                        I8 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2021 = &constructor_amode(ctx, I8, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2023 = &constructor_aarch64_store8(ctx, v2021, v2014, v2022);
                            let v2024 = constructor_side_effect(ctx, v2023);
                            let v2025 = Some(v2024);
                            // Rule at src/isa/aarch64/lower.isle line 2573.
                            return v2025;
                        }
                        I16 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2026 = &constructor_amode(ctx, I16, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2027 = &constructor_aarch64_store16(ctx, v2026, v2014, v2022);
                            let v2028 = constructor_side_effect(ctx, v2027);
                            let v2029 = Some(v2028);
                            // Rule at src/isa/aarch64/lower.isle line 2577.
                            return v2029;
                        }
                        I32 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2030 = &constructor_amode(ctx, I32, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2031 = &constructor_aarch64_store32(ctx, v2030, v2014, v2022);
                            let v2032 = constructor_side_effect(ctx, v2031);
                            let v2033 = Some(v2032);
                            // Rule at src/isa/aarch64/lower.isle line 2581.
                            return v2033;
                        }
                        I64 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2034 = &constructor_amode(ctx, I64, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2035 = &constructor_aarch64_store64(ctx, v2034, v2014, v2022);
                            let v2036 = constructor_side_effect(ctx, v2035);
                            let v2037 = Some(v2036);
                            // Rule at src/isa/aarch64/lower.isle line 2585.
                            return v2037;
                        }
                        I128 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2054 = &constructor_pair_amode(ctx, v2016.1, v2020);
                            let v2055 = C::put_in_regs(ctx, v2016.0);
                            let v2056 = C::value_regs_get(ctx, v2055, 0x0_usize);
                            let v2057 = C::put_in_regs(ctx, v2016.0);
                            let v2058 = C::value_regs_get(ctx, v2057, 0x1_usize);
                            let v2059 =
                                &constructor_aarch64_storep64(ctx, v2054, v2014, v2056, v2058);
                            let v2060 = constructor_side_effect(ctx, v2059);
                            let v2061 = Some(v2060);
                            // Rule at src/isa/aarch64/lower.isle line 2620.
                            return v2061;
                        }
                        F16 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2038 = &constructor_amode(ctx, F16, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2039 = &constructor_aarch64_fpustore16(ctx, v2038, v2014, v2022);
                            let v2040 = constructor_side_effect(ctx, v2039);
                            let v2041 = Some(v2040);
                            // Rule at src/isa/aarch64/lower.isle line 2603.
                            return v2041;
                        }
                        F32 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2042 = &constructor_amode(ctx, F32, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2043 = &constructor_aarch64_fpustore32(ctx, v2042, v2014, v2022);
                            let v2044 = constructor_side_effect(ctx, v2043);
                            let v2045 = Some(v2044);
                            // Rule at src/isa/aarch64/lower.isle line 2607.
                            return v2045;
                        }
                        F64 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2046 = &constructor_amode(ctx, F64, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2047 = &constructor_aarch64_fpustore64(ctx, v2046, v2014, v2022);
                            let v2048 = constructor_side_effect(ctx, v2047);
                            let v2049 = Some(v2048);
                            // Rule at src/isa/aarch64/lower.isle line 2611.
                            return v2049;
                        }
                        F128 => {
                            let v2020 = C::offset32_to_i32(ctx, v2015);
                            let v2050 = &constructor_amode(ctx, F128, v2016.1, v2020);
                            let v2022 = C::put_in_reg(ctx, v2016.0);
                            let v2051 = &constructor_aarch64_fpustore128(ctx, v2050, v2014, v2022);
                            let v2052 = constructor_side_effect(ctx, v2051);
                            let v2053 = Some(v2052);
                            // Rule at src/isa/aarch64/lower.isle line 2615.
                            return v2053;
                        }
                        _ => {}
                    }
                    let v2062 = C::ty_vec64(ctx, v2019);
                    if let Some(v2063) = v2062 {
                        let v2020 = C::offset32_to_i32(ctx, v2015);
                        let v2046 = &constructor_amode(ctx, F64, v2016.1, v2020);
                        let v2022 = C::put_in_reg(ctx, v2016.0);
                        let v2047 = &constructor_aarch64_fpustore64(ctx, v2046, v2014, v2022);
                        let v2048 = constructor_side_effect(ctx, v2047);
                        let v2049 = Some(v2048);
                        // Rule at src/isa/aarch64/lower.isle line 2627.
                        return v2049;
                    }
                    let v2070 = C::ty_dyn_vec64(ctx, v2019);
                    if let Some(v2071) = v2070 {
                        let v2020 = C::offset32_to_i32(ctx, v2015);
                        let v2046 = &constructor_amode(ctx, F64, v2016.1, v2020);
                        let v2022 = C::put_in_reg(ctx, v2016.0);
                        let v2047 = &constructor_aarch64_fpustore64(ctx, v2046, v2014, v2022);
                        let v2048 = constructor_side_effect(ctx, v2047);
                        let v2049 = Some(v2048);
                        // Rule at src/isa/aarch64/lower.isle line 2635.
                        return v2049;
                    }
                    let v2064 = C::ty_vec128(ctx, v2019);
                    if let Some(v2065) = v2064 {
                        let v2020 = C::offset32_to_i32(ctx, v2015);
                        let v2066 = &constructor_amode(ctx, I8X16, v2016.1, v2020);
                        let v2022 = C::put_in_reg(ctx, v2016.0);
                        let v2067 = &constructor_aarch64_fpustore128(ctx, v2066, v2014, v2022);
                        let v2068 = constructor_side_effect(ctx, v2067);
                        let v2069 = Some(v2068);
                        // Rule at src/isa/aarch64/lower.isle line 2631.
                        return v2069;
                    }
                    let v2072 = C::ty_dyn_vec128(ctx, v2019);
                    if let Some(v2073) = v2072 {
                        let v2020 = C::offset32_to_i32(ctx, v2015);
                        let v2066 = &constructor_amode(ctx, I8X16, v2016.1, v2020);
                        let v2022 = C::put_in_reg(ctx, v2016.0);
                        let v2067 = &constructor_aarch64_fpustore128(ctx, v2066, v2014, v2022);
                        let v2068 = constructor_side_effect(ctx, v2067);
                        let v2069 = Some(v2068);
                        // Rule at src/isa/aarch64/lower.isle line 2639.
                        return v2069;
                    }
                }
                &Opcode::Istore8 => {
                    let v2016 = C::unpack_value_array_2(ctx, v2013);
                    let v2020 = C::offset32_to_i32(ctx, v2015);
                    let v2021 = &constructor_amode(ctx, I8, v2016.1, v2020);
                    let v2022 = C::put_in_reg(ctx, v2016.0);
                    let v2023 = &constructor_aarch64_store8(ctx, v2021, v2014, v2022);
                    let v2024 = constructor_side_effect(ctx, v2023);
                    let v2025 = Some(v2024);
                    // Rule at src/isa/aarch64/lower.isle line 2590.
                    return v2025;
                }
                &Opcode::Istore16 => {
                    let v2016 = C::unpack_value_array_2(ctx, v2013);
                    let v2020 = C::offset32_to_i32(ctx, v2015);
                    let v2026 = &constructor_amode(ctx, I16, v2016.1, v2020);
                    let v2022 = C::put_in_reg(ctx, v2016.0);
                    let v2027 = &constructor_aarch64_store16(ctx, v2026, v2014, v2022);
                    let v2028 = constructor_side_effect(ctx, v2027);
                    let v2029 = Some(v2028);
                    // Rule at src/isa/aarch64/lower.isle line 2594.
                    return v2029;
                }
                &Opcode::Istore32 => {
                    let v2016 = C::unpack_value_array_2(ctx, v2013);
                    let v2020 = C::offset32_to_i32(ctx, v2015);
                    let v2030 = &constructor_amode(ctx, I32, v2016.1, v2020);
                    let v2022 = C::put_in_reg(ctx, v2016.0);
                    let v2031 = &constructor_aarch64_store32(ctx, v2030, v2014, v2022);
                    let v2032 = constructor_side_effect(ctx, v2031);
                    let v2033 = Some(v2032);
                    // Rule at src/isa/aarch64/lower.isle line 2598.
                    return v2033;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1675,
            args: ref v1676,
            flags: v1677,
        } => {
            if let &Opcode::AtomicStore = v1675 {
                let v1678 = C::unpack_value_array_2(ctx, v1676);
                let v1681 = C::value_type(ctx, v1678.0);
                let v1682 = C::valid_atomic_transaction(ctx, v1681);
                if let Some(v1683) = v1682 {
                    let v1684 = C::put_in_reg(ctx, v1678.0);
                    let v1685 = C::put_in_reg(ctx, v1678.1);
                    let v1686 = &constructor_store_release(ctx, v1683, v1677, v1684, v1685);
                    let v1687 = constructor_side_effect(ctx, v1686);
                    let v1688 = Some(v1687);
                    // Rule at src/isa/aarch64/lower.isle line 2247.
                    return v1688;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v605,
            args: ref v606,
        } => {
            match v605 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v607 = C::unpack_value_array_3(ctx, v606);
                        let v1546 = C::maybe_uextend(ctx, v607.0);
                        if let Some(v1547) = v1546 {
                            let v1548 = C::def_inst(ctx, v1547);
                            if let Some(v1549) = v1548 {
                                let v1550 = &C::inst_data(ctx, v1549);
                                match v1550 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1565,
                                        args: ref v1566,
                                        cond: ref v1567,
                                    } => {
                                        if let &Opcode::Fcmp = v1565 {
                                            let v1572 = &C::fp_cond_code(ctx, v1567);
                                            let v1568 = C::unpack_value_array_2(ctx, v1566);
                                            let v1571 = C::value_type(ctx, v1568.0);
                                            let v1573 = &constructor_scalar_size(ctx, v1571);
                                            let v1574 = C::put_in_reg(ctx, v1568.0);
                                            let v1575 = C::put_in_reg(ctx, v1568.1);
                                            let v1576 =
                                                &constructor_fpu_cmp(ctx, v1573, v1574, v1575);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1577 = constructor_lower_select(
                                                ctx, v1576, v1572, v3, v607.1, v607.2,
                                            );
                                            let v1578 = C::output(ctx, v1577);
                                            let v1579 = Some(v1578);
                                            // Rule at src/isa/aarch64/lower.isle line 2139.
                                            return v1579;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1551,
                                        args: ref v1552,
                                        cond: ref v1553,
                                    } => {
                                        if let &Opcode::Icmp = v1551 {
                                            let v1554 = C::unpack_value_array_2(ctx, v1552);
                                            let v1557 = C::value_type(ctx, v1554.0);
                                            let v1558 = &constructor_lower_icmp_into_flags(
                                                ctx, v1553, v1554.0, v1554.1, v1557,
                                            );
                                            let v1559 = &constructor_flags_and_cc_flags(ctx, v1558);
                                            let v1560 = &constructor_flags_and_cc_cc(ctx, v1558);
                                            let v1561 = &C::cond_code(ctx, v1560);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1562 = constructor_lower_select(
                                                ctx, v1559, v1561, v3, v607.1, v607.2,
                                            );
                                            let v1563 = C::output(ctx, v1562);
                                            let v1564 = Some(v1563);
                                            // Rule at src/isa/aarch64/lower.isle line 2126.
                                            return v1564;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1580 = C::value_type(ctx, v607.0);
                        if v1580 == I8 {
                            let v1432 = C::put_in_reg(ctx, v607.0);
                            let v1582 = C::u64_into_imm_logic(ctx, I32, 0xff_u64);
                            let v1583 = &constructor_tst_imm(ctx, I32, v1432, v1582);
                            let v3 = C::value_type(ctx, v2);
                            let v1584 =
                                constructor_lower_select(ctx, v1583, &Cond::Ne, v3, v607.1, v607.2);
                            let v1585 = C::output(ctx, v1584);
                            let v1586 = Some(v1585);
                            // Rule at src/isa/aarch64/lower.isle line 2148.
                            return v1586;
                        }
                        let v1587 = C::fits_in_32(ctx, v1580);
                        if let Some(v1588) = v1587 {
                            let v1589 = constructor_put_in_reg_zext32(ctx, v607.0);
                            let v1590 = C::zero_reg(ctx);
                            let v1591 = &constructor_cmp(ctx, &OperandSize::Size32, v1589, v1590);
                            let v3 = C::value_type(ctx, v2);
                            let v1592 =
                                constructor_lower_select(ctx, v1591, &Cond::Ne, v3, v607.1, v607.2);
                            let v1593 = C::output(ctx, v1592);
                            let v1594 = Some(v1593);
                            // Rule at src/isa/aarch64/lower.isle line 2154.
                            return v1594;
                        }
                        let v1595 = C::fits_in_64(ctx, v1580);
                        if let Some(v1596) = v1595 {
                            let v1597 = constructor_put_in_reg_zext64(ctx, v607.0);
                            let v1590 = C::zero_reg(ctx);
                            let v1598 = &constructor_cmp(ctx, &OperandSize::Size64, v1597, v1590);
                            let v3 = C::value_type(ctx, v2);
                            let v1599 =
                                constructor_lower_select(ctx, v1598, &Cond::Ne, v3, v607.1, v607.2);
                            let v1600 = C::output(ctx, v1599);
                            let v1601 = Some(v1600);
                            // Rule at src/isa/aarch64/lower.isle line 2160.
                            return v1601;
                        }
                        if v1580 == I128 {
                            let v1602 = C::put_in_regs(ctx, v607.0);
                            let v1603 = C::value_regs_get(ctx, v1602, 0x0_usize);
                            let v1604 = C::value_regs_get(ctx, v1602, 0x1_usize);
                            let v1605 = constructor_orr(ctx, I64, v1603, v1604);
                            let v1183 = C::zero_reg(ctx);
                            let v1606 = &constructor_cmp(ctx, &OperandSize::Size64, v1605, v1183);
                            let v3 = C::value_type(ctx, v2);
                            let v1607 =
                                constructor_lower_select(ctx, v1606, &Cond::Ne, v3, v607.1, v607.2);
                            let v1608 = C::output(ctx, v1607);
                            let v1609 = Some(v1608);
                            // Rule at src/isa/aarch64/lower.isle line 2166.
                            return v1609;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v607 = C::unpack_value_array_3(ctx, v606);
                        let v1546 = C::maybe_uextend(ctx, v607.0);
                        if let Some(v1547) = v1546 {
                            let v1548 = C::def_inst(ctx, v1547);
                            if let Some(v1549) = v1548 {
                                let v1550 = &C::inst_data(ctx, v1549);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1551,
                                    args: ref v1552,
                                    cond: ref v1553,
                                } = v1550
                                {
                                    if let &Opcode::Icmp = v1551 {
                                        let v1554 = C::unpack_value_array_2(ctx, v1552);
                                        let v1557 = C::value_type(ctx, v1554.0);
                                        let v1558 = &constructor_lower_icmp_into_flags(
                                            ctx, v1553, v1554.0, v1554.1, v1557,
                                        );
                                        let v1559 = &constructor_flags_and_cc_flags(ctx, v1558);
                                        let v1560 = &constructor_flags_and_cc_cc(ctx, v1558);
                                        let v1561 = &C::cond_code(ctx, v1560);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1562 = constructor_lower_select(
                                            ctx, v1559, v1561, v3, v607.1, v607.2,
                                        );
                                        let v1610 = &constructor_csdb(ctx);
                                        let v1611 = constructor_side_effect(ctx, v1610);
                                        let v1612 = C::output(ctx, v1562);
                                        let v1613 = Some(v1612);
                                        // Rule at src/isa/aarch64/lower.isle line 2177.
                                        return v1613;
                                    }
                                }
                            }
                        }
                        let v1580 = C::value_type(ctx, v607.0);
                        let v1595 = C::fits_in_64(ctx, v1580);
                        if let Some(v1596) = v1595 {
                            let v1597 = constructor_put_in_reg_zext64(ctx, v607.0);
                            let v1590 = C::zero_reg(ctx);
                            let v1598 = &constructor_cmp(ctx, &OperandSize::Size64, v1597, v1590);
                            let v3 = C::value_type(ctx, v2);
                            let v1599 =
                                constructor_lower_select(ctx, v1598, &Cond::Ne, v3, v607.1, v607.2);
                            let v1600 = C::output(ctx, v1599);
                            let v1601 = Some(v1600);
                            // Rule at src/isa/aarch64/lower.isle line 2191.
                            return v1601;
                        }
                        if v1580 == I128 {
                            let v1602 = C::put_in_regs(ctx, v607.0);
                            let v1603 = C::value_regs_get(ctx, v1602, 0x0_usize);
                            let v1604 = C::value_regs_get(ctx, v1602, 0x1_usize);
                            let v1605 = constructor_orr(ctx, I64, v1603, v1604);
                            let v1183 = C::zero_reg(ctx);
                            let v1606 = &constructor_cmp(ctx, &OperandSize::Size64, v1605, v1183);
                            let v3 = C::value_type(ctx, v2);
                            let v1607 =
                                constructor_lower_select(ctx, v1606, &Cond::Ne, v3, v607.1, v607.2);
                            let v1608 = C::output(ctx, v1607);
                            let v1609 = Some(v1608);
                            // Rule at src/isa/aarch64/lower.isle line 2197.
                            return v1609;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v1432 = C::put_in_reg(ctx, v607.0);
                            let v1433 = C::put_in_reg(ctx, v607.1);
                            let v1434 = C::put_in_reg(ctx, v607.2);
                            let v1435 = constructor_bsl(ctx, v762, v1432, v1433, v1434);
                            let v1436 = constructor_output_reg(ctx, v1435);
                            let v1437 = Some(v1436);
                            // Rule at src/isa/aarch64/lower.isle line 2033.
                            return v1437;
                        }
                        let v1421 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1422) = v1421 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v1423 = C::put_in_reg(ctx, v607.1);
                            let v1424 = C::put_in_reg(ctx, v607.0);
                            let v1425 = constructor_and_reg(ctx, v3, v1423, v1424);
                            let v1426 = C::put_in_reg(ctx, v607.2);
                            let v1427 = C::put_in_reg(ctx, v607.0);
                            let v1428 = constructor_bic(ctx, v3, v1426, v1427);
                            let v1429 = constructor_orr(ctx, v3, v1425, v1428);
                            let v1430 = constructor_output_reg(ctx, v1429);
                            let v1431 = Some(v1430);
                            // Rule at src/isa/aarch64/lower.isle line 2027.
                            return v1431;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v624 = &constructor_vector_size(ctx, v3);
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v625 = constructor_lower_fmla(
                                ctx,
                                &VecALUModOp::Fmla,
                                v607.0,
                                v607.1,
                                v607.2,
                                v624,
                            );
                            let v626 = constructor_output_reg(ctx, v625);
                            let v627 = Some(v626);
                            // Rule at src/isa/aarch64/lower.isle line 567.
                            return v627;
                        }
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v611 = &constructor_is_fneg(ctx, v607.0);
                            let v614 = constructor_is_fneg_neg(ctx, v611);
                            let v612 = &constructor_is_fneg(ctx, v607.1);
                            let v615 = constructor_is_fneg_neg(ctx, v612);
                            let v616 = C::u64_xor(ctx, v614, v615);
                            let v613 = &constructor_is_fneg(ctx, v607.2);
                            let v617 = constructor_is_fneg_neg(ctx, v613);
                            let v618 = constructor_get_fneg_value(ctx, v611);
                            let v619 = constructor_get_fneg_value(ctx, v612);
                            let v620 = constructor_get_fneg_value(ctx, v613);
                            let v621 =
                                constructor_fmadd_series(ctx, v478, v616, v617, v618, v619, v620);
                            let v622 = Some(v621);
                            // Rule at src/isa/aarch64/lower.isle line 559.
                            return v622;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2132,
            args: ref v2133,
            imm: v2134,
        } => {
            if let &Opcode::Insertlane = v2132 {
                let v2135 = C::unpack_value_array_2(ctx, v2133);
                let v2139 = C::value_type(ctx, v2135.1);
                let v2140 = C::ty_int(ctx, v2139);
                if let Some(v2141) = v2140 {
                    let v2143 = C::put_in_reg(ctx, v2135.0);
                    let v2144 = C::put_in_reg(ctx, v2135.1);
                    let v2138 = C::value_type(ctx, v2135.0);
                    let v2145 = &constructor_vector_size(ctx, v2138);
                    let v2142 = C::u8_from_uimm8(ctx, v2134);
                    let v2146 = constructor_mov_to_vec(ctx, v2143, v2144, v2142, v2145);
                    let v2147 = constructor_output_reg(ctx, v2146);
                    let v2148 = Some(v2147);
                    // Rule at src/isa/aarch64/lower.isle line 2702.
                    return v2148;
                }
                let v2149 = C::ty_scalar_float(ctx, v2139);
                if let Some(v2150) = v2149 {
                    let v2143 = C::put_in_reg(ctx, v2135.0);
                    let v2144 = C::put_in_reg(ctx, v2135.1);
                    let v2138 = C::value_type(ctx, v2135.0);
                    let v2145 = &constructor_vector_size(ctx, v2138);
                    let v2142 = C::u8_from_uimm8(ctx, v2134);
                    let v2151 = constructor_mov_vec_elem(ctx, v2143, v2144, v2142, 0x0_u8, v2145);
                    let v2152 = constructor_output_reg(ctx, v2151);
                    let v2153 = Some(v2152);
                    // Rule at src/isa/aarch64/lower.isle line 2707.
                    return v2153;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1532,
            code: ref v1533,
        } => {
            if let &Opcode::Trap = v1532 {
                let v1534 = &constructor_udf(ctx, v1533);
                let v1535 = constructor_side_effect(ctx, v1534);
                let v1536 = Some(v1535);
                // Rule at src/isa/aarch64/lower.isle line 2111.
                return v1536;
            }
        }
        &InstructionData::Unary {
            opcode: ref v291,
            arg: v292,
        } => {
            match v291 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data(ctx, v302);
                            match v306 {
                                &InstructionData::Load {
                                    opcode: ref v1004,
                                    arg: v1005,
                                    flags: v1006,
                                    offset: v1007,
                                } => {
                                    if let &Opcode::Load = v1004 {
                                        let v988 = C::is_sinkable_inst(ctx, v292);
                                        if let Some(v989) = v988 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1661 = C::lane_type(ctx, v3);
                                            let v1662 =
                                                constructor_sink_load_into_addr(ctx, v1661, v989);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v1663 = constructor_ld1r(ctx, v1662, v424, v1006);
                                            let v1664 = constructor_output_reg(ctx, v1663);
                                            let v1665 = Some(v1664);
                                            // Rule at src/isa/aarch64/lower.isle line 2236.
                                            return v1665;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1650,
                                    arg: v1651,
                                } => {
                                    if let &Opcode::Ireduce = v1650 {
                                        let v1652 = C::def_inst(ctx, v1651);
                                        if let Some(v1653) = v1652 {
                                            let v1654 = &C::inst_data(ctx, v1653);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1655,
                                                imm: v1656,
                                            } = v1654
                                            {
                                                if let &Opcode::Iconst = v1655 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v624 = &constructor_vector_size(ctx, v3);
                                                    let v1657 = C::u64_from_imm64(ctx, v1656);
                                                    let v1658 =
                                                        constructor_splat_const(ctx, v1657, v624);
                                                    let v1659 = constructor_output_reg(ctx, v1658);
                                                    let v1660 = Some(v1659);
                                                    // Rule at src/isa/aarch64/lower.isle line 2233.
                                                    return v1660;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1631,
                                    imm: v1632,
                                } => {
                                    if let &Opcode::F32const = v1631 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1633 = C::u32_from_ieee32(ctx, v1632);
                                        let v1634 = C::u32_as_u64(ctx, v1633);
                                        let v1635 = constructor_splat_const(ctx, v1634, v624);
                                        let v1636 = constructor_output_reg(ctx, v1635);
                                        let v1637 = Some(v1636);
                                        // Rule at src/isa/aarch64/lower.isle line 2224.
                                        return v1637;
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1638,
                                    imm: v1639,
                                } => {
                                    if let &Opcode::F64const = v1638 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1640 = C::u64_from_ieee64(ctx, v1639);
                                        let v1641 = constructor_splat_const(ctx, v1640, v624);
                                        let v1642 = constructor_output_reg(ctx, v1641);
                                        let v1643 = Some(v1642);
                                        // Rule at src/isa/aarch64/lower.isle line 2227.
                                        return v1643;
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1644,
                                    imm: v1645,
                                } => {
                                    if let &Opcode::Iconst = v1644 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1646 = C::u64_from_imm64(ctx, v1645);
                                        let v1647 = constructor_splat_const(ctx, v1646, v624);
                                        let v1648 = constructor_output_reg(ctx, v1647);
                                        let v1649 = Some(v1648);
                                        // Rule at src/isa/aarch64/lower.isle line 2230.
                                        return v1649;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v293 = C::value_type(ctx, v292);
                        let v1621 = C::ty_int_ref_scalar_64(ctx, v293);
                        if let Some(v1622) = v1621 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v3 = C::value_type(ctx, v2);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v1623 = constructor_vec_dup(ctx, v339, v424);
                            let v1624 = constructor_output_reg(ctx, v1623);
                            let v1625 = Some(v1624);
                            // Rule at src/isa/aarch64/lower.isle line 2217.
                            return v1625;
                        }
                        let v1626 = C::ty_scalar_float(ctx, v293);
                        if let Some(v1627) = v1626 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v3 = C::value_type(ctx, v2);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v1628 = constructor_vec_dup_from_fpu(ctx, v339, v424, 0x0_u8);
                            let v1629 = constructor_output_reg(ctx, v1628);
                            let v1630 = Some(v1629);
                            // Rule at src/isa/aarch64/lower.isle line 2221.
                            return v1630;
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v2078 = &constructor_write_pinned_reg(ctx, v339);
                    let v2079 = constructor_side_effect(ctx, v2078);
                    let v2080 = Some(v2079);
                    // Rule at src/isa/aarch64/lower.isle line 2649.
                    return v2080;
                }
                &Opcode::VanyTrue => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v293 = C::value_type(ctx, v292);
                    let v399 = &constructor_vanytrue(ctx, v339, v293);
                    let v400 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v401 = constructor_with_flags(ctx, v399, v400);
                    let v402 = C::output(ctx, v401);
                    let v403 = Some(v402);
                    // Rule at src/isa/aarch64/lower.isle line 336.
                    return v403;
                }
                &Opcode::VallTrue => {
                    let v293 = C::value_type(ctx, v292);
                    let v357 = C::multi_lane(ctx, v293);
                    if let Some(v358) = v357 {
                        match v358.0 {
                            0x20_u32 => {
                                if v358.1 == 0x2_u32 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v370 = constructor_mov_from_vec(
                                        ctx,
                                        v339,
                                        0x0_u8,
                                        &ScalarSize::Size64,
                                    );
                                    let v372 = C::zero_reg(ctx);
                                    let v374 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v372,
                                        v370,
                                        0x20_u64,
                                    );
                                    let v376 = C::u8_into_uimm5(ctx, 0x0_u8);
                                    let v377 = false;
                                    let v378 = true;
                                    let v379 = C::nzcv(ctx, v377, v378, v377, v377);
                                    let v381 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v370,
                                        v376,
                                        v379,
                                        &Cond::Ne,
                                    );
                                    let v382 = constructor_with_flags(ctx, v374, v381);
                                    let v383 = C::output(ctx, v382);
                                    let v384 = Some(v383);
                                    // Rule at src/isa/aarch64/lower.isle line 310.
                                    return v384;
                                }
                            }
                            0x40_u32 => {
                                if v358.1 == 0x2_u32 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v361 = constructor_cmeq0(ctx, v339, &VectorSize::Size64x2);
                                    let v362 =
                                        constructor_addp(ctx, v361, v361, &VectorSize::Size64x2);
                                    let v363 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v362, v362);
                                    let v365 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v366 = constructor_with_flags(ctx, v363, v365);
                                    let v367 = C::output(ctx, v366);
                                    let v368 = Some(v367);
                                    // Rule at src/isa/aarch64/lower.isle line 304.
                                    return v368;
                                }
                            }
                            _ => {}
                        }
                    }
                    let v385 = C::lane_fits_in_32(ctx, v293);
                    if let Some(v386) = v385 {
                        let v387 = C::not_vec32x2(ctx, v386);
                        if let Some(v388) = v387 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v390 = &constructor_vector_size(ctx, v386);
                            let v391 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v339, v390);
                            let v392 =
                                constructor_mov_from_vec(ctx, v391, 0x0_u8, &ScalarSize::Size64);
                            let v393 = C::u8_into_imm12(ctx, 0x0_u8);
                            let v394 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v392, v393);
                            let v395 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v396 = constructor_with_flags(ctx, v394, v395);
                            let v397 = C::output(ctx, v396);
                            let v398 = Some(v397);
                            // Rule at src/isa/aarch64/lower.isle line 327.
                            return v398;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v293 = C::value_type(ctx, v292);
                    match v293 {
                        I8X16 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2161 =
                                constructor_sshr_vec_imm(ctx, v339, 0x7_u8, &VectorSize::Size8x16);
                            let v2163 = constructor_constant_f128(
                                ctx,
                                0x80402010080402018040201008040201_u128,
                            );
                            let v2164 =
                                constructor_and_vec(ctx, v2161, v2163, &VectorSize::Size8x16);
                            let v2166 = constructor_vec_extract(ctx, v2164, v2164, 0x8_u8);
                            let v2167 = constructor_zip1(ctx, v2164, v2166, &VectorSize::Size8x16);
                            let v2168 = constructor_addv(ctx, v2167, &VectorSize::Size16x8);
                            let v2169 =
                                constructor_mov_from_vec(ctx, v2168, 0x0_u8, &ScalarSize::Size16);
                            let v2170 = constructor_output_reg(ctx, v2169);
                            let v2171 = Some(v2170);
                            // Rule at src/isa/aarch64/lower.isle line 2728.
                            return v2171;
                        }
                        I16X8 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2173 =
                                constructor_sshr_vec_imm(ctx, v339, 0xf_u8, &VectorSize::Size16x8);
                            let v2175 = constructor_constant_f128(
                                ctx,
                                0x800040002000100008000400020001_u128,
                            );
                            let v2176 =
                                constructor_and_vec(ctx, v2173, v2175, &VectorSize::Size16x8);
                            let v2177 = constructor_addv(ctx, v2176, &VectorSize::Size16x8);
                            let v2178 =
                                constructor_mov_from_vec(ctx, v2177, 0x0_u8, &ScalarSize::Size16);
                            let v2179 = constructor_output_reg(ctx, v2178);
                            let v2180 = Some(v2179);
                            // Rule at src/isa/aarch64/lower.isle line 2752.
                            return v2180;
                        }
                        I32X4 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2182 =
                                constructor_sshr_vec_imm(ctx, v339, 0x1f_u8, &VectorSize::Size32x4);
                            let v2184 =
                                constructor_constant_f128(ctx, 0x8000000040000000200000001_u128);
                            let v2185 =
                                constructor_and_vec(ctx, v2182, v2184, &VectorSize::Size32x4);
                            let v2186 = constructor_addv(ctx, v2185, &VectorSize::Size32x4);
                            let v2187 =
                                constructor_mov_from_vec(ctx, v2186, 0x0_u8, &ScalarSize::Size32);
                            let v2188 = constructor_output_reg(ctx, v2187);
                            let v2189 = Some(v2188);
                            // Rule at src/isa/aarch64/lower.isle line 2765.
                            return v2189;
                        }
                        I64X2 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2190 =
                                constructor_mov_from_vec(ctx, v339, 0x1_u8, &ScalarSize::Size64);
                            let v2191 = C::put_in_reg(ctx, v292);
                            let v2192 =
                                constructor_mov_from_vec(ctx, v2191, 0x0_u8, &ScalarSize::Size64);
                            let v1032 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v2193 = constructor_lsr_imm(ctx, I64, v2190, v1032);
                            let v1352 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v2194 = constructor_lsr_imm(ctx, I64, v2192, v1352);
                            let v2195 = C::lshl_from_u64(ctx, I64, 0x1_u64);
                            let v2196 = v2195?;
                            let v2197 = constructor_add_shift(ctx, I64, v2194, v2193, v2196);
                            let v2198 = constructor_output_reg(ctx, v2197);
                            let v2199 = Some(v2198);
                            // Rule at src/isa/aarch64/lower.isle line 2778.
                            return v2199;
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v781 = constructor_value_regs_zero(ctx);
                            let v782 = C::put_in_regs(ctx, v292);
                            let v783 = constructor_sub_i128(ctx, v781, v782);
                            let v784 = C::output(ctx, v783);
                            let v785 = Some(v784);
                            // Rule at src/isa/aarch64/lower.isle line 798.
                            return v785;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v776 = C::zero_reg(ctx);
                            let v777 = C::put_in_reg(ctx, v292);
                            let v778 = constructor_sub(ctx, v42, v776, v777);
                            let v779 = constructor_output_reg(ctx, v778);
                            let v780 = Some(v779);
                            // Rule at src/isa/aarch64/lower.isle line 794.
                            return v780;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v786 = &constructor_vector_size(ctx, v762);
                            let v787 = constructor_neg(ctx, v339, v786);
                            let v788 = constructor_output_reg(ctx, v787);
                            let v789 = Some(v788);
                            // Rule at src/isa/aarch64/lower.isle line 802.
                            return v789;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v428 = constructor_abs(ctx, &OperandSize::Size64, v339);
                            let v429 = constructor_output_reg(ctx, v428);
                            let v430 = Some(v429);
                            // Rule at src/isa/aarch64/lower.isle line 366.
                            return v430;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v433 = constructor_put_in_reg_sext32(ctx, v292);
                            let v434 = constructor_abs(ctx, &OperandSize::Size32, v433);
                            let v435 = constructor_output_reg(ctx, v434);
                            let v436 = Some(v435);
                            // Rule at src/isa/aarch64/lower.isle line 369.
                            return v436;
                        }
                        if v3 == I128 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                            let v439 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v440 = constructor_asr_imm(ctx, I64, v437, v439);
                            let v441 = constructor_eor(ctx, I64, v437, v440);
                            let v442 = constructor_eor(ctx, I64, v295, v440);
                            let v443 = &constructor_sub_with_flags_paired(ctx, I64, v442, v440);
                            let v444 = &constructor_sbc_paired(ctx, I64, v441, v440);
                            let v445 = constructor_with_flags(ctx, v443, v444);
                            let v446 = C::output(ctx, v445);
                            let v447 = Some(v446);
                            // Rule at src/isa/aarch64/lower.isle line 379.
                            return v447;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v425 = constructor_vec_abs(ctx, v339, v424);
                            let v426 = constructor_output_reg(ctx, v425);
                            let v427 = Some(v426);
                            // Rule at src/isa/aarch64/lower.isle line 363.
                            return v427;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data(ctx, v302);
                            if let &InstructionData::Binary {
                                opcode: ref v307,
                                args: ref v308,
                            } = v306
                            {
                                match v307 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v1071 = constructor_i128_alu_bitop(
                                                ctx,
                                                &ALUOp::EorNot,
                                                I64,
                                                v309.0,
                                                v309.1,
                                            );
                                            let v1072 = C::output(ctx, v1071);
                                            let v1073 = Some(v1072);
                                            // Rule at src/isa/aarch64/lower.isle line 1341.
                                            return v1073;
                                        }
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v1068 = constructor_alu_rs_imm_logic(
                                                ctx,
                                                &ALUOp::EorNot,
                                                v42,
                                                v309.0,
                                                v309.1,
                                            );
                                            let v1069 = constructor_output_reg(ctx, v1068);
                                            let v1070 = Some(v1069);
                                            // Rule at src/isa/aarch64/lower.isle line 1339.
                                            return v1070;
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v317 = C::def_inst(ctx, v309.1);
                                            if let Some(v318) = v317 {
                                                let v319 = &C::inst_data(ctx, v318);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v1049,
                                                    imm: v1050,
                                                } = v319
                                                {
                                                    if let &Opcode::Iconst = v1049 {
                                                        let v1051 =
                                                            C::lshl_from_imm64(ctx, v42, v1050);
                                                        if let Some(v1052) = v1051 {
                                                            let v776 = C::zero_reg(ctx);
                                                            let v1053 = C::put_in_reg(ctx, v309.0);
                                                            let v1054 = constructor_orr_not_shift(
                                                                ctx, v42, v776, v1053, v1052,
                                                            );
                                                            let v1055 =
                                                                constructor_output_reg(ctx, v1054);
                                                            let v1056 = Some(v1055);
                                                            // Rule at src/isa/aarch64/lower.isle line 1320.
                                                            return v1056;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                            let v1057 = C::zero_reg(ctx);
                            let v1058 = constructor_orr_not(ctx, I64, v1057, v295);
                            let v1059 = C::zero_reg(ctx);
                            let v1060 = constructor_orr_not(ctx, I64, v1059, v437);
                            let v1061 = C::value_regs(ctx, v1058, v1060);
                            let v1062 = C::output(ctx, v1061);
                            let v1063 = Some(v1062);
                            // Rule at src/isa/aarch64/lower.isle line 1326.
                            return v1063;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v776 = C::zero_reg(ctx);
                            let v777 = C::put_in_reg(ctx, v292);
                            let v1046 = constructor_orr_not(ctx, v42, v776, v777);
                            let v1047 = constructor_output_reg(ctx, v1046);
                            let v1048 = Some(v1047);
                            // Rule at src/isa/aarch64/lower.isle line 1315.
                            return v1048;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v786 = &constructor_vector_size(ctx, v762);
                            let v1064 = constructor_not(ctx, v339, v786);
                            let v1065 = constructor_output_reg(ctx, v1064);
                            let v1066 = Some(v1065);
                            // Rule at src/isa/aarch64/lower.isle line 1335.
                            return v1066;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1290 = constructor_rbit(ctx, I32, v339);
                                let v1292 = C::imm_shift_from_u8(ctx, 0x18_u8);
                                let v1293 = constructor_lsr_imm(ctx, I32, v1290, v1292);
                                let v1294 = constructor_output_reg(ctx, v1293);
                                let v1295 = Some(v1294);
                                // Rule at src/isa/aarch64/lower.isle line 1849.
                                return v1295;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1290 = constructor_rbit(ctx, I32, v339);
                                let v1297 = C::imm_shift_from_u8(ctx, 0x10_u8);
                                let v1298 = constructor_lsr_imm(ctx, I32, v1290, v1297);
                                let v1299 = constructor_output_reg(ctx, v1298);
                                let v1300 = Some(v1299);
                                // Rule at src/isa/aarch64/lower.isle line 1855.
                                return v1300;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1301 = constructor_rbit(ctx, I64, v295);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1302 = constructor_rbit(ctx, I64, v297);
                                let v1303 = C::value_regs(ctx, v1302, v1301);
                                let v1304 = C::output(ctx, v1303);
                                let v1305 = Some(v1304);
                                // Rule at src/isa/aarch64/lower.isle line 1858.
                                return v1305;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1306 = constructor_rbit(ctx, v3, v339);
                        let v1307 = constructor_output_reg(ctx, v1306);
                        let v1308 = Some(v1307);
                        // Rule at src/isa/aarch64/lower.isle line 1864.
                        return v1308;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                let v1309 = constructor_a64_clz(ctx, I32, v353);
                                let v1310 = C::u8_into_imm12(ctx, 0x18_u8);
                                let v1311 = constructor_sub_imm(ctx, I32, v1309, v1310);
                                let v1312 = constructor_output_reg(ctx, v1311);
                                let v1313 = Some(v1312);
                                // Rule at src/isa/aarch64/lower.isle line 1870.
                                return v1313;
                            }
                            I16 => {
                                let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                let v1309 = constructor_a64_clz(ctx, I32, v353);
                                let v1314 = C::u8_into_imm12(ctx, 0x10_u8);
                                let v1315 = constructor_sub_imm(ctx, I32, v1309, v1314);
                                let v1316 = constructor_output_reg(ctx, v1315);
                                let v1317 = Some(v1316);
                                // Rule at src/isa/aarch64/lower.isle line 1873.
                                return v1317;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v1318 = constructor_lower_clz128(ctx, v294);
                                let v1319 = C::output(ctx, v1318);
                                let v1320 = Some(v1319);
                                // Rule at src/isa/aarch64/lower.isle line 1876.
                                return v1320;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1321 = constructor_a64_clz(ctx, v3, v339);
                        let v1322 = constructor_output_reg(ctx, v1321);
                        let v1323 = Some(v1322);
                        // Rule at src/isa/aarch64/lower.isle line 1879.
                        return v1323;
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                let v1342 = constructor_a64_cls(ctx, I32, v433);
                                let v1310 = C::u8_into_imm12(ctx, 0x18_u8);
                                let v1343 = constructor_sub_imm(ctx, I32, v1342, v1310);
                                let v1344 = constructor_output_reg(ctx, v1343);
                                let v1345 = Some(v1344);
                                // Rule at src/isa/aarch64/lower.isle line 1917.
                                return v1345;
                            }
                            I16 => {
                                let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                let v1342 = constructor_a64_cls(ctx, I32, v433);
                                let v1314 = C::u8_into_imm12(ctx, 0x10_u8);
                                let v1346 = constructor_sub_imm(ctx, I32, v1342, v1314);
                                let v1347 = constructor_output_reg(ctx, v1346);
                                let v1348 = Some(v1347);
                                // Rule at src/isa/aarch64/lower.isle line 1920.
                                return v1348;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1349 = constructor_a64_cls(ctx, I64, v295);
                                let v1350 = constructor_a64_cls(ctx, I64, v437);
                                let v1351 = constructor_eon(ctx, I64, v437, v295);
                                let v1352 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                let v1353 = constructor_lsr_imm(ctx, I64, v1351, v1352);
                                let v1354 = constructor_madd(ctx, I64, v1349, v1353, v1353);
                                let v1355 = C::u8_into_imm12(ctx, 0x3f_u8);
                                let v1356 = &constructor_cmp64_imm(ctx, v1350, v1355);
                                let v1357 = C::zero_reg(ctx);
                                let v1358 = &constructor_csel(ctx, &Cond::Eq, v1354, v1357);
                                let v1359 = constructor_with_flags_reg(ctx, v1356, v1358);
                                let v1360 = constructor_add(ctx, I64, v1359, v1350);
                                let v1361 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                                let v1362 = C::value_regs(ctx, v1360, v1361);
                                let v1363 = C::output(ctx, v1362);
                                let v1364 = Some(v1363);
                                // Rule at src/isa/aarch64/lower.isle line 1932.
                                return v1364;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1365 = constructor_a64_cls(ctx, v3, v339);
                        let v1366 = constructor_output_reg(ctx, v1365);
                        let v1367 = Some(v1366);
                        // Rule at src/isa/aarch64/lower.isle line 1946.
                        return v1367;
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1290 = constructor_rbit(ctx, I32, v339);
                                let v1325 = C::u64_into_imm_logic(ctx, I32, 0x800000_u64);
                                let v1326 = constructor_orr_imm(ctx, I32, v1290, v1325);
                                let v1327 = constructor_a64_clz(ctx, I32, v1326);
                                let v1328 = constructor_output_reg(ctx, v1327);
                                let v1329 = Some(v1328);
                                // Rule at src/isa/aarch64/lower.isle line 1900.
                                return v1329;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1290 = constructor_rbit(ctx, I32, v339);
                                let v1331 = C::u64_into_imm_logic(ctx, I32, 0x8000_u64);
                                let v1332 = constructor_orr_imm(ctx, I32, v1290, v1331);
                                let v1333 = constructor_a64_clz(ctx, I32, v1332);
                                let v1334 = constructor_output_reg(ctx, v1333);
                                let v1335 = Some(v1334);
                                // Rule at src/isa/aarch64/lower.isle line 1903.
                                return v1335;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1301 = constructor_rbit(ctx, I64, v295);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1302 = constructor_rbit(ctx, I64, v297);
                                let v1303 = C::value_regs(ctx, v1302, v1301);
                                let v1336 = constructor_lower_clz128(ctx, v1303);
                                let v1337 = C::output(ctx, v1336);
                                let v1338 = Some(v1337);
                                // Rule at src/isa/aarch64/lower.isle line 1906.
                                return v1338;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1306 = constructor_rbit(ctx, v3, v339);
                        let v1339 = constructor_a64_clz(ctx, v3, v1306);
                        let v1340 = constructor_output_reg(ctx, v1339);
                        let v1341 = Some(v1340);
                        // Rule at src/isa/aarch64/lower.isle line 1912.
                        return v1341;
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1369 = constructor_a64_rev16(ctx, I16, v339);
                                let v1370 = constructor_output_reg(ctx, v1369);
                                let v1371 = Some(v1370);
                                // Rule at src/isa/aarch64/lower.isle line 1951.
                                return v1371;
                            }
                            I32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1372 = constructor_a64_rev32(ctx, I32, v339);
                                let v1373 = constructor_output_reg(ctx, v1372);
                                let v1374 = Some(v1373);
                                // Rule at src/isa/aarch64/lower.isle line 1954.
                                return v1374;
                            }
                            I64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1375 = constructor_a64_rev64(ctx, I64, v339);
                                let v1376 = constructor_output_reg(ctx, v1375);
                                let v1377 = Some(v1376);
                                // Rule at src/isa/aarch64/lower.isle line 1957.
                                return v1377;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v1378 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1379 = constructor_a64_rev64(ctx, I64, v1378);
                                let v1380 = C::put_in_regs(ctx, v292);
                                let v1381 = C::value_regs_get(ctx, v1380, 0x0_usize);
                                let v1382 = constructor_a64_rev64(ctx, I64, v1381);
                                let v1383 = C::value_regs(ctx, v1379, v1382);
                                let v1384 = C::output(ctx, v1383);
                                let v1385 = Some(v1384);
                                // Rule at src/isa/aarch64/lower.isle line 1960.
                                return v1385;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1389 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1391 = constructor_vec_cnt(ctx, v1389, &VectorSize::Size8x8);
                                let v1393 = constructor_mov_from_vec(
                                    ctx,
                                    v1391,
                                    0x0_u8,
                                    &ScalarSize::Size8,
                                );
                                let v1394 = constructor_output_reg(ctx, v1393);
                                let v1395 = Some(v1394);
                                // Rule at src/isa/aarch64/lower.isle line 1990.
                                return v1395;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1389 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1391 = constructor_vec_cnt(ctx, v1389, &VectorSize::Size8x8);
                                let v1396 =
                                    constructor_addp(ctx, v1391, v1391, &VectorSize::Size8x8);
                                let v1397 = constructor_mov_from_vec(
                                    ctx,
                                    v1396,
                                    0x0_u8,
                                    &ScalarSize::Size8,
                                );
                                let v1398 = constructor_output_reg(ctx, v1397);
                                let v1399 = Some(v1398);
                                // Rule at src/isa/aarch64/lower.isle line 1996.
                                return v1399;
                            }
                            I32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1389 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1391 = constructor_vec_cnt(ctx, v1389, &VectorSize::Size8x8);
                                let v1400 = constructor_addv(ctx, v1391, &VectorSize::Size8x8);
                                let v1401 = constructor_mov_from_vec(
                                    ctx,
                                    v1400,
                                    0x0_u8,
                                    &ScalarSize::Size8,
                                );
                                let v1402 = constructor_output_reg(ctx, v1401);
                                let v1403 = Some(v1402);
                                // Rule at src/isa/aarch64/lower.isle line 2002.
                                return v1403;
                            }
                            I64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v348 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size64);
                                let v1404 = constructor_vec_cnt(ctx, v348, &VectorSize::Size8x8);
                                let v1405 = constructor_addv(ctx, v1404, &VectorSize::Size8x8);
                                let v1406 = constructor_mov_from_vec(
                                    ctx,
                                    v1405,
                                    0x0_u8,
                                    &ScalarSize::Size8,
                                );
                                let v1407 = constructor_output_reg(ctx, v1406);
                                let v1408 = Some(v1407);
                                // Rule at src/isa/aarch64/lower.isle line 2008.
                                return v1408;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1409 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size64);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1410 = constructor_mov_to_vec(
                                    ctx,
                                    v1409,
                                    v297,
                                    0x1_u8,
                                    &VectorSize::Size64x2,
                                );
                                let v1411 = constructor_vec_cnt(ctx, v1410, &VectorSize::Size8x16);
                                let v1412 = constructor_addv(ctx, v1411, &VectorSize::Size8x16);
                                let v1413 = constructor_mov_from_vec(
                                    ctx,
                                    v1412,
                                    0x0_u8,
                                    &ScalarSize::Size8,
                                );
                                let v1414 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                                let v1415 = C::value_regs(ctx, v1413, v1414);
                                let v1416 = C::output(ctx, v1415);
                                let v1417 = Some(v1416);
                                // Rule at src/isa/aarch64/lower.isle line 2014.
                                return v1417;
                            }
                            I8X16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1418 = constructor_vec_cnt(ctx, v339, &VectorSize::Size8x16);
                                let v1419 = constructor_output_reg(ctx, v1418);
                                let v1420 = Some(v1419);
                                // Rule at src/isa/aarch64/lower.isle line 2022.
                                return v1420;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v530 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v339, v529);
                            let v531 = constructor_output_reg(ctx, v530);
                            let v532 = Some(v531);
                            // Rule at src/isa/aarch64/lower.isle line 462.
                            return v532;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v525 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v339, v424);
                            let v526 = constructor_output_reg(ctx, v525);
                            let v527 = Some(v526);
                            // Rule at src/isa/aarch64/lower.isle line 459.
                            return v527;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v538 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v339, v529);
                            let v539 = constructor_output_reg(ctx, v538);
                            let v540 = Some(v539);
                            // Rule at src/isa/aarch64/lower.isle line 470.
                            return v540;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v534 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v339, v424);
                            let v535 = constructor_output_reg(ctx, v534);
                            let v536 = Some(v535);
                            // Rule at src/isa/aarch64/lower.isle line 467.
                            return v536;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v546 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v339, v529);
                            let v547 = constructor_output_reg(ctx, v546);
                            let v548 = Some(v547);
                            // Rule at src/isa/aarch64/lower.isle line 478.
                            return v548;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v542 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v339, v424);
                            let v543 = constructor_output_reg(ctx, v542);
                            let v544 = Some(v543);
                            // Rule at src/isa/aarch64/lower.isle line 475.
                            return v544;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v562 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v339);
                                let v563 = constructor_output_reg(ctx, v562);
                                let v564 = Some(v563);
                                // Rule at src/isa/aarch64/lower.isle line 496.
                                return v564;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v566 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v339);
                                let v567 = constructor_output_reg(ctx, v566);
                                let v568 = Some(v567);
                                // Rule at src/isa/aarch64/lower.isle line 499.
                                return v568;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v558 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v339, v424);
                            let v559 = constructor_output_reg(ctx, v558);
                            let v560 = Some(v559);
                            // Rule at src/isa/aarch64/lower.isle line 493.
                            return v560;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v574 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v339);
                                let v575 = constructor_output_reg(ctx, v574);
                                let v576 = Some(v575);
                                // Rule at src/isa/aarch64/lower.isle line 507.
                                return v576;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v578 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v339);
                                let v579 = constructor_output_reg(ctx, v578);
                                let v580 = Some(v579);
                                // Rule at src/isa/aarch64/lower.isle line 510.
                                return v580;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v570 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v339, v424);
                            let v571 = constructor_output_reg(ctx, v570);
                            let v572 = Some(v571);
                            // Rule at src/isa/aarch64/lower.isle line 504.
                            return v572;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v586 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v339);
                                let v587 = constructor_output_reg(ctx, v586);
                                let v588 = Some(v587);
                                // Rule at src/isa/aarch64/lower.isle line 518.
                                return v588;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v590 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v339);
                                let v591 = constructor_output_reg(ctx, v590);
                                let v592 = Some(v591);
                                // Rule at src/isa/aarch64/lower.isle line 521.
                                return v592;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v582 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v339, v424);
                            let v583 = constructor_output_reg(ctx, v582);
                            let v584 = Some(v583);
                            // Rule at src/isa/aarch64/lower.isle line 515.
                            return v584;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v598 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v339);
                                let v599 = constructor_output_reg(ctx, v598);
                                let v600 = Some(v599);
                                // Rule at src/isa/aarch64/lower.isle line 529.
                                return v600;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v602 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v339);
                                let v603 = constructor_output_reg(ctx, v602);
                                let v604 = Some(v603);
                                // Rule at src/isa/aarch64/lower.isle line 532.
                                return v604;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v594 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v339, v424);
                            let v595 = constructor_output_reg(ctx, v594);
                            let v596 = Some(v595);
                            // Rule at src/isa/aarch64/lower.isle line 526.
                            return v596;
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v341 = constructor_fpu_extend(ctx, v339, &ScalarSize::Size32);
                                let v342 = constructor_output_reg(ctx, v341);
                                let v343 = Some(v342);
                                // Rule at src/isa/aarch64/lower.isle line 281.
                                return v343;
                            }
                            F64X2 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v345 = constructor_fpu_extend(ctx, v339, &ScalarSize::Size64);
                                let v346 = constructor_output_reg(ctx, v345);
                                let v347 = Some(v346);
                                // Rule at src/isa/aarch64/lower.isle line 284.
                                return v347;
                            }
                            _ => {}
                        }
                    }
                    let v293 = C::value_type(ctx, v292);
                    if v293 == I64 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v348 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size64);
                        let v349 = constructor_output_reg(ctx, v348);
                        let v350 = Some(v349);
                        // Rule at src/isa/aarch64/lower.isle line 287.
                        return v350;
                    }
                    let v351 = C::int_fits_in_32(ctx, v293);
                    if let Some(v352) = v351 {
                        let v353 = constructor_put_in_reg_zext32(ctx, v292);
                        let v354 = constructor_mov_to_fpu(ctx, v353, &ScalarSize::Size32);
                        let v355 = constructor_output_reg(ctx, v354);
                        let v356 = Some(v355);
                        // Rule at src/isa/aarch64/lower.isle line 290.
                        return v356;
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v294 = C::put_in_regs(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v293 = C::value_type(ctx, v292);
                        let v1386 = constructor_lower_bmask(ctx, v3, v293, v294);
                        let v1387 = C::output(ctx, v1386);
                        let v1388 = Some(v1387);
                        // Rule at src/isa/aarch64/lower.isle line 1968.
                        return v1388;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1421 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1422) = v1421 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v1438 = constructor_output_reg(ctx, v295);
                            let v1439 = Some(v1438);
                            // Rule at src/isa/aarch64/lower.isle line 2041.
                            return v1439;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v1840 = &constructor_lane_size(ctx, v3);
                        let v377 = false;
                        let v1841 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v377, v1840);
                        let v1842 = constructor_output_reg(ctx, v1841);
                        let v1843 = Some(v1842);
                        // Rule at src/isa/aarch64/lower.isle line 2388.
                        return v1843;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1844 = &constructor_lane_size(ctx, v762);
                            let v378 = true;
                            let v1845 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v378, v1844);
                            let v1846 = constructor_output_reg(ctx, v1845);
                            let v1847 = Some(v1846);
                            // Rule at src/isa/aarch64/lower.isle line 2393.
                            return v1847;
                        }
                        let v1616 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1617) = v1616 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1849 = constructor_fpu_move_from_vec(
                                ctx,
                                v339,
                                0x1_u8,
                                &VectorSize::Size32x2,
                            );
                            let v1850 = &constructor_lane_size(ctx, v3);
                            let v377 = false;
                            let v1851 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v1849, v377, v1850);
                            let v1852 = constructor_output_reg(ctx, v1851);
                            let v1853 = Some(v1852);
                            // Rule at src/isa/aarch64/lower.isle line 2396.
                            return v1853;
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1840 = &constructor_lane_size(ctx, v3);
                        let v378 = true;
                        let v2400 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v378, v1840);
                        let v2401 = constructor_output_reg(ctx, v2400);
                        let v2402 = Some(v2401);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 91.
                        return v2402;
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v1840 = &constructor_lane_size(ctx, v3);
                        let v377 = false;
                        let v1855 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v377, v1840);
                        let v1856 = constructor_output_reg(ctx, v1855);
                        let v1857 = Some(v1856);
                        // Rule at src/isa/aarch64/lower.isle line 2403.
                        return v1857;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1844 = &constructor_lane_size(ctx, v762);
                            let v378 = true;
                            let v1858 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v378, v1844);
                            let v1859 = constructor_output_reg(ctx, v1858);
                            let v1860 = Some(v1859);
                            // Rule at src/isa/aarch64/lower.isle line 2408.
                            return v1860;
                        }
                        let v1616 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1617) = v1616 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1849 = constructor_fpu_move_from_vec(
                                ctx,
                                v339,
                                0x1_u8,
                                &VectorSize::Size32x2,
                            );
                            let v1850 = &constructor_lane_size(ctx, v3);
                            let v377 = false;
                            let v1861 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v1849, v377, v1850);
                            let v1862 = constructor_output_reg(ctx, v1861);
                            let v1863 = Some(v1862);
                            // Rule at src/isa/aarch64/lower.isle line 2411.
                            return v1863;
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1840 = &constructor_lane_size(ctx, v3);
                        let v378 = true;
                        let v2403 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v378, v1840);
                        let v2404 = constructor_output_reg(ctx, v2403);
                        let v2405 = Some(v2404);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 96.
                        return v2405;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data(ctx, v302);
                            match v306 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v975,
                                    arg: v976,
                                    imm: v977,
                                } => {
                                    if let &Opcode::Extractlane = v975 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v980 = C::put_in_reg(ctx, v976);
                                            let v978 = C::value_type(ctx, v976);
                                            let v981 = &constructor_lane_size(ctx, v978);
                                            let v979 = C::u8_from_uimm8(ctx, v977);
                                            let v982 =
                                                constructor_mov_from_vec(ctx, v980, v979, v981);
                                            let v983 = constructor_output_reg(ctx, v982);
                                            let v984 = Some(v983);
                                            // Rule at src/isa/aarch64/lower.isle line 1214.
                                            return v984;
                                        }
                                        if v3 == I128 {
                                            let v980 = C::put_in_reg(ctx, v976);
                                            let v978 = C::value_type(ctx, v976);
                                            let v981 = &constructor_lane_size(ctx, v978);
                                            let v979 = C::u8_from_uimm8(ctx, v977);
                                            let v982 =
                                                constructor_mov_from_vec(ctx, v980, v979, v981);
                                            let v1000 = constructor_imm(
                                                ctx,
                                                I64,
                                                &ImmExtend::Zero,
                                                0x0_u64,
                                            );
                                            let v1001 = C::value_regs(ctx, v982, v1000);
                                            let v1002 = C::output(ctx, v1001);
                                            let v1003 = Some(v1002);
                                            // Rule at src/isa/aarch64/lower.isle line 1233.
                                            return v1003;
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v1004,
                                    arg: v1005,
                                    flags: v1006,
                                    offset: v1007,
                                } => {
                                    if let &Opcode::Load = v1004 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v303 = C::first_result(ctx, v302);
                                            if let Some(v304) = v303 {
                                                let v988 = C::is_sinkable_inst(ctx, v292);
                                                if let Some(v989) = v988 {
                                                    let v1008 = C::sink_inst(ctx, v989);
                                                    let v305 = C::value_type(ctx, v304);
                                                    let v1009 = C::offset32_to_i32(ctx, v1007);
                                                    let v1010 =
                                                        &constructor_amode(ctx, v305, v1005, v1009);
                                                    let v1011 = constructor_aarch64_uload(
                                                        ctx, v305, v1010, v1006,
                                                    );
                                                    let v1012 = constructor_output_reg(ctx, v1011);
                                                    let v1013 = Some(v1012);
                                                    // Rule at src/isa/aarch64/lower.isle line 1239.
                                                    return v1013;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v985,
                                    arg: v986,
                                    flags: v987,
                                } => {
                                    if let &Opcode::AtomicLoad = v985 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v988 = C::is_sinkable_inst(ctx, v292);
                                            if let Some(v989) = v988 {
                                                let v990 = constructor_sink_atomic_load(ctx, v989);
                                                let v293 = C::value_type(ctx, v292);
                                                let v991 =
                                                    constructor_load_acquire(ctx, v293, v987, v990);
                                                let v992 = constructor_output_reg(ctx, v991);
                                                let v993 = Some(v992);
                                                // Rule at src/isa/aarch64/lower.isle line 1221.
                                                return v993;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v994 = constructor_put_in_reg_zext64(ctx, v292);
                            let v996 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                            let v997 = C::value_regs(ctx, v994, v996);
                            let v998 = C::output(ctx, v997);
                            let v999 = Some(v998);
                            // Rule at src/isa/aarch64/lower.isle line 1228.
                            return v999;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v377 = false;
                            let v293 = C::value_type(ctx, v292);
                            let v970 = C::ty_bits(ctx, v293);
                            let v971 = C::ty_bits(ctx, v42);
                            let v972 = constructor_extend(ctx, v339, v377, v970, v971);
                            let v973 = constructor_output_reg(ctx, v972);
                            let v974 = Some(v973);
                            // Rule at src/isa/aarch64/lower.isle line 1209.
                            return v974;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data(ctx, v302);
                            match v306 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v975,
                                    arg: v976,
                                    imm: v977,
                                } => {
                                    if let &Opcode::Extractlane = v975 {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v978 = C::value_type(ctx, v976);
                                            let v1028 = C::not_i64x2(ctx, v978);
                                            if let Some(v1029) = v1028 {
                                                let v980 = C::put_in_reg(ctx, v976);
                                                let v1017 = &constructor_vector_size(ctx, v978);
                                                let v1030 = &constructor_size_from_ty(ctx, I64);
                                                let v979 = C::u8_from_uimm8(ctx, v977);
                                                let v1031 = constructor_mov_from_vec_signed(
                                                    ctx, v980, v979, v1017, v1030,
                                                );
                                                let v1032 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                                let v1033 =
                                                    constructor_asr_imm(ctx, I64, v1031, v1032);
                                                let v1034 = C::value_regs(ctx, v1031, v1033);
                                                let v1035 = C::output(ctx, v1034);
                                                let v1036 = Some(v1035);
                                                // Rule at src/isa/aarch64/lower.isle line 1277.
                                                return v1036;
                                            }
                                            if v978 == I64X2 {
                                                let v980 = C::put_in_reg(ctx, v976);
                                                let v979 = C::u8_from_uimm8(ctx, v977);
                                                let v1037 = constructor_mov_from_vec(
                                                    ctx,
                                                    v980,
                                                    v979,
                                                    &ScalarSize::Size64,
                                                );
                                                let v1038 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                                let v1039 =
                                                    constructor_asr_imm(ctx, I64, v1037, v1038);
                                                let v1040 = C::value_regs(ctx, v1037, v1039);
                                                let v1041 = C::output(ctx, v1040);
                                                let v1042 = Some(v1041);
                                                // Rule at src/isa/aarch64/lower.isle line 1288.
                                                return v1042;
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v1004,
                                    arg: v1005,
                                    flags: v1006,
                                    offset: v1007,
                                } => {
                                    if let &Opcode::Load = v1004 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v303 = C::first_result(ctx, v302);
                                            if let Some(v304) = v303 {
                                                let v988 = C::is_sinkable_inst(ctx, v292);
                                                if let Some(v989) = v988 {
                                                    let v1008 = C::sink_inst(ctx, v989);
                                                    let v305 = C::value_type(ctx, v304);
                                                    let v1009 = C::offset32_to_i32(ctx, v1007);
                                                    let v1010 =
                                                        &constructor_amode(ctx, v305, v1005, v1009);
                                                    let v1043 = constructor_aarch64_sload(
                                                        ctx, v305, v1010, v1006,
                                                    );
                                                    let v1044 = constructor_output_reg(ctx, v1043);
                                                    let v1045 = Some(v1044);
                                                    // Rule at src/isa/aarch64/lower.isle line 1298.
                                                    return v1045;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v1022 = constructor_put_in_reg_sext64(ctx, v292);
                            let v1023 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v1024 = constructor_asr_imm(ctx, I64, v1022, v1023);
                            let v1025 = C::value_regs(ctx, v1022, v1024);
                            let v1026 = C::output(ctx, v1025);
                            let v1027 = Some(v1026);
                            // Rule at src/isa/aarch64/lower.isle line 1267.
                            return v1027;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            if let Some(v302) = v301 {
                                let v306 = &C::inst_data(ctx, v302);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v975,
                                    arg: v976,
                                    imm: v977,
                                } = v306
                                {
                                    if let &Opcode::Extractlane = v975 {
                                        let v980 = C::put_in_reg(ctx, v976);
                                        let v978 = C::value_type(ctx, v976);
                                        let v1017 = &constructor_vector_size(ctx, v978);
                                        let v1018 = &constructor_size_from_ty(ctx, v42);
                                        let v979 = C::u8_from_uimm8(ctx, v977);
                                        let v1019 = constructor_mov_from_vec_signed(
                                            ctx, v980, v979, v1017, v1018,
                                        );
                                        let v1020 = constructor_output_reg(ctx, v1019);
                                        let v1021 = Some(v1020);
                                        // Rule at src/isa/aarch64/lower.isle line 1258.
                                        return v1021;
                                    }
                                }
                            }
                            let v339 = C::put_in_reg(ctx, v292);
                            let v378 = true;
                            let v293 = C::value_type(ctx, v292);
                            let v970 = C::ty_bits(ctx, v293);
                            let v971 = C::ty_bits(ctx, v42);
                            let v1014 = constructor_extend(ctx, v339, v378, v970, v971);
                            let v1015 = constructor_output_reg(ctx, v1014);
                            let v1016 = Some(v1015);
                            // Rule at src/isa/aarch64/lower.isle line 1253.
                            return v1016;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v550 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v339,
                                &ScalarSize::Size32,
                            );
                            let v551 = constructor_output_reg(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src/isa/aarch64/lower.isle line 483.
                            return v552;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v554 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v339,
                                &ScalarSize::Size64,
                            );
                            let v555 = constructor_output_reg(ctx, v554);
                            let v556 = Some(v555);
                            // Rule at src/isa/aarch64/lower.isle line 488.
                            return v556;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v1798 = constructor_fcvtn(ctx, v339, &ScalarSize::Size32);
                    let v1799 = constructor_output_reg(ctx, v1798);
                    let v1800 = Some(v1799);
                    // Rule at src/isa/aarch64/lower.isle line 2337.
                    return v1800;
                }
                &Opcode::FvpromoteLow => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v377 = false;
                    let v2314 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v339, v377);
                    let v2315 = constructor_output_reg(ctx, v2314);
                    let v2316 = Some(v2315);
                    // Rule at src/isa/aarch64/lower.isle line 3049.
                    return v2316;
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v637 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v339,
                                        v377,
                                        F32,
                                        I64,
                                    );
                                    let v638 = constructor_output_reg(ctx, v637);
                                    let v639 = Some(v638);
                                    // Rule at src/isa/aarch64/lower.isle line 630.
                                    return v639;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v633 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v339,
                                        v377,
                                        F32,
                                        v432,
                                    );
                                    let v634 = constructor_output_reg(ctx, v633);
                                    let v635 = Some(v634);
                                    // Rule at src/isa/aarch64/lower.isle line 627.
                                    return v635;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v646 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v339,
                                        v377,
                                        F64,
                                        I64,
                                    );
                                    let v647 = constructor_output_reg(ctx, v646);
                                    let v648 = Some(v647);
                                    // Rule at src/isa/aarch64/lower.isle line 636.
                                    return v648;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v642 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v339,
                                        v377,
                                        F64,
                                        v432,
                                    );
                                    let v643 = constructor_output_reg(ctx, v642);
                                    let v644 = Some(v643);
                                    // Rule at src/isa/aarch64/lower.isle line 633.
                                    return v644;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v654 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v339,
                                        v378,
                                        F32,
                                        I64,
                                    );
                                    let v655 = constructor_output_reg(ctx, v654);
                                    let v656 = Some(v655);
                                    // Rule at src/isa/aarch64/lower.isle line 644.
                                    return v656;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v650 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v339,
                                        v378,
                                        F32,
                                        v432,
                                    );
                                    let v651 = constructor_output_reg(ctx, v650);
                                    let v652 = Some(v651);
                                    // Rule at src/isa/aarch64/lower.isle line 641.
                                    return v652;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v662 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v339,
                                        v378,
                                        F64,
                                        I64,
                                    );
                                    let v663 = constructor_output_reg(ctx, v662);
                                    let v664 = Some(v663);
                                    // Rule at src/isa/aarch64/lower.isle line 650.
                                    return v664;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v658 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v339,
                                        v378,
                                        F64,
                                        v432,
                                    );
                                    let v659 = constructor_output_reg(ctx, v658);
                                    let v660 = Some(v659);
                                    // Rule at src/isa/aarch64/lower.isle line 647.
                                    return v660;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v714 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v339,
                                        v377,
                                        I64,
                                    );
                                    let v715 = constructor_output_reg(ctx, v714);
                                    let v716 = Some(v715);
                                    // Rule at src/isa/aarch64/lower.isle line 704.
                                    return v716;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v711 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v339,
                                        v377,
                                        v432,
                                    );
                                    let v712 = constructor_output_reg(ctx, v711);
                                    let v713 = Some(v712);
                                    // Rule at src/isa/aarch64/lower.isle line 701.
                                    return v713;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v720 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v339,
                                        v377,
                                        I64,
                                    );
                                    let v721 = constructor_output_reg(ctx, v720);
                                    let v722 = Some(v721);
                                    // Rule at src/isa/aarch64/lower.isle line 710.
                                    return v722;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v717 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v339,
                                        v377,
                                        v432,
                                    );
                                    let v718 = constructor_output_reg(ctx, v717);
                                    let v719 = Some(v718);
                                    // Rule at src/isa/aarch64/lower.isle line 707.
                                    return v719;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v708 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v339,
                                                v424,
                                            );
                                            let v709 = constructor_output_reg(ctx, v708);
                                            let v710 = Some(v709);
                                            // Rule at src/isa/aarch64/lower.isle line 695.
                                            return v710;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v708 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v339,
                                                v424,
                                            );
                                            let v709 = constructor_output_reg(ctx, v708);
                                            let v710 = Some(v709);
                                            // Rule at src/isa/aarch64/lower.isle line 698.
                                            return v710;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v730 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v339,
                                        v378,
                                        I64,
                                    );
                                    let v731 = constructor_output_reg(ctx, v730);
                                    let v732 = Some(v731);
                                    // Rule at src/isa/aarch64/lower.isle line 724.
                                    return v732;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v727 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v339,
                                        v378,
                                        v432,
                                    );
                                    let v728 = constructor_output_reg(ctx, v727);
                                    let v729 = Some(v728);
                                    // Rule at src/isa/aarch64/lower.isle line 721.
                                    return v729;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v736 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v339,
                                        v378,
                                        I64,
                                    );
                                    let v737 = constructor_output_reg(ctx, v736);
                                    let v738 = Some(v737);
                                    // Rule at src/isa/aarch64/lower.isle line 730.
                                    return v738;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v733 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v339,
                                        v378,
                                        v432,
                                    );
                                    let v734 = constructor_output_reg(ctx, v733);
                                    let v735 = Some(v734);
                                    // Rule at src/isa/aarch64/lower.isle line 727.
                                    return v735;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v724 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v339,
                                                v424,
                                            );
                                            let v725 = constructor_output_reg(ctx, v724);
                                            let v726 = Some(v725);
                                            // Rule at src/isa/aarch64/lower.isle line 715.
                                            return v726;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v724 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v339,
                                                v424,
                                            );
                                            let v725 = constructor_output_reg(ctx, v724);
                                            let v726 = Some(v725);
                                            // Rule at src/isa/aarch64/lower.isle line 718.
                                            return v726;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v680 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v339);
                                    let v681 = constructor_output_reg(ctx, v680);
                                    let v682 = Some(v681);
                                    // Rule at src/isa/aarch64/lower.isle line 667.
                                    return v682;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                    let v672 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v353);
                                    let v673 = constructor_output_reg(ctx, v672);
                                    let v674 = Some(v673);
                                    // Rule at src/isa/aarch64/lower.isle line 661.
                                    return v674;
                                }
                            }
                            F64 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v684 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v339);
                                    let v685 = constructor_output_reg(ctx, v684);
                                    let v686 = Some(v685);
                                    // Rule at src/isa/aarch64/lower.isle line 670.
                                    return v686;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                    let v676 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v353);
                                    let v677 = constructor_output_reg(ctx, v676);
                                    let v678 = Some(v677);
                                    // Rule at src/isa/aarch64/lower.isle line 664.
                                    return v678;
                                }
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v666 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v339,
                                                v424,
                                            );
                                            let v667 = constructor_output_reg(ctx, v666);
                                            let v668 = Some(v667);
                                            // Rule at src/isa/aarch64/lower.isle line 655.
                                            return v668;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v666 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v339,
                                                v424,
                                            );
                                            let v667 = constructor_output_reg(ctx, v666);
                                            let v668 = Some(v667);
                                            // Rule at src/isa/aarch64/lower.isle line 658.
                                            return v668;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v700 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v339);
                                    let v701 = constructor_output_reg(ctx, v700);
                                    let v702 = Some(v701);
                                    // Rule at src/isa/aarch64/lower.isle line 687.
                                    return v702;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                    let v692 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v433);
                                    let v693 = constructor_output_reg(ctx, v692);
                                    let v694 = Some(v693);
                                    // Rule at src/isa/aarch64/lower.isle line 681.
                                    return v694;
                                }
                            }
                            F64 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v704 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v339);
                                    let v705 = constructor_output_reg(ctx, v704);
                                    let v706 = Some(v705);
                                    // Rule at src/isa/aarch64/lower.isle line 690.
                                    return v706;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                    let v696 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v433);
                                    let v697 = constructor_output_reg(ctx, v696);
                                    let v698 = Some(v697);
                                    // Rule at src/isa/aarch64/lower.isle line 684.
                                    return v698;
                                }
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v688 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v339,
                                                v424,
                                            );
                                            let v689 = constructor_output_reg(ctx, v688);
                                            let v690 = Some(v689);
                                            // Rule at src/isa/aarch64/lower.isle line 675.
                                            return v690;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v688 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v339,
                                                v424,
                                            );
                                            let v689 = constructor_output_reg(ctx, v688);
                                            let v690 = Some(v689);
                                            // Rule at src/isa/aarch64/lower.isle line 678.
                                            return v690;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v303 = C::first_result(ctx, v302);
                            if let Some(v304) = v303 {
                                let v305 = C::value_type(ctx, v304);
                                if v305 == I128 {
                                    let v306 = &C::inst_data(ctx, v302);
                                    if let &InstructionData::Binary {
                                        opcode: ref v307,
                                        args: ref v308,
                                    } = v306
                                    {
                                        if let &Opcode::Imul = v307 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v312 = C::def_inst(ctx, v309.0);
                                            if let Some(v313) = v312 {
                                                let v314 = &C::inst_data(ctx, v313);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v315,
                                                    arg: v316,
                                                } = v314
                                                {
                                                    match v315 {
                                                        &Opcode::Uextend => {
                                                            let v317 = C::def_inst(ctx, v309.1);
                                                            if let Some(v318) = v317 {
                                                                let v319 = &C::inst_data(ctx, v318);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v320,
                                                                    arg: v321,
                                                                } = v319
                                                                {
                                                                    if let &Opcode::Uextend = v320 {
                                                                        let v322 =
                                                                            C::value_is_unused(
                                                                                ctx, v2,
                                                                            );
                                                                        if v322 == true {
                                                                            let v38 =
                                                                                C::invalid_reg(ctx);
                                                                            let v323 = C::value_reg(
                                                                                ctx, v38,
                                                                            );
                                                                            let v324 = constructor_put_in_reg_zext64(ctx, v316);
                                                                            let v325 = constructor_put_in_reg_zext64(ctx, v321);
                                                                            let v326 =
                                                                                constructor_umulh(
                                                                                    ctx, I64, v324,
                                                                                    v325,
                                                                                );
                                                                            let v327 = C::value_reg(
                                                                                ctx, v326,
                                                                            );
                                                                            let v328 =
                                                                                C::output_pair(
                                                                                    ctx, v323, v327,
                                                                                );
                                                                            let v329 = Some(v328);
                                                                            // Rule at src/isa/aarch64/lower.isle line 262.
                                                                            return v329;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v317 = C::def_inst(ctx, v309.1);
                                                            if let Some(v318) = v317 {
                                                                let v319 = &C::inst_data(ctx, v318);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v320,
                                                                    arg: v321,
                                                                } = v319
                                                                {
                                                                    if let &Opcode::Sextend = v320 {
                                                                        let v322 =
                                                                            C::value_is_unused(
                                                                                ctx, v2,
                                                                            );
                                                                        if v322 == true {
                                                                            let v38 =
                                                                                C::invalid_reg(ctx);
                                                                            let v323 = C::value_reg(
                                                                                ctx, v38,
                                                                            );
                                                                            let v330 = constructor_put_in_reg_sext64(ctx, v316);
                                                                            let v331 = constructor_put_in_reg_sext64(ctx, v321);
                                                                            let v332 =
                                                                                constructor_smulh(
                                                                                    ctx, I64, v330,
                                                                                    v331,
                                                                                );
                                                                            let v333 = C::value_reg(
                                                                                ctx, v332,
                                                                            );
                                                                            let v334 =
                                                                                C::output_pair(
                                                                                    ctx, v323, v333,
                                                                                );
                                                                            let v335 = Some(v334);
                                                                            // Rule at src/isa/aarch64/lower.isle line 268.
                                                                            return v335;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v293 = C::value_type(ctx, v292);
                    if v293 == I128 {
                        let v294 = C::put_in_regs(ctx, v292);
                        let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                        let v296 = C::value_reg(ctx, v295);
                        let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                        let v298 = C::value_reg(ctx, v297);
                        let v299 = C::output_pair(ctx, v296, v298);
                        let v300 = Some(v299);
                        // Rule at src/isa/aarch64/lower.isle line 252.
                        return v300;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v30,
            constant_handle: v31,
        } => {
            match v30 {
                &Opcode::F128const => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F128 {
                            let v32 = C::u128_from_constant(ctx, v31);
                            if let Some(v33) = v32 {
                                let v34 = constructor_constant_f128(ctx, v33);
                                let v35 = constructor_output_reg(ctx, v34);
                                let v36 = Some(v35);
                                // Rule at src/isa/aarch64/lower.isle line 40.
                                return v36;
                            }
                        }
                    }
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1614 = C::u64_from_constant(ctx, v31);
                        if let Some(v1615) = v1614 {
                            let v3 = C::value_type(ctx, v2);
                            let v1616 = C::ty_vec64_ctor(ctx, v3);
                            if let Some(v1617) = v1616 {
                                let v1618 = constructor_constant_f64(ctx, v1615);
                                let v1619 = constructor_output_reg(ctx, v1618);
                                let v1620 = Some(v1619);
                                // Rule at src/isa/aarch64/lower.isle line 2211.
                                return v1620;
                            }
                        }
                        let v32 = C::u128_from_constant(ctx, v31);
                        if let Some(v33) = v32 {
                            let v3 = C::value_type(ctx, v2);
                            let v761 = C::ty_vec128(ctx, v3);
                            if let Some(v762) = v761 {
                                let v34 = constructor_constant_f128(ctx, v33);
                                let v35 = constructor_output_reg(ctx, v34);
                                let v36 = Some(v35);
                                // Rule at src/isa/aarch64/lower.isle line 2208.
                                return v36;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1881,
            global_value: v1882,
        } => {
            match v1881 {
                &Opcode::SymbolValue => {
                    let v1883 = C::symbol_value_data(ctx, v1882);
                    if let Some(v1884) = v1883 {
                        let v1888 = C::box_external_name(ctx, v1884.0);
                        let v1889 = constructor_load_ext_name(ctx, v1888, v1884.2);
                        let v1890 = constructor_output_reg(ctx, v1889);
                        let v1891 = Some(v1890);
                        // Rule at src/isa/aarch64/lower.isle line 2433.
                        return v1891;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1883 = C::symbol_value_data(ctx, v1882);
                        if let Some(v1884) = v1883 {
                            let v3 = C::value_type(ctx, v2);
                            let v2306 = &C::tls_model(ctx, v3);
                            match v2306 {
                                &TlsModel::ElfGd => {
                                    let v2307 = constructor_elf_tls_get_addr(ctx, v1884.0);
                                    let v2308 = constructor_output_reg(ctx, v2307);
                                    let v2309 = Some(v2308);
                                    // Rule at src/isa/aarch64/lower.isle line 3041.
                                    return v2309;
                                }
                                &TlsModel::Macho => {
                                    let v2310 = constructor_macho_tls_get_addr(ctx, v1884.0);
                                    let v2311 = constructor_output_reg(ctx, v2310);
                                    let v2312 = Some(v2311);
                                    // Rule at src/isa/aarch64/lower.isle line 3044.
                                    return v2312;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v12,
            imm: v13,
        } => {
            if let &Opcode::F16const = v12 {
                let v14 = C::u16_from_ieee16(ctx, v13);
                let v15 = constructor_constant_f16(ctx, v14);
                let v16 = constructor_output_reg(ctx, v15);
                let v17 = Some(v16);
                // Rule at src/isa/aarch64/lower.isle line 25.
                return v17;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u32_from_ieee32(ctx, v19);
                let v21 = constructor_constant_f32(ctx, v20);
                let v22 = constructor_output_reg(ctx, v21);
                let v23 = Some(v22);
                // Rule at src/isa/aarch64/lower.isle line 30.
                return v23;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v27 = constructor_constant_f64(ctx, v26);
                let v28 = constructor_output_reg(ctx, v27);
                let v29 = Some(v28);
                // Rule at src/isa/aarch64/lower.isle line 35.
                return v29;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    let v11 = Some(v10);
                    // Rule at src/isa/aarch64/lower.isle line 20.
                    return v11;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v147,
            arg: v148,
            table: v149,
        } => {
            if let &Opcode::BrTable = v147 {
                let v150 = C::jump_table_targets(ctx, arg1);
                if let Some(v151) = v150 {
                    let v154 = C::jump_table_size(ctx, &v151.1);
                    let v155 = C::targets_jt_space(ctx, &v151.1);
                    let v156 = &constructor_emit_island(ctx, v155);
                    let v157 = constructor_side_effect(ctx, v156);
                    let v158 = constructor_put_in_reg_zext32(ctx, v148);
                    let v159 = C::u32_as_u64(ctx, v154);
                    let v160 = constructor_br_table_impl(ctx, v159, v158, v151.0, &v151.1);
                    let v161 = Some(v160);
                    // Rule at src/isa/aarch64/lower.isle line 3117.
                    return v161;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v21 = C::two_targets(ctx, arg1);
                if let Some(v22) = v21 {
                    let v81 = C::def_inst(ctx, v3);
                    if let Some(v82) = v81 {
                        let v83 = &C::inst_data(ctx, v82);
                        match v83 {
                            &InstructionData::Binary {
                                opcode: ref v84,
                                args: ref v85,
                            } => {
                                if let &Opcode::Band = v84 {
                                    let v86 = C::unpack_value_array_2(ctx, v85);
                                    let v90 = C::def_inst(ctx, v86.1);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v93,
                                            imm: v94,
                                        } = v92
                                        {
                                            if let &Opcode::Iconst = v93 {
                                                let v89 = C::value_type(ctx, v86.0);
                                                let v95 = C::u64_from_imm64(ctx, v94);
                                                let v96 =
                                                    C::test_and_compare_bit_const(ctx, v89, v95);
                                                if let Some(v97) = v96 {
                                                    let v98 = C::branch_target(ctx, v22.0);
                                                    let v99 = C::branch_target(ctx, v22.1);
                                                    let v100 = C::put_in_reg(ctx, v86.0);
                                                    let v101 =
                                                        &constructor_tbnz(ctx, v98, v99, v100, v97);
                                                    let v102 =
                                                        constructor_emit_side_effect(ctx, v101);
                                                    let v103 = Some(v102);
                                                    // Rule at src/isa/aarch64/lower.isle line 3091.
                                                    return v103;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v104,
                                args: ref v105,
                                cond: ref v106,
                            } => {
                                if let &Opcode::Icmp = v104 {
                                    if let &IntCC::Equal = v106 {
                                        let v107 = C::unpack_value_array_2(ctx, v105);
                                        let v110 = C::def_inst(ctx, v107.0);
                                        if let Some(v111) = v110 {
                                            let v112 = &C::inst_data(ctx, v111);
                                            if let &InstructionData::Binary {
                                                opcode: ref v113,
                                                args: ref v114,
                                            } = v112
                                            {
                                                if let &Opcode::Band = v113 {
                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                    let v118 = C::value_type(ctx, v115.0);
                                                    let v119 = C::fits_in_64(ctx, v118);
                                                    if let Some(v120) = v119 {
                                                        let v121 = C::def_inst(ctx, v115.1);
                                                        if let Some(v122) = v121 {
                                                            let v123 = &C::inst_data(ctx, v122);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v124,
                                                                imm: v125,
                                                            } = v123
                                                            {
                                                                if let &Opcode::Iconst = v124 {
                                                                    let v127 =
                                                                        C::def_inst(ctx, v107.1);
                                                                    if let Some(v128) = v127 {
                                                                        let v129 = &C::inst_data(
                                                                            ctx, v128,
                                                                        );
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v130,
                                                                            imm: v131,
                                                                        } = v129 {
                                                                            if let &Opcode::Iconst = v130 {
                                                                                let v132 = C::u64_from_imm64(ctx, v131);
                                                                                if v132 == 0x0_u64 {
                                                                                    let v126 = C::u64_from_imm64(ctx, v125);
                                                                                    let v133 = C::test_and_compare_bit_const(ctx, v120, v126);
                                                                                    if let Some(v134) = v133 {
                                                                                        let v98 = C::branch_target(ctx, v22.0);
                                                                                        let v99 = C::branch_target(ctx, v22.1);
                                                                                        let v135 = C::put_in_reg(ctx, v115.0);
                                                                                        let v136 = &constructor_tbz(ctx, v98, v99, v135, v134);
                                                                                        let v137 = constructor_emit_side_effect(ctx, v136);
                                                                                        let v138 = Some(v137);
                                                                                        // Rule at src/isa/aarch64/lower.isle line 3097.
                                                                                        return v138;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v5 = C::maybe_uextend(ctx, v3);
                    if let Some(v6) = v5 {
                        let v7 = C::def_inst(ctx, v6);
                        if let Some(v8) = v7 {
                            let v9 = &C::inst_data(ctx, v8);
                            match v9 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v36,
                                    args: ref v37,
                                    cond: ref v38,
                                } => {
                                    if let &Opcode::Fcmp = v36 {
                                        let v39 = C::unpack_value_array_2(ctx, v37);
                                        let v42 = C::value_type(ctx, v39.0);
                                        let v43 = C::ty_scalar_float(ctx, v42);
                                        if let Some(v44) = v43 {
                                            let v45 = &C::fp_cond_code(ctx, v38);
                                            let v46 = &constructor_scalar_size(ctx, v44);
                                            let v47 = C::put_in_reg(ctx, v39.0);
                                            let v48 = C::put_in_reg(ctx, v39.1);
                                            let v49 = &constructor_fpu_cmp(ctx, v46, v47, v48);
                                            let v50 = C::branch_target(ctx, v22.0);
                                            let v51 = C::branch_target(ctx, v22.1);
                                            let v52 = C::cond_br_cond(ctx, v45);
                                            let v53 = &constructor_cond_br(ctx, v50, v51, v52);
                                            let v54 =
                                                &constructor_with_flags_side_effect(ctx, v49, v53);
                                            let v55 = constructor_emit_side_effect(ctx, v54);
                                            let v56 = Some(v55);
                                            // Rule at src/isa/aarch64/lower.isle line 3065.
                                            return v56;
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v10,
                                    args: ref v11,
                                    cond: ref v12,
                                } => {
                                    if let &Opcode::Icmp = v10 {
                                        let v13 = C::unpack_value_array_2(ctx, v11);
                                        let v16 = C::value_type(ctx, v13.0);
                                        let v25 = &constructor_lower_icmp_into_flags(
                                            ctx, v12, v13.0, v13.1, v16,
                                        );
                                        let v26 = &constructor_flags_and_cc_cc(ctx, v25);
                                        let v27 = &C::cond_code(ctx, v26);
                                        let v28 = &constructor_flags_and_cc_flags(ctx, v25);
                                        let v29 = C::branch_target(ctx, v22.0);
                                        let v30 = C::branch_target(ctx, v22.1);
                                        let v31 = C::cond_br_cond(ctx, v27);
                                        let v32 = &constructor_cond_br(ctx, v29, v30, v31);
                                        let v33 =
                                            &constructor_with_flags_side_effect(ctx, v28, v32);
                                        let v34 = constructor_emit_side_effect(ctx, v33);
                                        let v35 = Some(v34);
                                        // Rule at src/isa/aarch64/lower.isle line 3055.
                                        return v35;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v57 = C::value_type(ctx, v3);
                    if v57 == I128 {
                        let v58 = &constructor_flags_to_producesflags(ctx, v3);
                        let v59 = C::put_in_regs(ctx, v3);
                        let v61 = C::value_regs_get(ctx, v59, 0x0_usize);
                        let v63 = C::value_regs_get(ctx, v59, 0x1_usize);
                        let v65 = constructor_orr(ctx, I64, v61, v63);
                        let v50 = C::branch_target(ctx, v22.0);
                        let v51 = C::branch_target(ctx, v22.1);
                        let v66 = C::cond_br_not_zero(ctx, v65);
                        let v67 = &constructor_cond_br(ctx, v50, v51, v66);
                        let v68 = &constructor_with_flags_side_effect(ctx, v58, v67);
                        let v69 = constructor_emit_side_effect(ctx, v68);
                        let v70 = Some(v69);
                        // Rule at src/isa/aarch64/lower.isle line 3073.
                        return v70;
                    }
                    let v71 = C::ty_int_ref_scalar_64(ctx, v57);
                    if let Some(v72) = v71 {
                        let v58 = &constructor_flags_to_producesflags(ctx, v3);
                        let v73 = constructor_put_in_reg_zext64(ctx, v3);
                        let v74 = C::branch_target(ctx, v22.0);
                        let v75 = C::branch_target(ctx, v22.1);
                        let v76 = C::cond_br_not_zero(ctx, v73);
                        let v77 = &constructor_cond_br(ctx, v74, v75, v76);
                        let v78 = &constructor_with_flags_side_effect(ctx, v58, v77);
                        let v79 = constructor_emit_side_effect(ctx, v78);
                        let v80 = Some(v79);
                        // Rule at src/isa/aarch64/lower.isle line 3082.
                        return v80;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v139,
            destination: v140,
        } => {
            if let &Opcode::Jump = v139 {
                let v141 = C::single_target(ctx, arg1);
                if let Some(v142) = v141 {
                    let v143 = C::branch_target(ctx, v142);
                    let v144 = &constructor_aarch64_jump(ctx, v143);
                    let v145 = constructor_emit_side_effect(ctx, v144);
                    let v146 = Some(v145);
                    // Rule at src/isa/aarch64/lower.isle line 3110.
                    return v146;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(ctx: &mut C, arg0: Value) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3
        {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1_u64,
                    value: v5,
                };
                // Rule at src/isa/aarch64/lower.isle line 540.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0_u64,
        value: arg0,
    };
    // Rule at src/isa/aarch64/lower.isle line 541.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(ctx: &mut C, arg0: &IsFneg) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/lower.isle line 544.
        return v1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_fneg_neg", "src/isa/aarch64/lower.isle line 543"
    )
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(ctx: &mut C, arg0: &IsFneg) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/lower.isle line 547.
        return v2;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_fneg_value", "src/isa/aarch64/lower.isle line 546"
    )
}

// Generated as internal constructor for term fmadd_series.
pub fn constructor_fmadd_series<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: u64,
    arg3: Value,
    arg4: Value,
    arg5: Value,
) -> InstOutput {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            0x0_u64 => {
                match arg2 {
                    0x0_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v13 = constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v9, v10, v11, v12);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src/isa/aarch64/lower.isle line 551.
                        return v14;
                    }
                    0x1_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v22 = constructor_fpu_rrrr(ctx, &FPUOp3::NMSub, v9, v10, v11, v12);
                        let v23 = constructor_output_reg(ctx, v22);
                        // Rule at src/isa/aarch64/lower.isle line 557.
                        return v23;
                    }
                    _ => {}
                }
            }
            0x1_u64 => {
                match arg2 {
                    0x0_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v16 = constructor_fpu_rrrr(ctx, &FPUOp3::MSub, v9, v10, v11, v12);
                        let v17 = constructor_output_reg(ctx, v16);
                        // Rule at src/isa/aarch64/lower.isle line 553.
                        return v17;
                    }
                    0x1_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v19 = constructor_fpu_rrrr(ctx, &FPUOp3::NMAdd, v9, v10, v11, v12);
                        let v20 = constructor_output_reg(ctx, v19);
                        // Rule at src/isa/aarch64/lower.isle line 555.
                        return v20;
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fmadd_series", "src/isa/aarch64/lower.isle line 549"
    )
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 613.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 611.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4_u64);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v6, v68, arg4, v61.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 595.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4_u64);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v14, v46, arg4,
                                                                v38.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 592.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2_u64);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v6, v68, arg4, v79.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 601.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2_u64);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v14, v46, arg4, v71.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 598.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0_u8);
                // Rule at src/isa/aarch64/lower.isle line 582.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0_u8);
                // Rule at src/isa/aarch64/lower.isle line 580.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src/isa/aarch64/lower.isle line 575.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(ctx: &mut C, arg0: &VecALUModOp) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src/isa/aarch64/lower.isle line 617.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src/isa/aarch64/lower.isle line 618.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg_fmla", "src/isa/aarch64/lower.isle line 616"
    )
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src/isa/aarch64/lower.isle line 1048.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 1043.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src/isa/aarch64/lower.isle line 1098.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 1093.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20_u8);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20_u8);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src/isa/aarch64/lower.isle line 1164.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/lower.isle line 1156.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/aarch64/lower.isle line 1155"
    )
}

// Generated as internal constructor for term aarch64_uload.
pub fn constructor_aarch64_uload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_uload8(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1245.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_uload16(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1246.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_uload32(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1247.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_uload", "src/isa/aarch64/lower.isle line 1244"
    )
}

// Generated as internal constructor for term aarch64_sload.
pub fn constructor_aarch64_sload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_sload8(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1304.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_sload16(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1305.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_sload32(ctx, arg1, arg2);
            // Rule at src/isa/aarch64/lower.isle line 1306.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_sload", "src/isa/aarch64/lower.isle line 1303"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1436.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src/isa/aarch64/lower.isle line 1539.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1530.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1531.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src/isa/aarch64/lower.isle line 1519.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src/isa/aarch64/lower.isle line 1508"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1583.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3f_u8);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src/isa/aarch64/lower.isle line 1642.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src/isa/aarch64/lower.isle line 1783.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src/isa/aarch64/lower.isle line 1820.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6_u8);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src/isa/aarch64/lower.isle line 1888.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2801.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2799.
            return v2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_ext32", "src/isa/aarch64/lower.isle line 2798"
    )
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src/isa/aarch64/lower.isle line 2807.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0_usize);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1_usize);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src/isa/aarch64/lower.isle line 2836.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0_usize);
    let v9 = C::value_regs_get(ctx, v5, 0x1_usize);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0_usize);
    let v12 = C::value_regs_get(ctx, v10, 0x1_usize);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src/isa/aarch64/lower.isle line 2847.
    return v18;
}
