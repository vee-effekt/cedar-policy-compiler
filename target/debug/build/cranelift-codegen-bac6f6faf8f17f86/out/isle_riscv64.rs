// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /Users/lapwing/Desktop/cedar/cedar-policy-compiler/target/debug/build/cranelift-codegen-bac6f6faf8f17f86/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn stack_switch_model(&mut self) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn fpu_op_width_from_ty(&mut self, arg0: Type) -> FpuOPWidth;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_m(&mut self) -> bool;
    fn has_v(&mut self) -> bool;
    fn has_zfa(&mut self) -> bool;
    fn has_zfh(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn has_zicond(&mut self) -> bool;
    fn ty_supported(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_vec(&mut self, arg0: Type) -> Option<Type>;
    fn fli_constant_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn fli_constant_from_negated_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn i64_shift_for_lui(&mut self, arg0: i64) -> Option<(u64, Imm12)>;
    fn i64_shift(&mut self, arg0: i64) -> Option<(i64, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_add(&mut self, arg0: Imm12, arg1: i32) -> Option<Imm12>;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm20_from_u64(&mut self, arg0: u64) -> Option<Imm20>;
    fn imm20_from_i64(&mut self, arg0: i64) -> Option<Imm20>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_reg_offset_amode(&mut self, arg0: Reg, arg1: i64) -> AMode;
    fn gen_sp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_fp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_stack_slot_amode(&mut self, arg0: StackSlot, arg1: i64) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn int_compare_decompose(&mut self, arg0: IntegerCompare) -> (IntCC, XReg, XReg);
    fn label_to_br_target(&mut self, arg0: MachLabel) -> CondBrTarget;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &MachLabelSlice) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn is_non_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn is_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn zero_reg(&mut self) -> XReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn bclr_imm(&mut self, arg0: Type, arg1: u64) -> Option<Imm12>;
    fn bseti_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn binvi_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn fcvt_smax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_smin_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umin_bound(&mut self, arg0: Type, arg1: bool) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 20.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 388.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 434.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 453.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 461.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    Fli {
        ty: Type,
        imm: FliConstant,
        rd: WritableReg,
    },
    FpuRR {
        alu_op: FpuOPRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    TrapIf {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        label: MachLabel,
    },
    CondBr {
        taken: CondBrTarget,
        not_taken: CondBrTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    ElfTlsGetAddr {
        rd: WritableReg,
        name: BoxExternalName,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: WritableValueRegs,
        condition: IntegerCompare,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecMachLabel,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 349.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 374.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    Fmadd,
    Fmsub,
    Fnmsub,
    Fnmadd,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 381.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPWidth: defined at src/isa/riscv64/inst.isle line 406.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPWidth {
    S,
    D,
    H,
    Q,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 417.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    Fsqrt,
    Fclass,
    FcvtWFmt,
    FcvtWuFmt,
    FcvtLFmt,
    FcvtLuFmt,
    FcvtFmtW,
    FcvtFmtWu,
    FcvtFmtL,
    FcvtFmtLu,
    FmvXFmt,
    FmvFmtX,
    FcvtSD,
    FcvtDS,
    Fround,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 437.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flh,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 450.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsh,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 460.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
    CzeroEqz,
    CzeroNez,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 544.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    Fadd,
    Fsub,
    Fmul,
    Fdiv,
    Fsgnj,
    Fsgnjn,
    Fsgnjx,
    Fmin,
    Fmax,
    Feq,
    Flt,
    Fle,
    Fminm,
    Fmaxm,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 565.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type COpcodeSpace: defined at src/isa/riscv64/inst.isle line 607.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum COpcodeSpace {
    C0,
    C1,
    C2,
}

/// Internal type CrOp: defined at src/isa/riscv64/inst.isle line 614.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CrOp {
    CMv,
    CAdd,
    CJr,
    CJalr,
    CEbreak,
}

/// Internal type CaOp: defined at src/isa/riscv64/inst.isle line 625.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CaOp {
    CAnd,
    COr,
    CXor,
    CSub,
    CAddw,
    CSubw,
    CMul,
}

/// Internal type CjOp: defined at src/isa/riscv64/inst.isle line 636.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CjOp {
    CJ,
}

/// Internal type CiOp: defined at src/isa/riscv64/inst.isle line 641.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiOp {
    CAddi,
    CAddiw,
    CAddi16sp,
    CSlli,
    CLi,
    CLui,
    CLwsp,
    CLdsp,
    CFldsp,
}

/// Internal type CiwOp: defined at src/isa/riscv64/inst.isle line 654.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiwOp {
    CAddi4spn,
}

/// Internal type CbOp: defined at src/isa/riscv64/inst.isle line 659.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CbOp {
    CSrli,
    CSrai,
    CAndi,
}

/// Internal type CssOp: defined at src/isa/riscv64/inst.isle line 666.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CssOp {
    CSwsp,
    CSdsp,
    CFsdsp,
}

/// Internal type CsOp: defined at src/isa/riscv64/inst.isle line 673.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsOp {
    CSw,
    CSd,
    CFsd,
}

/// Internal type ClOp: defined at src/isa/riscv64/inst.isle line 680.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ClOp {
    CLw,
    CLd,
    CFld,
}

/// Internal type CsznOp: defined at src/isa/riscv64/inst.isle line 687.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsznOp {
    CNot,
    CZextb,
    CZexth,
    CZextw,
    CSextb,
    CSexth,
}

/// Internal type ZcbMemOp: defined at src/isa/riscv64/inst.isle line 700.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZcbMemOp {
    CLbu,
    CLhu,
    CLh,
    CSb,
    CSh,
}

/// Internal type CsrRegOP: defined at src/isa/riscv64/inst.isle line 709.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src/isa/riscv64/inst.isle line 718.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src/isa/riscv64/inst.isle line 728.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 734.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 754.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 2289.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type ZeroCond: defined at src/isa/riscv64/inst.isle line 2990.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type FloatCompare: defined at src/isa/riscv64/inst.isle line 3086.
#[derive(Clone, Debug)]
pub enum FloatCompare {
    One { r: XReg },
    Zero { r: XReg },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 1.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 14.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 27.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 37.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 49.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 63.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 78.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 90.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src/isa/riscv64/inst_vector.isle line 210.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src/isa/riscv64/inst_vector.isle line 215.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
    Vslide1upVX,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 265.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 272.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 304.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

/// Internal type IsFneg: defined at src/isa/riscv64/lower.isle line 1565.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result { negate: u64, value: Value },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src/prelude.isle line 461.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 85.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 109.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src/prelude_lower.isle line 163.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src/prelude_lower.isle line 174.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 185.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 184"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 190.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 189"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 195.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 194"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 400.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 402.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 405.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 399"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 415.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 420.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 422.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 424.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 419"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 449.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 448"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 479.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 480.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 478"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 485.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 487.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 484"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 500.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 494.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 493"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 531.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 537.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 549.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 565.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 572.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 585.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 525.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 517.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 515"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src/prelude_lower.isle line 603.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 610.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 621.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 626.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 631.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 636.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 641.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 619"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 650.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 658.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 667.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 675.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 684.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 744.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 752.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 761.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 769.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 778.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 697.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 705.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 714.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 722.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 731.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 791.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 799.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 808.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 816.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 825.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 837.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 845.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 862.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 854.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 870.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 879.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 647"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1082.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 820.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 825.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 840.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 850.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 855.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 860.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 881.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 886.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 901.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 911.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 916.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 921.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 943.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 948.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 963.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 973.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 978.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 983.
    return v2;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1048.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1054.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1060.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, v2);
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1066.
    return v6;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1072.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1078.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1084.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1090.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1096.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1102.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1108.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1114.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1120.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1126.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -1_i32);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1132.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1138.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1144.
    return v5;
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1150.
    return v6;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1156.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_sltu(ctx, v1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1162.
    return v2;
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1168.
    return v5;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1174.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 1_i32);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1180.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1190.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1196.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0_i32);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1202.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1208.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1214.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1220.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1226.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1232.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1238.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1244.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1254.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1260.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1266.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1272.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1278.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1284.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1290.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1299.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1305.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1311.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1317.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1323.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fadd, arg0, arg1, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1332.
    return v7;
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsub, arg0, arg1, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1336.
    return v7;
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmul, arg0, arg1, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1340.
    return v7;
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fdiv, arg0, arg1, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1344.
    return v7;
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg2);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::Fsqrt, arg0, arg1, v4);
    // Rule at src/isa/riscv64/inst.isle line 1348.
    return v5;
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fmadd, arg0, arg1, v6, v7, v8);
    // Rule at src/isa/riscv64/inst.isle line 1352.
    return v9;
}

// Generated as internal constructor for term rv_fmsub.
pub fn constructor_rv_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fmsub, arg0, arg1, v6, v7, v8);
    // Rule at src/isa/riscv64/inst.isle line 1356.
    return v9;
}

// Generated as internal constructor for term rv_fnmadd.
pub fn constructor_rv_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fnmadd, arg0, arg1, v6, v7, v8);
    // Rule at src/isa/riscv64/inst.isle line 1360.
    return v9;
}

// Generated as internal constructor for term rv_fnmsub.
pub fn constructor_rv_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fnmsub, arg0, arg1, v6, v7, v8);
    // Rule at src/isa/riscv64/inst.isle line 1364.
    return v9;
}

// Generated as internal constructor for term rv_fmvxh.
pub fn constructor_rv_fmvxh<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F16, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1368.
    return v5;
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F32, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1372.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F64, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1376.
    return v5;
}

// Generated as internal constructor for term rv_fmvhx.
pub fn constructor_rv_fmvhx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F16, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1380.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F32, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1384.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F64, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1388.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F64, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1392.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1396.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsw.
pub fn constructor_rv_fcvtsw<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtW, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1400.
    return v5;
}

// Generated as internal constructor for term rv_fcvtswu.
pub fn constructor_rv_fcvtswu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtWu, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1404.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdw.
pub fn constructor_rv_fcvtdw<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtW, F64, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1408.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdwu.
pub fn constructor_rv_fcvtdwu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtWu, F64, &FRM::RNE, v4);
    // Rule at src/isa/riscv64/inst.isle line 1412.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsl.
pub fn constructor_rv_fcvtsl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtL, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1416.
    return v5;
}

// Generated as internal constructor for term rv_fcvtslu.
pub fn constructor_rv_fcvtslu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtLu, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1420.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdl.
pub fn constructor_rv_fcvtdl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtL, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1424.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdlu.
pub fn constructor_rv_fcvtdlu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtLu, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1428.
    return v5;
}

// Generated as internal constructor for term rv_fcvtws.
pub fn constructor_rv_fcvtws<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWFmt, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1432.
    return v5;
}

// Generated as internal constructor for term rv_fcvtls.
pub fn constructor_rv_fcvtls<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLFmt, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1436.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwus.
pub fn constructor_rv_fcvtwus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWuFmt, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1440.
    return v5;
}

// Generated as internal constructor for term rv_fcvtlus.
pub fn constructor_rv_fcvtlus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLuFmt, F32, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1444.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwd.
pub fn constructor_rv_fcvtwd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWFmt, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1448.
    return v5;
}

// Generated as internal constructor for term rv_fcvtld.
pub fn constructor_rv_fcvtld<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLFmt, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1452.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwud.
pub fn constructor_rv_fcvtwud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWuFmt, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1456.
    return v5;
}

// Generated as internal constructor for term rv_fcvtlud.
pub fn constructor_rv_fcvtlud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLuFmt, F64, arg0, v4);
    // Rule at src/isa/riscv64/inst.isle line 1460.
    return v5;
}

// Generated as internal constructor for term rv_fcvtw.
pub fn constructor_rv_fcvtw<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1464.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwd(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1465.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtw", "src/isa/riscv64/inst.isle line 1463"
    )
}

// Generated as internal constructor for term rv_fcvtl.
pub fn constructor_rv_fcvtl<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtls(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1469.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtld(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1470.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtl", "src/isa/riscv64/inst.isle line 1468"
    )
}

// Generated as internal constructor for term rv_fcvtwu.
pub fn constructor_rv_fcvtwu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtwus(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1474.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwud(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1475.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtwu", "src/isa/riscv64/inst.isle line 1473"
    )
}

// Generated as internal constructor for term rv_fcvtlu.
pub fn constructor_rv_fcvtlu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtlus(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1479.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtlud(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1480.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtlu", "src/isa/riscv64/inst.isle line 1478"
    )
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnj, arg0, &FRM::RNE, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1486.
    return v7;
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnjn, arg0, &FRM::RTZ, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1492.
    return v7;
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1497.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnjx, arg0, &FRM::RDN, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1503.
    return v7;
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1508.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Feq, arg0, &FRM::RDN, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1512.
    return v7;
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Flt, arg0, &FRM::RTZ, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1516.
    return v7;
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Fle, arg0, &FRM::RNE, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1520.
    return v7;
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1525.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1530.
    return v3;
}

// Generated as internal constructor for term rv_fmin.
pub fn constructor_rv_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmin, arg0, &FRM::RNE, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1534.
    return v7;
}

// Generated as internal constructor for term rv_fmax.
pub fn constructor_rv_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmax, arg0, &FRM::RTZ, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1538.
    return v7;
}

// Generated as internal constructor for term rv_fminm.
pub fn constructor_rv_fminm<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fminm, arg0, &FRM::RDN, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1544.
    return v7;
}

// Generated as internal constructor for term rv_fmaxm.
pub fn constructor_rv_fmaxm<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmaxm, arg0, &FRM::RUP, v5, v6);
    // Rule at src/isa/riscv64/inst.isle line 1548.
    return v7;
}

// Generated as internal constructor for term rv_fround.
pub fn constructor_rv_fround<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg2);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::Fround, arg0, arg1, v4);
    // Rule at src/isa/riscv64/inst.isle line 1552.
    return v5;
}

// Generated as internal constructor for term rv_fli.
pub fn constructor_rv_fli<C: Context>(ctx: &mut C, arg0: Type, arg1: FliConstant) -> FReg {
    let v2 = constructor_temp_writable_freg(ctx);
    let v3 = C::writable_freg_to_writable_reg(ctx, v2);
    let v4 = MInst::Fli {
        ty: arg0,
        imm: arg1,
        rd: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_freg_to_freg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 1556.
    return v6;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1568.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_adduw(ctx, arg0, v1);
    // Rule at src/isa/riscv64/inst.isle line 1575.
    return v2;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1581.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        false => {
            let v8 = constructor_rv_not(ctx, arg1);
            let v9 = constructor_rv_and(ctx, arg0, v8);
            // Rule at src/isa/riscv64/inst.isle line 1593.
            return v9;
        }
        true => {
            let v4 = C::xreg_to_reg(ctx, arg0);
            let v5 = C::xreg_to_reg(ctx, arg1);
            let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v4, v5);
            let v7 = C::xreg_new(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 1590.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_andn", "src/isa/riscv64/inst.isle line 1589"
    )
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1600.
    return v6;
}

// Generated as internal constructor for term rv_xnor.
pub fn constructor_rv_xnor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xnor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1606.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1611.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1616.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1621.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1626.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1631.
    return v4;
}

// Generated as internal constructor for term rv_cpopw.
pub fn constructor_rv_cpopw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpopw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1636.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1641.
    return v6;
}

// Generated as internal constructor for term rv_maxu.
pub fn constructor_rv_maxu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Maxu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1646.
    return v6;
}

// Generated as internal constructor for term rv_min.
pub fn constructor_rv_min<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Min, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1651.
    return v6;
}

// Generated as internal constructor for term rv_minu.
pub fn constructor_rv_minu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Minu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1656.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1661.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1666.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1671.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1676.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1681.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1686.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1691.
    return v6;
}

// Generated as internal constructor for term rv_rori.
pub fn constructor_rv_rori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Rori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1696.
    return v5;
}

// Generated as internal constructor for term rv_roriw.
pub fn constructor_rv_roriw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Roriw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1701.
    return v5;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1706.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1714.
    return v4;
}

// Generated as internal constructor for term rv_bclr.
pub fn constructor_rv_bclr<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bclr, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1720.
    return v6;
}

// Generated as internal constructor for term rv_bclri.
pub fn constructor_rv_bclri<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bclri, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1724.
    return v5;
}

// Generated as internal constructor for term rv_bext.
pub fn constructor_rv_bext<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bext, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1728.
    return v6;
}

// Generated as internal constructor for term rv_bexti.
pub fn constructor_rv_bexti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bexti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1732.
    return v5;
}

// Generated as internal constructor for term rv_binv.
pub fn constructor_rv_binv<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Binv, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1736.
    return v6;
}

// Generated as internal constructor for term rv_binvi.
pub fn constructor_rv_binvi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Binvi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1740.
    return v5;
}

// Generated as internal constructor for term rv_bset.
pub fn constructor_rv_bset<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bset, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1744.
    return v6;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1749.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1756.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1761.
    return v6;
}

// Generated as internal constructor for term rv_czero_eqz.
pub fn constructor_rv_czero_eqz<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroEqz, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1772.
    return v6;
}

// Generated as internal constructor for term rv_czero_nez.
pub fn constructor_rv_czero_nez<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroNez, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1781.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(ctx: &mut C, arg0: &CSR, arg1: UImm5) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1789.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(ctx: &mut C, arg0: &FRM) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src/isa/riscv64/inst.isle line 1794.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(ctx: &mut C, arg0: &CSR, arg1: XReg) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1800.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(ctx: &mut C, arg0: XReg) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1805.
    return v2;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::ty_supported_float(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            F16 => {
                if arg1 == 0x0_u64 {
                    let v4 = C::zero_reg(ctx);
                    let v5 = C::xreg_to_reg(ctx, v4);
                    let v8 = constructor_gen_bitcast(ctx, v5, I16, F16);
                    // Rule at src/isa/riscv64/inst.isle line 1839.
                    return v8;
                }
            }
            F32 => {
                if arg1 == 0x0_u64 {
                    let v4 = C::zero_reg(ctx);
                    let v5 = C::xreg_to_reg(ctx, v4);
                    let v11 = constructor_gen_bitcast(ctx, v5, I32, F32);
                    // Rule at src/isa/riscv64/inst.isle line 1840.
                    return v11;
                }
            }
            F64 => {
                if arg1 == 0x0_u64 {
                    let v4 = C::zero_reg(ctx);
                    let v5 = C::xreg_to_reg(ctx, v4);
                    let v14 = constructor_gen_bitcast(ctx, v5, I64, F64);
                    // Rule at src/isa/riscv64/inst.isle line 1841.
                    return v14;
                }
            }
            _ => {}
        }
        let v15 = C::ty_32_or_64(ctx, v2);
        if let Some(v16) = v15 {
            let v17 = C::has_zfa(ctx);
            if v17 == true {
                let v18 = C::fli_constant_from_u64(ctx, v16, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_rv_fli(ctx, v16, v19);
                    let v21 = C::freg_to_reg(ctx, v20);
                    // Rule at src/isa/riscv64/inst.isle line 1844.
                    return v21;
                }
                let v22 = C::fli_constant_from_negated_u64(ctx, v16, arg1);
                if let Some(v23) = v22 {
                    let v24 = constructor_rv_fli(ctx, v16, v23);
                    let v25 = constructor_rv_fneg(ctx, v16, v24);
                    let v26 = C::freg_to_reg(ctx, v25);
                    // Rule at src/isa/riscv64/inst.isle line 1854.
                    return v26;
                }
            }
        }
        match v2 {
            F16 => {
                let v27 = constructor_imm(ctx, I16, arg1);
                let v28 = constructor_gen_bitcast(ctx, v27, I16, F16);
                // Rule at src/isa/riscv64/inst.isle line 1860.
                return v28;
            }
            F32 => {
                let v29 = constructor_imm(ctx, I32, arg1);
                let v30 = constructor_gen_bitcast(ctx, v29, I32, F32);
                // Rule at src/isa/riscv64/inst.isle line 1861.
                return v30;
            }
            F64 => {
                let v31 = constructor_imm(ctx, I64, arg1);
                let v32 = constructor_gen_bitcast(ctx, v31, I64, F64);
                // Rule at src/isa/riscv64/inst.isle line 1862.
                return v32;
            }
            _ => {}
        }
    }
    let v33 = C::ty_int(ctx, arg0);
    if let Some(v34) = v33 {
        let v35 = C::i64_sextend_u64(ctx, v34, arg1);
        let v36 = C::i64_generate_imm(ctx, v35);
        if let Some(v37) = v36 {
            let v40 = C::imm20_is_zero(ctx, v37.0);
            if let Some(v41) = v40 {
                let v4 = C::zero_reg(ctx);
                let v42 = constructor_rv_addi(ctx, v4, v37.1);
                let v43 = C::xreg_to_reg(ctx, v42);
                // Rule at src/isa/riscv64/inst.isle line 1865.
                return v43;
            }
            let v44 = C::imm12_is_zero(ctx, v37.1);
            if let Some(v45) = v44 {
                let v46 = constructor_rv_lui(ctx, v37.0);
                let v47 = C::xreg_to_reg(ctx, v46);
                // Rule at src/isa/riscv64/inst.isle line 1872.
                return v47;
            }
            let v46 = constructor_rv_lui(ctx, v37.0);
            let v48 = constructor_rv_addi(ctx, v46, v37.1);
            let v49 = C::xreg_to_reg(ctx, v48);
            // Rule at src/isa/riscv64/inst.isle line 1878.
            return v49;
        }
        let v50 = C::i64_shift_for_lui(ctx, v35);
        if let Some(v51) = v50 {
            let v54 = C::imm20_from_u64(ctx, v51.0);
            if let Some(v55) = v54 {
                let v56 = constructor_rv_lui(ctx, v55);
                let v57 = constructor_rv_slli(ctx, v56, v51.1);
                let v58 = C::xreg_to_reg(ctx, v57);
                // Rule at src/isa/riscv64/inst.isle line 1883.
                return v58;
            }
        }
        let v59 = C::i64_shift(ctx, v35);
        if let Some(v60) = v59 {
            let v63 = C::i64_generate_imm(ctx, v60.0);
            if let Some(v64) = v63 {
                let v67 = C::i64_as_u64(ctx, v60.0);
                let v68 = constructor_imm(ctx, v34, v67);
                let v69 = C::xreg_new(ctx, v68);
                let v70 = constructor_rv_slli(ctx, v69, v60.1);
                let v71 = C::xreg_to_reg(ctx, v70);
                // Rule at src/isa/riscv64/inst.isle line 1892.
                return v71;
            }
        }
        let v72 = C::emit_u64_le_const(ctx, arg1);
        let v73 = C::gen_const_amode(ctx, v72);
        let v75 = C::mem_flags_trusted(ctx);
        let v76 = constructor_gen_load(ctx, v73, &LoadOP::Ld, v75);
        // Rule at src/isa/riscv64/inst.isle line 1898.
        return v76;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/riscv64/inst.isle line 1835"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0_i32);
    // Rule at src/isa/riscv64/inst.isle line 1907.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::imm12_const(ctx, arg0);
    let v3 = constructor_rv_addi(ctx, v1, v2);
    let v4 = C::xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1914.
    return v4;
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src/isa/riscv64/inst.isle line 1944.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src/isa/riscv64/inst.isle line 1955.
        return v3;
    }
    None
}

// Generated as internal constructor for term imm5_from_negated_value.
pub fn constructor_imm5_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::imm5_from_i64(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = Some(v12);
                        // Rule at src/isa/riscv64/inst.isle line 1991.
                        return v13;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term replicated_imm5.
pub fn constructor_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::i64_from_iconst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = C::imm5_from_i64(ctx, v7);
                        if let Some(v9) = v8 {
                            let v10 = Some(v9);
                            // Rule at src/isa/riscv64/inst.isle line 1997.
                            return v10;
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v11,
                constant_handle: v12,
            } => {
                if let &Opcode::Vconst = v11 {
                    let v13 = C::u128_from_constant(ctx, v12);
                    if let Some(v14) = v13 {
                        let v15 = C::u128_replicated_u64(ctx, v14);
                        if let Some(v16) = v15 {
                            let v17 = C::u64_replicated_u32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::u32_replicated_u16(ctx, v18);
                                if let Some(v20) = v19 {
                                    let v21 = C::u16_replicated_u8(ctx, v20);
                                    if let Some(v22) = v21 {
                                        let v23 = C::u8_as_i8(ctx, v22);
                                        let v24 = C::i8_to_imm5(ctx, v23);
                                        if let Some(v25) = v24 {
                                            let v26 = Some(v25);
                                            // Rule at src/isa/riscv64/inst.isle line 1998.
                                            return v26;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term negated_replicated_imm5.
pub fn constructor_negated_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = constructor_imm5_from_negated_value(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = Some(v7);
                        // Rule at src/isa/riscv64/inst.isle line 2008.
                        return v8;
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v9,
                constant_handle: v10,
            } => {
                if let &Opcode::Vconst = v9 {
                    let v11 = C::u128_from_constant(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = C::u128_replicated_u64(ctx, v12);
                        if let Some(v14) = v13 {
                            let v15 = C::u64_replicated_u32(ctx, v14);
                            if let Some(v16) = v15 {
                                let v17 = C::u32_replicated_u16(ctx, v16);
                                if let Some(v18) = v17 {
                                    let v19 = C::u16_replicated_u8(ctx, v18);
                                    if let Some(v20) = v19 {
                                        let v21 = C::u8_as_i8(ctx, v20);
                                        let v22 = C::i8_neg(ctx, v21);
                                        let v23 = C::i8_to_imm5(ctx, v22);
                                        if let Some(v24) = v23 {
                                            let v25 = Some(v24);
                                            // Rule at src/isa/riscv64/inst.isle line 2011.
                                            return v25;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term replicated_uimm5.
pub fn constructor_replicated_uimm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<UImm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::def_inst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = &C::inst_data(ctx, v7);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v9,
                            imm: v10,
                        } = v8
                        {
                            if let &Opcode::Iconst = v9 {
                                let v11 = C::u64_from_imm64(ctx, v10);
                                let v12 = C::uimm5_from_u64(ctx, v11);
                                if let Some(v13) = v12 {
                                    let v14 = Some(v13);
                                    // Rule at src/isa/riscv64/inst.isle line 2023.
                                    return v14;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v15,
                constant_handle: v16,
            } => {
                if let &Opcode::Vconst = v15 {
                    let v17 = C::u128_from_constant(ctx, v16);
                    if let Some(v18) = v17 {
                        let v19 = C::u128_replicated_u64(ctx, v18);
                        if let Some(v20) = v19 {
                            let v21 = C::u64_replicated_u32(ctx, v20);
                            if let Some(v22) = v21 {
                                let v23 = C::u32_replicated_u16(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v25 = C::u16_replicated_u8(ctx, v24);
                                    if let Some(v26) = v25 {
                                        let v27 = C::uimm5_from_u8(ctx, v26);
                                        if let Some(v28) = v27 {
                                            let v29 = Some(v28);
                                            // Rule at src/isa/riscv64/inst.isle line 2024.
                                            return v29;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src/isa/riscv64/inst.isle line 2047.
        return v3;
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2056.
            return 0x7fc00000_u64;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2057.
            return 0x7ff8000000000000_u64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src/isa/riscv64/inst.isle line 2055"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> FReg {
    let v4 = constructor_temp_writable_freg(ctx);
    let v5 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v6 = C::writable_freg_to_writable_reg(ctx, v4);
    let v7 = MInst::FpuRR {
        alu_op: arg0.clone(),
        width: v5.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_freg_to_freg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2061.
    return v9;
}

// Generated as internal constructor for term fpu_rr_int.
pub fn constructor_fpu_rr_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = MInst::FpuRR {
        alu_op: arg0.clone(),
        width: v5.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2068.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2075.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> FReg {
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        width: v6.clone(),
        frm: arg2.clone(),
        rd: v7,
        rs1: arg3,
        rs2: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_freg_to_freg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2082.
    return v10;
}

// Generated as internal constructor for term fpu_rrr_int.
pub fn constructor_fpu_rrr_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> XReg {
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v8 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        width: v6.clone(),
        frm: arg2.clone(),
        rd: v7,
        rs1: arg3,
        rs2: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2089.
    return v10;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> FReg {
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v8 = C::writable_freg_to_writable_reg(ctx, v6);
    let v9 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        width: v7.clone(),
        frm: arg2.clone(),
        rd: v8,
        rs1: arg3,
        rs2: arg4,
        rs3: arg5,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_freg_to_freg(ctx, v6);
    // Rule at src/isa/riscv64/inst.isle line 2096.
    return v11;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2104.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2112.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(ctx: &mut C, arg0: Imm20) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui { rd: v2, imm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2121.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2128.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2135.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 2141.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 2142.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 2140"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 2146.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 2149.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1_usize);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1_usize);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 2154.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2159.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 2153"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 2172.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 2176.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2167.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v2 = false;
    let v4 = constructor_gen_cltz(ctx, v2, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2164.
    return v5;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2184.
    return v12;
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v25 = constructor_val_already_extended(ctx, &ExtendOp::Zero, arg0);
    if let Some(v26) = v25 {
        let v12 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2228.
        return v12;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = constructor_put_in_xreg(ctx, arg0);
            let v14 = C::imm12_const(ctx, 255_i32);
            let v15 = constructor_rv_andi(ctx, v12, v14);
            // Rule at src/isa/riscv64/inst.isle line 2200.
            return v15;
        }
        I16 => {
            let v20 = C::has_zbb(ctx);
            if v20 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v21 = constructor_rv_zexth(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2217.
                return v21;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_rv_packw(ctx, v12, v17);
                // Rule at src/isa/riscv64/inst.isle line 2207.
                return v18;
            }
        }
        I32 => {
            let v22 = C::has_zba(ctx);
            if v22 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v23 = constructor_rv_zextw(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2222.
                return v23;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v19 = constructor_rv_pack(ctx, v12, v17);
                // Rule at src/isa/riscv64/inst.isle line 2212.
                return v19;
            }
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40_u64, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srli(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2195.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 2192"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = constructor_val_already_extended(ctx, &ExtendOp::Signed, arg0);
    if let Some(v19) = v18 {
        let v13 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2257.
        return v13;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v14 = constructor_rv_sextb(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2241.
                return v14;
            }
        }
        I16 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v15 = constructor_rv_sexth(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2246.
                return v15;
            }
        }
        I32 => {
            let v13 = constructor_put_in_xreg(ctx, arg0);
            let v16 = constructor_rv_sextw(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2252.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40_u64, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srai(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2236.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 2233"
    )
}

// Generated as internal constructor for term val_already_extended.
pub fn constructor_val_already_extended<C: Context>(
    ctx: &mut C,
    arg0: &ExtendOp,
    arg1: Value,
) -> Option<bool> {
    let v5 = C::def_inst(ctx, arg1);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        match v7 {
            &InstructionData::Binary {
                opcode: ref v25,
                args: ref v26,
            } => {
                match v25 {
                    &Opcode::Iadd => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src/isa/riscv64/inst.isle line 2286.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src/isa/riscv64/inst.isle line 2287.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src/isa/riscv64/inst.isle line 2283.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src/isa/riscv64/inst.isle line 2284.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src/isa/riscv64/inst.isle line 2285.
                                    return v4;
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v3 = true;
                    let v4 = Some(v3);
                    // Rule at src/isa/riscv64/inst.isle line 2276.
                    return v4;
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v10,
                args: ref v11,
                cond: ref v12,
            } => {
                if let &Opcode::Icmp = v10 {
                    let v3 = true;
                    let v4 = Some(v3);
                    // Rule at src/isa/riscv64/inst.isle line 2275.
                    return v4;
                }
            }
            &InstructionData::Unary {
                opcode: ref v8,
                arg: v9,
            } => {
                match v8 {
                    &Opcode::Uextend => {
                        if let &ExtendOp::Zero = arg0 {
                            let v3 = true;
                            let v4 = Some(v3);
                            // Rule at src/isa/riscv64/inst.isle line 2270.
                            return v4;
                        }
                    }
                    &Opcode::Sextend => {
                        if let &ExtendOp::Signed = arg0 {
                            let v3 = true;
                            let v4 = Some(v3);
                            // Rule at src/isa/riscv64/inst.isle line 2271.
                            return v4;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v3 = true;
        let v4 = Some(v3);
        // Rule at src/isa/riscv64/inst.isle line 2266.
        return v4;
    }
    None
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg2, 0x0_usize);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v10 = C::value_regs_get(ctx, arg2, 0x1_usize);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 2296.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2305.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 2310.
    return v8;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xc_u64);
            match v4 {
                false => {
                    let v7 = C::u64_shl(ctx, 0x1_u64, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src/isa/riscv64/inst.isle line 2323.
                    return v12;
                }
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1_u64, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src/isa/riscv64/inst.isle line 2329.
                    return v17;
                }
                _ => {}
            }
        }
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src/isa/riscv64/inst.isle line 2334.
            return v21;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2322"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: XReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v7 = C::xreg_to_reg(ctx, arg0);
    let v9 = MInst::Popcnt {
        sum: v4,
        step: v5,
        tmp: v6,
        rs: v7,
        ty: I64,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2340.
    return v11;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> AMode {
    let v3 = C::def_inst(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = &C::inst_data(ctx, v4);
        if let &InstructionData::Binary {
            opcode: ref v6,
            args: ref v7,
        } = v5
        {
            if let &Opcode::Iadd = v6 {
                let v8 = C::unpack_value_array_2(ctx, v7);
                let v16 = C::i32_from_iconst(ctx, v8.0);
                if let Some(v17) = v16 {
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = constructor_amode_inner(ctx, v8.1, v19);
                        // Rule at src/isa/riscv64/inst.isle line 2382.
                        return v20;
                    }
                }
                let v11 = C::i32_from_iconst(ctx, v8.1);
                if let Some(v12) = v11 {
                    let v13 = C::s32_add_fallible(ctx, v12, arg1);
                    if let Some(v14) = v13 {
                        let v15 = constructor_amode_inner(ctx, v8.0, v14);
                        // Rule at src/isa/riscv64/inst.isle line 2379.
                        return v15;
                    }
                }
            }
        }
    }
    let v2 = constructor_amode_inner(ctx, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2372.
    return v2;
}

// Generated as internal constructor for term amode_inner.
pub fn constructor_amode_inner<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> AMode {
    let v8 = C::def_inst(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = &C::inst_data(ctx, v9);
        match v10 {
            &InstructionData::NullAry { opcode: ref v11 } => {
                match v11 {
                    &Opcode::GetFramePointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v12 = C::gen_fp_offset_amode(ctx, v6);
                        // Rule at src/isa/riscv64/inst.isle line 2395.
                        return v12;
                    }
                    &Opcode::GetStackPointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v13 = C::gen_sp_offset_amode(ctx, v6);
                        // Rule at src/isa/riscv64/inst.isle line 2399.
                        return v13;
                    }
                    _ => {}
                }
            }
            &InstructionData::StackLoad {
                opcode: ref v14,
                stack_slot: v15,
                offset: v16,
            } => {
                if let &Opcode::StackAddr = v14 {
                    let v17 = C::offset32_to_i32(ctx, v16);
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = C::i32_as_i64(ctx, v19);
                        let v21 = C::gen_stack_slot_amode(ctx, v15, v20);
                        // Rule at src/isa/riscv64/inst.isle line 2403.
                        return v21;
                    }
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::ty_addr64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v6 = C::i32_as_i64(ctx, arg1);
        let v7 = C::gen_reg_offset_amode(ctx, v5, v6);
        // Rule at src/isa/riscv64/inst.isle line 2391.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_inner", "src/isa/riscv64/inst.isle line 2388"
    )
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(ctx: &mut C, arg0: &LoadOP) -> Type {
    match arg0 {
        &LoadOP::Flh => {
            // Rule at src/isa/riscv64/inst.isle line 2430.
            return F64;
        }
        &LoadOP::Flw => {
            // Rule at src/isa/riscv64/inst.isle line 2429.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src/isa/riscv64/inst.isle line 2428.
            return F64;
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2431.
    return I64;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &LoadOP,
    arg2: MemFlags,
) -> Reg {
    let v3 = constructor_load_op_reg_type(ctx, arg1);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg1.clone(),
        flags: arg2,
        from: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2435.
    return v7;
}

// Generated as internal constructor for term gen_sunk_load.
pub fn constructor_gen_sunk_load<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: AMode,
    arg2: &LoadOP,
    arg3: MemFlags,
) -> Reg {
    let v4 = C::sink_inst(ctx, arg0);
    let v5 = constructor_gen_load(ctx, arg1, arg2, arg3);
    // Rule at src/isa/riscv64/inst.isle line 2445.
    return v5;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: MemFlags,
    arg2: Value,
) -> InstOutput {
    let v4 = C::def_inst(ctx, arg2);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::u64_from_imm64(ctx, v8);
                if v9 == 0x0_u64 {
                    let v3 = C::value_type(ctx, arg2);
                    let v10 = &C::store_op(ctx, v3);
                    let v11 = C::zero_reg(ctx);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    let v13 = constructor_rv_store(ctx, arg0, v10, arg1, v12);
                    // Rule at src/isa/riscv64/inst.isle line 2456.
                    return v13;
                }
            }
        }
    }
    let v3 = C::value_type(ctx, arg2);
    let v10 = &C::store_op(ctx, v3);
    let v14 = C::put_in_reg(ctx, arg2);
    let v15 = constructor_rv_store(ctx, arg0, v10, arg1, v14);
    // Rule at src/isa/riscv64/inst.isle line 2459.
    return v15;
}

// Generated as internal constructor for term rv_store.
pub fn constructor_rv_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &StoreOP,
    arg2: MemFlags,
    arg3: Reg,
) -> InstOutput {
    let v4 = MInst::Store {
        to: arg0,
        op: arg1.clone(),
        flags: arg2,
        src: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2467.
    return v6;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2480.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2489.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2496.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2504.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2512.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2520.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2528.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2537.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2545.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2553.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2492.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2500.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2508.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2516.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2524.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2533.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2541.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2549.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2557.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2487"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2566.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2575.
    return v5;
}

// Generated as internal constructor for term float_round_fcvt.
pub fn constructor_float_round_fcvt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            let v4 = constructor_rv_fcvtsw(ctx, arg1, v3);
            // Rule at src/isa/riscv64/inst.isle line 2583.
            return v4;
        }
        F64 => {
            let v5 = constructor_rv_fcvtld(ctx, arg1, arg2);
            let v6 = constructor_rv_fcvtdl(ctx, arg1, v5);
            // Rule at src/isa/riscv64/inst.isle line 2584.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_round_fcvt", "src/isa/riscv64/inst.isle line 2582"
    )
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
    arg2: Type,
) -> FReg {
    let v19 = C::has_zfa(ctx);
    if v19 == true {
        let v20 = constructor_rv_fround(ctx, arg2, arg0, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2610.
        return v20;
    }
    let v3 = constructor_float_int_max(ctx, arg2);
    let v4 = constructor_imm(ctx, arg2, v3);
    let v5 = C::freg_new(ctx, v4);
    let v6 = constructor_rv_fabs(ctx, arg2, arg1);
    let v7 = constructor_rv_flt(ctx, arg2, v6, v5);
    let v8 = constructor_float_round_fcvt(ctx, arg2, arg0, arg1);
    let v9 = constructor_rv_fsgnj(ctx, arg2, v8, arg1);
    let v10 = C::zero_reg(ctx);
    let v12 = constructor_float_int_of_same_size(ctx, arg2);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v13 = constructor_gen_bitcast(ctx, v11, v12, arg2);
    let v14 = C::freg_new(ctx, v13);
    let v16 = constructor_rv_fadd(ctx, arg2, &FRM::RNE, arg1, v14);
    let v17 = constructor_cmp_eqz(ctx, v7);
    let v18 = constructor_gen_select_freg(ctx, v17, v16, v9);
    // Rule at src/isa/riscv64/inst.isle line 2587.
    return v18;
}

// Generated as internal constructor for term gen_select_xreg.
pub fn constructor_gen_select_xreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    let v7 = &C::intcc_without_eq(ctx, &v1.0);
    match v7 {
        &IntCC::SignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v12 = constructor_rv_max(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2636.
                        return v12;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v10 = constructor_rv_min(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2626.
                        return v10;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v11 = constructor_rv_maxu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2631.
                        return v11;
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v9 = constructor_rv_minu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2621.
                        return v9;
                    }
                }
            }
        }
        _ => {}
    }
    let v17 = C::has_zicond(ctx);
    if v17 == true {
        let v13 = C::is_zero_reg(ctx, v1.1);
        if let Some(v14) = v13 {
            let v15 = C::is_non_zero_reg(ctx, v1.2);
            if let Some(v16) = v15 {
                let v18 = &C::intcc_swap_args(ctx, &v1.0);
                let v19 = C::int_compare(ctx, v18, v1.2, v1.1);
                let v20 = constructor_gen_select_xreg(ctx, v19, arg1, arg2);
                // Rule at src/isa/riscv64/inst.isle line 2647.
                return v20;
            }
        }
        let v21 = C::is_zero_reg(ctx, arg1);
        if let Some(v22) = v21 {
            let v23 = C::is_non_zero_reg(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = &C::intcc_complement(ctx, &v1.0);
                let v26 = C::int_compare(ctx, v25, v1.1, v1.2);
                let v27 = constructor_gen_select_xreg(ctx, v26, arg2, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2651.
                return v27;
            }
        }
        match &v1.0 {
            &IntCC::Equal => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                        // Rule at src/isa/riscv64/inst.isle line 2655.
                        return v32;
                    }
                    let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                    let v34 = constructor_rv_czero_eqz(ctx, arg2, v1.1);
                    let v35 = constructor_rv_or(ctx, v32, v34);
                    // Rule at src/isa/riscv64/inst.isle line 2663.
                    return v35;
                }
            }
            &IntCC::NotEqual => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                        // Rule at src/isa/riscv64/inst.isle line 2659.
                        return v33;
                    }
                    let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                    let v36 = constructor_rv_czero_nez(ctx, arg2, v1.1);
                    let v37 = constructor_rv_or(ctx, v33, v36);
                    // Rule at src/isa/riscv64/inst.isle line 2669.
                    return v37;
                }
            }
            _ => {}
        }
        let v38 = constructor_lower_int_compare(ctx, arg0);
        let v39 = constructor_cmp_nez(ctx, v38);
        let v40 = constructor_gen_select_xreg(ctx, v39, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2677.
        return v40;
    }
    let v41 = constructor_temp_writable_xreg(ctx);
    let v42 = C::writable_xreg_to_writable_reg(ctx, v41);
    let v43 = C::writable_value_reg(ctx, v42);
    let v44 = C::xreg_to_reg(ctx, arg1);
    let v45 = C::value_reg(ctx, v44);
    let v46 = C::xreg_to_reg(ctx, arg2);
    let v47 = C::value_reg(ctx, v46);
    let v48 = MInst::Select {
        dst: v43,
        condition: arg0,
        x: v45,
        y: v47,
    };
    let v49 = C::emit(ctx, &v48);
    let v50 = C::writable_reg_to_reg(ctx, v42);
    let v51 = C::xreg_new(ctx, v50);
    // Rule at src/isa/riscv64/inst.isle line 2683.
    return v51;
}

// Generated as internal constructor for term gen_select_vreg.
pub fn constructor_gen_select_vreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: VReg,
    arg2: VReg,
) -> VReg {
    let v3 = constructor_temp_writable_vreg(ctx);
    let v4 = C::writable_vreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::vreg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2691.
    return v13;
}

// Generated as internal constructor for term gen_select_freg.
pub fn constructor_gen_select_freg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v3 = constructor_temp_writable_freg(ctx);
    let v4 = C::writable_freg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::freg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2697.
    return v13;
}

// Generated as internal constructor for term gen_select_regs.
pub fn constructor_gen_select_regs<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_value_regs(ctx, v4, v6);
    let v8 = MInst::Select {
        dst: v7,
        condition: arg0,
        x: arg1,
        y: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/riscv64/inst.isle line 2703.
    return v12;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2712.
    return v3;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_external_name(ctx, arg0);
    let v4 = MInst::ElfTlsGetAddr { rd: v2, name: v3 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2727.
    return v6;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2738.
    return v11;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2747.
    return v20;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: CondBrTarget,
    arg2: CondBrTarget,
) -> SideEffectNoResult {
    let v3 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/riscv64/inst.isle line 2761.
    return v4;
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jal { label: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2767.
    return v2;
}

// Generated as internal constructor for term cmp_eqz.
pub fn constructor_cmp_eqz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2783.
    return v3;
}

// Generated as internal constructor for term cmp_nez.
pub fn constructor_cmp_nez<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2786.
    return v3;
}

// Generated as internal constructor for term cmp_eq.
pub fn constructor_cmp_eq<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2789.
    return v3;
}

// Generated as internal constructor for term cmp_ne.
pub fn constructor_cmp_ne<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2792.
    return v3;
}

// Generated as internal constructor for term cmp_lt.
pub fn constructor_cmp_lt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2795.
    return v3;
}

// Generated as internal constructor for term cmp_ltz.
pub fn constructor_cmp_ltz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2798.
    return v3;
}

// Generated as internal constructor for term cmp_gt.
pub fn constructor_cmp_gt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2801.
    return v3;
}

// Generated as internal constructor for term cmp_ge.
pub fn constructor_cmp_ge<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2804.
    return v3;
}

// Generated as internal constructor for term cmp_le.
pub fn constructor_cmp_le<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2807.
    return v3;
}

// Generated as internal constructor for term cmp_gtu.
pub fn constructor_cmp_gtu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2810.
    return v3;
}

// Generated as internal constructor for term cmp_geu.
pub fn constructor_cmp_geu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2813.
    return v3;
}

// Generated as internal constructor for term cmp_ltu.
pub fn constructor_cmp_ltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2816.
    return v3;
}

// Generated as internal constructor for term cmp_leu.
pub fn constructor_cmp_leu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2819.
    return v3;
}

// Generated as internal constructor for term is_nonzero_cmp.
pub fn constructor_is_nonzero_cmp<C: Context>(ctx: &mut C, arg0: Value) -> IntegerCompare {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v33,
                    args: ref v34,
                    cond: ref v35,
                } => {
                    if let &Opcode::Fcmp = v33 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let v40 = constructor_put_in_freg(ctx, v36.0);
                        let v41 = constructor_put_in_freg(ctx, v36.1);
                        let v39 = C::value_type(ctx, v36.0);
                        let v42 = &constructor_fcmp_to_float_compare(ctx, v35, v39, v40, v41);
                        let v43 = constructor_float_to_int_compare(ctx, v42);
                        // Rule at src/isa/riscv64/inst.isle line 2850.
                        return v43;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v26 = C::unpack_value_array_2(ctx, v24);
                        let v29 = C::value_type(ctx, v26.1);
                        let v30 = C::fits_in_64(ctx, v29);
                        if let Some(v31) = v30 {
                            let v32 = constructor_icmp_to_int_compare(ctx, v25, v26.0, v26.1);
                            // Rule at src/isa/riscv64/inst.isle line 2848.
                            return v32;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v6 = constructor_zext(ctx, arg0);
            let v7 = constructor_cmp_nez(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 2840.
            return v7;
        }
        I128 => {
            let v8 = C::put_in_regs(ctx, arg0);
            let v10 = C::value_regs_get(ctx, v8, 0x0_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::put_in_regs(ctx, arg0);
            let v14 = C::value_regs_get(ctx, v12, 0x1_usize);
            let v15 = C::xreg_new(ctx, v14);
            let v16 = constructor_rv_or(ctx, v11, v15);
            let v17 = constructor_cmp_nez(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2842.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_cmp_nez(ctx, v4);
        // Rule at src/isa/riscv64/inst.isle line 2838.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_nonzero_cmp", "src/isa/riscv64/inst.isle line 2827"
    )
}

// Generated as internal constructor for term icmp_to_int_compare.
pub fn constructor_icmp_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IntegerCompare {
    let v3 = C::value_type(ctx, arg2);
    if v3 == I128 {
        let v9 = C::put_in_regs(ctx, arg1);
        let v10 = C::put_in_regs(ctx, arg2);
        let v11 = constructor_lower_icmp_i128(ctx, arg0, v9, v10);
        let v12 = constructor_cmp_nez(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 2864.
        return v12;
    }
    let v4 = C::fits_in_64(ctx, v3);
    if let Some(v5) = v4 {
        let v6 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg1);
        let v7 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg2);
        let v8 = C::int_compare(ctx, arg0, v6, v7);
        // Rule at src/isa/riscv64/inst.isle line 2862.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_to_int_compare", "src/isa/riscv64/inst.isle line 2861"
    )
}

// Generated as internal constructor for term put_value_in_reg_for_icmp.
pub fn constructor_put_value_in_reg_for_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
) -> XReg {
    let v9 = C::i64_from_iconst(ctx, arg1);
    if let Some(v10) = v9 {
        if v10 == 0_i64 {
            let v11 = C::zero_reg(ctx);
            // Rule at src/isa/riscv64/inst.isle line 2894.
            return v11;
        }
    }
    match arg0 {
        &IntCC::Equal => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2888.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2884.
                return v5;
            }
        }
        &IntCC::NotEqual => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2890.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2886.
                return v5;
            }
        }
        _ => {}
    }
    let v3 = &C::signed_cond_code(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = constructor_sext(ctx, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2877.
        return v5;
    }
    let v2 = constructor_zext(ctx, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2875.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v26,
            arg: v27,
            table: v28,
        } => {
            if let &Opcode::BrTable = v26 {
                let v29 = C::put_in_reg(ctx, v27);
                let v30 = C::lower_br_table(ctx, v29, arg1);
                let v31 = Some(v30);
                // Rule at src/isa/riscv64/inst.isle line 2908.
                return v31;
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v16 = C::two_targets(ctx, arg1);
                if let Some(v17) = v16 {
                    let v20 = constructor_is_nonzero_cmp(ctx, v11);
                    let v21 = C::label_to_br_target(ctx, v17.0);
                    let v22 = C::label_to_br_target(ctx, v17.1);
                    let v23 = &constructor_cond_br(ctx, v20, v21, v22);
                    let v24 = constructor_emit_side_effect(ctx, v23);
                    let v25 = Some(v24);
                    // Rule at src/isa/riscv64/inst.isle line 2902.
                    return v25;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_rv_j(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src/isa/riscv64/inst.isle line 2899.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    let v2 = C::ty_supported_float(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = C::ty_32_or_64(ctx, v3);
        if let Some(v5) = v4 {
            let v7 = C::ty_supported_vec(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = C::freg_new(ctx, arg0);
                let v10 = C::vstate_from_type(ctx, v5);
                let v11 = constructor_rv_vfmv_sf(ctx, v9, v10);
                let v12 = C::vreg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2921.
                return v12;
            }
        }
    }
    let v13 = C::ty_supported_vec(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = C::ty_supported_float(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = C::ty_32_or_64(ctx, v16);
            if let Some(v18) = v17 {
                let v19 = C::vreg_new(ctx, arg0);
                let v20 = C::vstate_from_type(ctx, v18);
                let v21 = constructor_rv_vfmv_fs(ctx, v19, v20);
                let v22 = C::freg_to_reg(ctx, v21);
                // Rule at src/isa/riscv64/inst.isle line 2922.
                return v22;
            }
        }
    }
    let v7 = C::ty_supported_vec(ctx, arg2);
    if let Some(v8) = v7 {
        let v23 = C::ty_int_ref_scalar_64_extract(ctx, arg1);
        if let Some(v24) = v23 {
            let v25 = C::xreg_new(ctx, arg0);
            let v26 = C::vstate_from_type(ctx, v24);
            let v27 = constructor_rv_vmv_sx(ctx, v25, v26);
            let v28 = C::vreg_to_reg(ctx, v27);
            // Rule at src/isa/riscv64/inst.isle line 2924.
            return v28;
        }
    }
    if let Some(v14) = v13 {
        let v29 = C::ty_int_ref_scalar_64_extract(ctx, arg2);
        if let Some(v30) = v29 {
            let v19 = C::vreg_new(ctx, arg0);
            let v31 = C::vstate_from_type(ctx, v30);
            let v32 = constructor_rv_vmv_xs(ctx, v19, v31);
            let v33 = C::xreg_to_reg(ctx, v32);
            // Rule at src/isa/riscv64/inst.isle line 2925.
            return v33;
        }
    }
    match arg1 {
        I16 => {
            if arg2 == F16 {
                let v25 = C::xreg_new(ctx, arg0);
                let v40 = constructor_rv_fmvhx(ctx, v25);
                let v41 = C::freg_to_reg(ctx, v40);
                // Rule at src/isa/riscv64/inst.isle line 2929.
                return v41;
            }
        }
        I32 => {
            if arg2 == F32 {
                let v25 = C::xreg_new(ctx, arg0);
                let v42 = constructor_rv_fmvwx(ctx, v25);
                let v43 = C::freg_to_reg(ctx, v42);
                // Rule at src/isa/riscv64/inst.isle line 2930.
                return v43;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v25 = C::xreg_new(ctx, arg0);
                let v44 = constructor_rv_fmvdx(ctx, v25);
                let v45 = C::freg_to_reg(ctx, v44);
                // Rule at src/isa/riscv64/inst.isle line 2931.
                return v45;
            }
        }
        F16 => {
            if arg2 == I16 {
                let v9 = C::freg_new(ctx, arg0);
                let v34 = constructor_rv_fmvxh(ctx, v9);
                let v35 = C::xreg_to_reg(ctx, v34);
                // Rule at src/isa/riscv64/inst.isle line 2926.
                return v35;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v9 = C::freg_new(ctx, arg0);
                let v36 = constructor_rv_fmvxw(ctx, v9);
                let v37 = C::xreg_to_reg(ctx, v36);
                // Rule at src/isa/riscv64/inst.isle line 2927.
                return v37;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v9 = C::freg_new(ctx, arg0);
                let v38 = constructor_rv_fmvxd(ctx, v9);
                let v39 = C::xreg_to_reg(ctx, v38);
                // Rule at src/isa/riscv64/inst.isle line 2928.
                return v39;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2932.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2935.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2936.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2934"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2939.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2940.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2938"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2943.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2944.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2942"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2953.
            return v16;
        }
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2948.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2947"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2970.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2966.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2965"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIf {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2976.
    return v8;
}

// Generated as internal constructor for term gen_trapnz.
pub fn constructor_gen_trapnz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::NotEqual, arg0, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2981.
    return v4;
}

// Generated as internal constructor for term gen_trapz.
pub fn constructor_gen_trapz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2986.
    return v4;
}

// Generated as internal constructor for term zero_cond_to_cc.
pub fn constructor_zero_cond_to_cc<C: Context>(ctx: &mut C, arg0: &ZeroCond) -> IntCC {
    match arg0 {
        &ZeroCond::Zero => {
            // Rule at src/isa/riscv64/inst.isle line 2996.
            return IntCC::Equal;
        }
        &ZeroCond::NonZero => {
            // Rule at src/isa/riscv64/inst.isle line 2997.
            return IntCC::NotEqual;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zero_cond_to_cc", "src/isa/riscv64/inst.isle line 2995"
    )
}

// Generated as internal constructor for term gen_trapif_val_i128.
pub fn constructor_gen_trapif_val_i128<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: ValueRegs,
    arg2: &TrapCode,
) -> InstOutput {
    let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v5 = C::xreg_new(ctx, v4);
    let v7 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v8 = C::xreg_new(ctx, v7);
    let v9 = constructor_rv_or(ctx, v8, v5);
    let v10 = &constructor_zero_cond_to_cc(ctx, arg0);
    let v11 = C::zero_reg(ctx);
    let v12 = constructor_gen_trapif(ctx, v10, v9, v11, arg2);
    // Rule at src/isa/riscv64/inst.isle line 3001.
    return v12;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 3018.
    return v4;
}

// Generated as internal constructor for term gen_bmask.
pub fn constructor_gen_bmask<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v31,
                    args: ref v32,
                    cond: ref v33,
                } => {
                    if let &Opcode::Fcmp = v31 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 3042.
                        return v30;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 3041.
                        return v30;
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    if v1 == I128 {
        let v7 = C::put_in_regs(ctx, arg0);
        let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
        let v10 = C::xreg_new(ctx, v9);
        let v11 = C::put_in_regs(ctx, arg0);
        let v13 = C::value_regs_get(ctx, v11, 0x1_usize);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v10, v14);
        let v16 = constructor_rv_snez(ctx, v15);
        let v17 = constructor_rv_neg(ctx, v16);
        // Rule at src/isa/riscv64/inst.isle line 3033.
        return v17;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_rv_snez(ctx, v4);
        let v6 = constructor_rv_neg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 3030.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bmask", "src/isa/riscv64/inst.isle line 3026"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(ctx: &mut C, arg0: Value, arg1: Type) -> ValueRegs {
    if arg1 == I128 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v7 = C::value_regs(ctx, v5, v5);
        // Rule at src/isa/riscv64/inst.isle line 3047.
        return v7;
    }
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v6 = C::value_reg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 3045.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 3044"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 3056.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0_u64);
    let v3 = constructor_imm(ctx, I64, 0x0_u64);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 3077.
    return v4;
}

// Generated as internal constructor for term float_compare_invert.
pub fn constructor_float_compare_invert<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> FloatCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = FloatCompare::Zero { r: v1 };
            // Rule at src/isa/riscv64/inst.isle line 3094.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = FloatCompare::One { r: v3 };
            // Rule at src/isa/riscv64/inst.isle line 3095.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_compare_invert", "src/isa/riscv64/inst.isle line 3093"
    )
}

// Generated as internal constructor for term float_to_int_compare.
pub fn constructor_float_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> IntegerCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = constructor_cmp_nez(ctx, v1);
            // Rule at src/isa/riscv64/inst.isle line 3098.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = constructor_cmp_eqz(ctx, v3);
            // Rule at src/isa/riscv64/inst.isle line 3099.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_to_int_compare", "src/isa/riscv64/inst.isle line 3097"
    )
}

// Generated as internal constructor for term fcmp_to_float_compare.
pub fn constructor_fcmp_to_float_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> FloatCompare {
    match arg0 {
        &FloatCC::Equal => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v13 = FloatCompare::One { r: v12 };
            // Rule at src/isa/riscv64/inst.isle line 3120.
            return v13;
        }
        &FloatCC::GreaterThan => {
            let v22 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v23 = FloatCompare::One { r: v22 };
            // Rule at src/isa/riscv64/inst.isle line 3141.
            return v23;
        }
        &FloatCC::GreaterThanOrEqual => {
            let v24 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v25 = FloatCompare::One { r: v24 };
            // Rule at src/isa/riscv64/inst.isle line 3145.
            return v25;
        }
        &FloatCC::LessThan => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v19 = FloatCompare::One { r: v15 };
            // Rule at src/isa/riscv64/inst.isle line 3133.
            return v19;
        }
        &FloatCC::LessThanOrEqual => {
            let v20 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v21 = FloatCompare::One { r: v20 };
            // Rule at src/isa/riscv64/inst.isle line 3137.
            return v21;
        }
        &FloatCC::NotEqual => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v14 = FloatCompare::Zero { r: v12 };
            // Rule at src/isa/riscv64/inst.isle line 3125.
            return v14;
        }
        &FloatCC::Ordered => {
            let v8 = constructor_is_not_nan(ctx, arg1, arg2);
            let v9 = constructor_is_not_nan(ctx, arg1, arg3);
            let v10 = constructor_rv_and(ctx, v8, v9);
            let v11 = FloatCompare::One { r: v10 };
            // Rule at src/isa/riscv64/inst.isle line 3113.
            return v11;
        }
        &FloatCC::OrderedNotEqual => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v17 = constructor_rv_or(ctx, v15, v16);
            let v18 = FloatCompare::One { r: v17 };
            // Rule at src/isa/riscv64/inst.isle line 3129.
            return v18;
        }
        _ => {}
    }
    let v4 = C::floatcc_unordered(ctx, arg0);
    if v4 == true {
        let v5 = &C::floatcc_complement(ctx, arg0);
        let v6 = &constructor_fcmp_to_float_compare(ctx, v5, arg1, arg2, arg3);
        let v7 = &constructor_float_compare_invert(ctx, v6);
        // Rule at src/isa/riscv64/inst.isle line 3108.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_to_float_compare", "src/isa/riscv64/inst.isle line 3103"
    )
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 3117.
    return v2;
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 84.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 87.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 330.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 333.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 336.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 342.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 339.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 345.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 329"
    )
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 368.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 376.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src/isa/riscv64/inst_vector.isle line 384.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 404.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 424.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 431.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 442.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 447.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 452.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 457.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 462.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 467.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 472.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 477.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 505.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 519.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 526.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 533.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 538.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 543.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 576.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 583.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 590.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 597.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, v5);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v6, arg1, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 629.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 634.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 639.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 644.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 649.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 654.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 659.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 664.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 672.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 688.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 696.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 704.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 712.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 717.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 722.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 727.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 732.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 737.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 742.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 747.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 752.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 757.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 762.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 767.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 772.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 777.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 782.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 787.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 792.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 797.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 802.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 811.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -1_i8);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 817.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 816"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 823.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 828.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 833.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 838.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 843.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 848.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 853.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 858.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 863.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 873.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 878.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 883.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 888.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 893.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 901.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 909.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 917.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 925.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 933.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 941.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 949.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 957.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 962.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 967.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 972.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 977.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 982.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 988.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 993.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 999.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1005.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1011.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1017.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1028.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1050.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1056.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1062.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1068.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1074.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1081.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1087.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src/isa/riscv64/inst_vector.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_vslide1up_vx.
pub fn constructor_rv_vslide1up_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::Vslide1upVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1102.
    return v7;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1123.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1144.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1151.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1161.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1170.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1179.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1188.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1196.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1210.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1217.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1222.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1233.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1238.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1243.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1248.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1253.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1258.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1263.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1268.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1273.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1278.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1283.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1288.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1293.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1298.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1303.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1308.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1313.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1319.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1323.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1328.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1334.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1338.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1343.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1349.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1354.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1358.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1363.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1368.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1373.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1378.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1383.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1388.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1393.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1399.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1403.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1409.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1413.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1419.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1425.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1431.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1437.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1443.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1449.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1456.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1463.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1470.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1477.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1484.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src/isa/riscv64/inst_vector.isle line 1492.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1498.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0_u8 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 1506.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 1511.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0_u8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1518.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0_u8);
        // Rule at src/isa/riscv64/inst_vector.isle line 1522.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 1503"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src/isa/riscv64/inst_vector.isle line 1532.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1537.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1548.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2_u64);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src/isa/riscv64/inst_vector.isle line 1561.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src/isa/riscv64/inst_vector.isle line 1566.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src/isa/riscv64/inst_vector.isle line 1558"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0_i8);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -1_i8);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1574.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src/isa/riscv64/inst_vector.isle line 1573"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v31 = constructor_rv_vmseq_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1599.
                    return v31;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v28 = constructor_rv_vmseq_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1595.
                    return v28;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1592.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1589.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1586.
                return v10;
            }
            &IntCC::NotEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v36 = constructor_rv_vmsne_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1618.
                    return v36;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v35 = constructor_rv_vmsne_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1614.
                    return v35;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1611.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1608.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1605.
                return v32;
            }
            &IntCC::SignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v58 = constructor_rv_vmsgt_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1702.
                    return v58;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1699.
                            return v57;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1696.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1693.
                return v55;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v64 = constructor_rv_vmsle_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1726.
                    return v64;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v63 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1723.
                            return v63;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v62 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1720.
                return v62;
            }
            &IntCC::SignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v44 = constructor_rv_vmsgt_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1648.
                    return v44;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1645.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1642.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1639.
                return v41;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v50 = constructor_rv_vmsle_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1672.
                    return v50;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v49 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1669.
                            return v49;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1666.
                return v48;
            }
            &IntCC::UnsignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v54 = constructor_rv_vmsgtu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1687.
                    return v54;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1684.
                            return v53;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v52 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1681.
                            return v52;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v51 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1678.
                return v51;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v61 = constructor_rv_vmsleu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1714.
                    return v61;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1711.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1708.
                return v59;
            }
            &IntCC::UnsignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v40 = constructor_rv_vmsgtu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1633.
                    return v40;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1630.
                            return v39;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1627.
                            return v38;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v37 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1624.
                return v37;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v47 = constructor_rv_vmsleu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1660.
                    return v47;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1657.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1654.
                return v45;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src/isa/riscv64/inst_vector.isle line 1582"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1743.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1740.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1737.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1788.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1785.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1782.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1799.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1796.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1793.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1766.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1763.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1760.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1777.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1774.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1771.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1755.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1752.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1749.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1804.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1820.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1812.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1828.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1836.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1841.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1846.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1851.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src/isa/riscv64/inst_vector.isle line 1733"
    )
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 1859.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1863.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1875.
            return 0x4b000000_u64;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1876.
            return 0x4330000000000000_u64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_max", "src/isa/riscv64/inst_vector.isle line 1874"
    )
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v18 = constructor_float_int_of_same_size(ctx, v5);
        let v17 = C::xreg_to_reg(ctx, v16);
        let v19 = constructor_gen_bitcast(ctx, v17, v18, v5);
        let v20 = C::freg_new(ctx, v19);
        let v21 = constructor_rv_vfadd_vf(ctx, arg0, v20, v6, v7);
        let v22 = constructor_rv_vmerge_vvm(ctx, v21, v15, v12, v7);
        // Rule at src/isa/riscv64/inst_vector.isle line 1885.
        return v22;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_vec_round", "src/isa/riscv64/inst_vector.isle line 1879"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1707,
            args: ref v1708,
            flags: v1709,
        } => {
            if let &Opcode::AtomicCas = v1707 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1638 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1639) = v1638 {
                        let v1673 = C::temp_writable_reg(ctx, v1639);
                        let v1714 = C::temp_writable_reg(ctx, v1639);
                        let v1710 = C::unpack_value_array_3(ctx, v1708);
                        let v1715 = constructor_put_in_xreg(ctx, v1710.0);
                        let v1716 = constructor_gen_atomic_offset(ctx, v1715, v1639);
                        let v1718 = constructor_zext(ctx, v1710.1);
                        let v1720 = constructor_put_in_xreg(ctx, v1710.0);
                        let v1721 = constructor_gen_atomic_p(ctx, v1720, v1639);
                        let v1723 = C::put_in_reg(ctx, v1710.2);
                        let v1717 = C::xreg_to_reg(ctx, v1716);
                        let v1719 = C::xreg_to_reg(ctx, v1718);
                        let v1722 = C::xreg_to_reg(ctx, v1721);
                        let v1724 = MInst::AtomicCas {
                            offset: v1717,
                            t0: v1673,
                            dst: v1714,
                            e: v1719,
                            addr: v1722,
                            v: v1723,
                            ty: v1639,
                        };
                        let v1725 = C::emit(ctx, &v1724);
                        let v1726 = C::writable_reg_to_reg(ctx, v1714);
                        let v1727 = constructor_output_reg(ctx, v1726);
                        let v1728 = Some(v1727);
                        // Rule at src/isa/riscv64/lower.isle line 1696.
                        return v1728;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1640,
            args: ref v1641,
            flags: v1642,
            op: ref v1643,
        } => {
            if let &Opcode::AtomicRmw = v1640 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1638 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1639) = v1638 {
                        let v1654 = C::fits_in_16(ctx, v1639);
                        if let Some(v1655) = v1654 {
                            let v1661 = C::is_atomic_rmw_max_etc(ctx, v1643);
                            if let Some(v1662) = v1661 {
                                match v1662.1 {
                                    false => {
                                        let v1644 = C::unpack_value_array_2(ctx, v1641);
                                        let v1656 = constructor_put_in_xreg(ctx, v1644.0);
                                        let v1669 = constructor_zext(ctx, v1644.1);
                                        let v1670 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1662.0, v1655, v1656, v1669,
                                        );
                                        let v1671 = constructor_output_xreg(ctx, v1670);
                                        let v1672 = Some(v1671);
                                        // Rule at src/isa/riscv64/lower.isle line 1634.
                                        return v1672;
                                    }
                                    true => {
                                        let v1644 = C::unpack_value_array_2(ctx, v1641);
                                        let v1656 = constructor_put_in_xreg(ctx, v1644.0);
                                        let v1665 = constructor_sext(ctx, v1644.1);
                                        let v1666 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1662.0, v1655, v1656, v1665,
                                        );
                                        let v1667 = constructor_output_xreg(ctx, v1666);
                                        let v1668 = Some(v1667);
                                        // Rule at src/isa/riscv64/lower.isle line 1628.
                                        return v1668;
                                    }
                                    _ => {}
                                }
                            }
                            let v1644 = C::unpack_value_array_2(ctx, v1641);
                            let v1656 = constructor_put_in_xreg(ctx, v1644.0);
                            let v1657 = constructor_put_in_xreg(ctx, v1644.1);
                            let v1658 =
                                constructor_gen_atomic_rmw_loop(ctx, v1643, v1655, v1656, v1657);
                            let v1659 = constructor_output_xreg(ctx, v1658);
                            let v1660 = Some(v1659);
                            // Rule at src/isa/riscv64/lower.isle line 1621.
                            return v1660;
                        }
                        match v1643 {
                            &AtomicRmwOp::Nand => {
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1656 = constructor_put_in_xreg(ctx, v1644.0);
                                let v1657 = constructor_put_in_xreg(ctx, v1644.1);
                                let v1684 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v1639,
                                    v1656,
                                    v1657,
                                );
                                let v1685 = constructor_output_xreg(ctx, v1684);
                                let v1686 = Some(v1685);
                                // Rule at src/isa/riscv64/lower.isle line 1661.
                                return v1686;
                            }
                            &AtomicRmwOp::Sub => {
                                let v1673 = C::temp_writable_reg(ctx, v1639);
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1657 = constructor_put_in_xreg(ctx, v1644.1);
                                let v1674 = constructor_rv_neg(ctx, v1657);
                                let v1677 =
                                    &constructor_get_atomic_rmw_op(ctx, v1639, &AtomicRmwOp::Add);
                                let v1678 = C::put_in_reg(ctx, v1644.0);
                                let v1679 = C::atomic_amo(ctx);
                                let v1675 = C::xreg_to_reg(ctx, v1674);
                                let v1680 = constructor_gen_atomic(ctx, v1677, v1678, v1675, v1679);
                                let v1681 = constructor_output_reg(ctx, v1680);
                                let v1682 = Some(v1681);
                                // Rule at src/isa/riscv64/lower.isle line 1643.
                                return v1682;
                            }
                            _ => {}
                        }
                        let v1647 = &constructor_get_atomic_rmw_op(ctx, v1639, v1643);
                        let v1644 = C::unpack_value_array_2(ctx, v1641);
                        let v1648 = C::put_in_reg(ctx, v1644.0);
                        let v1649 = C::put_in_reg(ctx, v1644.1);
                        let v1650 = C::atomic_amo(ctx);
                        let v1651 = constructor_gen_atomic(ctx, v1647, v1648, v1649, v1650);
                        let v1652 = constructor_output_reg(ctx, v1651);
                        let v1653 = Some(v1652);
                        // Rule at src/isa/riscv64/lower.isle line 1614.
                        return v1653;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v46,
            args: ref v47,
        } => {
            match v46 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v2672 = constructor_replicated_uimm5(ctx, v48.1);
                            if let Some(v2673) = v2672 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2674 =
                                    constructor_rv_vrgather_vi(ctx, v186, v2673, v188, v189);
                                let v2675 = constructor_output_vreg(ctx, v2674);
                                let v2676 = Some(v2675);
                                // Rule at src/isa/riscv64/lower.isle line 2811.
                                return v2676;
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2669 =
                                            constructor_rv_vrgather_vx(ctx, v186, v193, v188, v189);
                                        let v2670 = constructor_output_vreg(ctx, v2669);
                                        let v2671 = Some(v2670);
                                        // Rule at src/isa/riscv64/lower.isle line 2808.
                                        return v2671;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2666 = constructor_rv_vrgather_vv(ctx, v186, v187, v188, v189);
                            let v2667 = constructor_output_vreg(ctx, v2666);
                            let v2668 = Some(v2667);
                            // Rule at src/isa/riscv64/lower.isle line 2805.
                            return v2668;
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2035 =
                                            constructor_rv_vmin_vx(ctx, v221, v222, v188, v189);
                                        let v2036 = constructor_output_vreg(ctx, v2035);
                                        let v2037 = Some(v2036);
                                        // Rule at src/isa/riscv64/lower.isle line 1999.
                                        return v2037;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2032 =
                                            constructor_rv_vmin_vx(ctx, v186, v193, v188, v189);
                                        let v2033 = constructor_output_vreg(ctx, v2032);
                                        let v2034 = Some(v2033);
                                        // Rule at src/isa/riscv64/lower.isle line 1996.
                                        return v2034;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2029 = constructor_rv_vmin_vv(ctx, v186, v187, v188, v189);
                            let v2030 = constructor_output_vreg(ctx, v2029);
                            let v2031 = Some(v2030);
                            // Rule at src/isa/riscv64/lower.isle line 1993.
                            return v2031;
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v2025 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedLessThan,
                                v48.0,
                                v48.1,
                            );
                            let v2006 = C::put_in_regs(ctx, v48.0);
                            let v2007 = C::put_in_regs(ctx, v48.1);
                            let v2026 = constructor_gen_select_regs(ctx, v2025, v2006, v2007);
                            let v2027 = C::output(ctx, v2026);
                            let v2028 = Some(v2027);
                            // Rule at src/isa/riscv64/lower.isle line 1990.
                            return v2028;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v610 = constructor_sext(ctx, v48.0);
                            let v611 = constructor_sext(ctx, v48.1);
                            let v2020 = constructor_cmp_lt(ctx, v610, v611);
                            let v2021 = constructor_gen_select_xreg(ctx, v2020, v610, v611);
                            let v2022 = constructor_output_xreg(ctx, v2021);
                            let v2023 = Some(v2022);
                            // Rule at src/isa/riscv64/lower.isle line 1985.
                            return v2023;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2070 =
                                            constructor_rv_vminu_vx(ctx, v221, v222, v188, v189);
                                        let v2071 = constructor_output_vreg(ctx, v2070);
                                        let v2072 = Some(v2071);
                                        // Rule at src/isa/riscv64/lower.isle line 2037.
                                        return v2072;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2067 =
                                            constructor_rv_vminu_vx(ctx, v186, v193, v188, v189);
                                        let v2068 = constructor_output_vreg(ctx, v2067);
                                        let v2069 = Some(v2068);
                                        // Rule at src/isa/riscv64/lower.isle line 2034.
                                        return v2069;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2064 = constructor_rv_vminu_vv(ctx, v186, v187, v188, v189);
                            let v2065 = constructor_output_vreg(ctx, v2064);
                            let v2066 = Some(v2065);
                            // Rule at src/isa/riscv64/lower.isle line 2031.
                            return v2066;
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v2060 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedLessThan,
                                v48.0,
                                v48.1,
                            );
                            let v2006 = C::put_in_regs(ctx, v48.0);
                            let v2007 = C::put_in_regs(ctx, v48.1);
                            let v2061 = constructor_gen_select_regs(ctx, v2060, v2006, v2007);
                            let v2062 = C::output(ctx, v2061);
                            let v2063 = Some(v2062);
                            // Rule at src/isa/riscv64/lower.isle line 2028.
                            return v2063;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v624 = constructor_zext(ctx, v48.0);
                            let v625 = constructor_zext(ctx, v48.1);
                            let v2056 = constructor_cmp_ltu(ctx, v624, v625);
                            let v2057 = constructor_gen_select_xreg(ctx, v2056, v624, v625);
                            let v2058 = constructor_output_xreg(ctx, v2057);
                            let v2059 = Some(v2058);
                            // Rule at src/isa/riscv64/lower.isle line 2023.
                            return v2059;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2017 =
                                            constructor_rv_vmax_vx(ctx, v221, v222, v188, v189);
                                        let v2018 = constructor_output_vreg(ctx, v2017);
                                        let v2019 = Some(v2018);
                                        // Rule at src/isa/riscv64/lower.isle line 1980.
                                        return v2019;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2014 =
                                            constructor_rv_vmax_vx(ctx, v186, v193, v188, v189);
                                        let v2015 = constructor_output_vreg(ctx, v2014);
                                        let v2016 = Some(v2015);
                                        // Rule at src/isa/riscv64/lower.isle line 1977.
                                        return v2016;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2011 = constructor_rv_vmax_vv(ctx, v186, v187, v188, v189);
                            let v2012 = constructor_output_vreg(ctx, v2011);
                            let v2013 = Some(v2012);
                            // Rule at src/isa/riscv64/lower.isle line 1974.
                            return v2013;
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v2005 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedGreaterThan,
                                v48.0,
                                v48.1,
                            );
                            let v2006 = C::put_in_regs(ctx, v48.0);
                            let v2007 = C::put_in_regs(ctx, v48.1);
                            let v2008 = constructor_gen_select_regs(ctx, v2005, v2006, v2007);
                            let v2009 = C::output(ctx, v2008);
                            let v2010 = Some(v2009);
                            // Rule at src/isa/riscv64/lower.isle line 1971.
                            return v2010;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v610 = constructor_sext(ctx, v48.0);
                            let v611 = constructor_sext(ctx, v48.1);
                            let v2000 = constructor_cmp_gt(ctx, v610, v611);
                            let v2001 = constructor_gen_select_xreg(ctx, v2000, v610, v611);
                            let v2002 = constructor_output_xreg(ctx, v2001);
                            let v2003 = Some(v2002);
                            // Rule at src/isa/riscv64/lower.isle line 1966.
                            return v2003;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2053 =
                                            constructor_rv_vmaxu_vx(ctx, v221, v222, v188, v189);
                                        let v2054 = constructor_output_vreg(ctx, v2053);
                                        let v2055 = Some(v2054);
                                        // Rule at src/isa/riscv64/lower.isle line 2018.
                                        return v2055;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2050 =
                                            constructor_rv_vmaxu_vx(ctx, v186, v193, v188, v189);
                                        let v2051 = constructor_output_vreg(ctx, v2050);
                                        let v2052 = Some(v2051);
                                        // Rule at src/isa/riscv64/lower.isle line 2015.
                                        return v2052;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2047 = constructor_rv_vmaxu_vv(ctx, v186, v187, v188, v189);
                            let v2048 = constructor_output_vreg(ctx, v2047);
                            let v2049 = Some(v2048);
                            // Rule at src/isa/riscv64/lower.isle line 2012.
                            return v2049;
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v2043 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedGreaterThan,
                                v48.0,
                                v48.1,
                            );
                            let v2006 = C::put_in_regs(ctx, v48.0);
                            let v2007 = C::put_in_regs(ctx, v48.1);
                            let v2044 = constructor_gen_select_regs(ctx, v2043, v2006, v2007);
                            let v2045 = C::output(ctx, v2044);
                            let v2046 = Some(v2045);
                            // Rule at src/isa/riscv64/lower.isle line 2009.
                            return v2046;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v624 = constructor_zext(ctx, v48.0);
                            let v625 = constructor_zext(ctx, v48.1);
                            let v2038 = constructor_cmp_gtu(ctx, v624, v625);
                            let v2039 = constructor_gen_select_xreg(ctx, v2038, v624, v625);
                            let v2040 = constructor_output_xreg(ctx, v2039);
                            let v2041 = Some(v2040);
                            // Rule at src/isa/riscv64/lower.isle line 2004.
                            return v2041;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1241 = constructor_u64_to_uimm5(ctx, 0x1_u64);
                            if let Some(v1242) = v1241 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v187 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v807 = constructor_rv_vand_vv(ctx, v186, v187, v188, v189);
                                let v2778 = constructor_put_in_vreg(ctx, v48.0);
                                let v2779 = constructor_put_in_vreg(ctx, v48.1);
                                let v2780 = constructor_rv_vxor_vv(ctx, v2778, v2779, v188, v189);
                                let v2781 = constructor_rv_vssrl_vi(ctx, v2780, v1242, v188, v189);
                                let v2782 = constructor_rv_vadd_vv(ctx, v807, v2781, v188, v189);
                                let v2783 = constructor_output_vreg(ctx, v2782);
                                let v2784 = Some(v2783);
                                // Rule at src/isa/riscv64/lower.isle line 2926.
                                return v2784;
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2614 = constructor_rv_vsaddu_vi(ctx, v221, v241, v188, v189);
                                let v2615 = constructor_output_vreg(ctx, v2614);
                                let v2616 = Some(v2615);
                                // Rule at src/isa/riscv64/lower.isle line 2716.
                                return v2616;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2611 = constructor_rv_vsaddu_vi(ctx, v186, v217, v188, v189);
                                let v2612 = constructor_output_vreg(ctx, v2611);
                                let v2613 = Some(v2612);
                                // Rule at src/isa/riscv64/lower.isle line 2712.
                                return v2613;
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2608 =
                                            constructor_rv_vsaddu_vx(ctx, v221, v222, v188, v189);
                                        let v2609 = constructor_output_vreg(ctx, v2608);
                                        let v2610 = Some(v2609);
                                        // Rule at src/isa/riscv64/lower.isle line 2709.
                                        return v2610;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2605 =
                                            constructor_rv_vsaddu_vx(ctx, v186, v193, v188, v189);
                                        let v2606 = constructor_output_vreg(ctx, v2605);
                                        let v2607 = Some(v2606);
                                        // Rule at src/isa/riscv64/lower.isle line 2706.
                                        return v2607;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2602 = constructor_rv_vsaddu_vv(ctx, v186, v187, v188, v189);
                            let v2603 = constructor_output_vreg(ctx, v2602);
                            let v2604 = Some(v2603);
                            // Rule at src/isa/riscv64/lower.isle line 2703.
                            return v2604;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2629 = constructor_rv_vsadd_vi(ctx, v221, v241, v188, v189);
                                let v2630 = constructor_output_vreg(ctx, v2629);
                                let v2631 = Some(v2630);
                                // Rule at src/isa/riscv64/lower.isle line 2735.
                                return v2631;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2626 = constructor_rv_vsadd_vi(ctx, v186, v217, v188, v189);
                                let v2627 = constructor_output_vreg(ctx, v2626);
                                let v2628 = Some(v2627);
                                // Rule at src/isa/riscv64/lower.isle line 2731.
                                return v2628;
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2623 =
                                            constructor_rv_vsadd_vx(ctx, v221, v222, v188, v189);
                                        let v2624 = constructor_output_vreg(ctx, v2623);
                                        let v2625 = Some(v2624);
                                        // Rule at src/isa/riscv64/lower.isle line 2728.
                                        return v2625;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2620 =
                                            constructor_rv_vsadd_vx(ctx, v186, v193, v188, v189);
                                        let v2621 = constructor_output_vreg(ctx, v2620);
                                        let v2622 = Some(v2621);
                                        // Rule at src/isa/riscv64/lower.isle line 2725.
                                        return v2622;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2617 = constructor_rv_vsadd_vv(ctx, v186, v187, v188, v189);
                            let v2618 = constructor_output_vreg(ctx, v2617);
                            let v2619 = Some(v2618);
                            // Rule at src/isa/riscv64/lower.isle line 2722.
                            return v2619;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2635 =
                                            constructor_rv_vssubu_vx(ctx, v186, v193, v188, v189);
                                        let v2636 = constructor_output_vreg(ctx, v2635);
                                        let v2637 = Some(v2636);
                                        // Rule at src/isa/riscv64/lower.isle line 2744.
                                        return v2637;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2632 = constructor_rv_vssubu_vv(ctx, v186, v187, v188, v189);
                            let v2633 = constructor_output_vreg(ctx, v2632);
                            let v2634 = Some(v2633);
                            // Rule at src/isa/riscv64/lower.isle line 2741.
                            return v2634;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2641 =
                                            constructor_rv_vssub_vx(ctx, v186, v193, v188, v189);
                                        let v2642 = constructor_output_vreg(ctx, v2641);
                                        let v2643 = Some(v2642);
                                        // Rule at src/isa/riscv64/lower.isle line 2752.
                                        return v2643;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2638 = constructor_rv_vssub_vv(ctx, v186, v187, v188, v189);
                            let v2639 = constructor_output_vreg(ctx, v2638);
                            let v2640 = Some(v2639);
                            // Rule at src/isa/riscv64/lower.isle line 2749.
                            return v2640;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v242 = constructor_rv_vadd_vi(ctx, v221, v241, v188, v189);
                                let v243 = constructor_output_vreg(ctx, v242);
                                let v244 = Some(v243);
                                // Rule at src/isa/riscv64/lower.isle line 141.
                                return v244;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v218 = constructor_rv_vadd_vi(ctx, v186, v217, v188, v189);
                                let v219 = constructor_output_vreg(ctx, v218);
                                let v220 = Some(v219);
                                // Rule at src/isa/riscv64/lower.isle line 123.
                                return v220;
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                match v92 {
                                    &InstructionData::Binary {
                                        opcode: ref v118,
                                        args: ref v119,
                                    } => {
                                        if let &Opcode::Imul = v118 {
                                            let v120 = C::unpack_value_array_2(ctx, v119);
                                            let v148 = C::def_inst(ctx, v120.0);
                                            if let Some(v149) = v148 {
                                                let v150 = &C::inst_data(ctx, v149);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v151,
                                                    arg: v152,
                                                } = v150
                                                {
                                                    if let &Opcode::Splat = v151 {
                                                        let v221 =
                                                            constructor_put_in_vreg(ctx, v48.1);
                                                        let v375 =
                                                            constructor_put_in_vreg(ctx, v120.1);
                                                        let v376 =
                                                            constructor_put_in_xreg(ctx, v152);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v377 = constructor_rv_vmacc_vx(
                                                            ctx, v221, v375, v376, v188, v189,
                                                        );
                                                        let v378 =
                                                            constructor_output_vreg(ctx, v377);
                                                        let v379 = Some(v378);
                                                        // Rule at src/isa/riscv64/lower.isle line 276.
                                                        return v379;
                                                    }
                                                }
                                            }
                                            let v366 = C::def_inst(ctx, v120.1);
                                            if let Some(v367) = v366 {
                                                let v368 = &C::inst_data(ctx, v367);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v369,
                                                    arg: v370,
                                                } = v368
                                                {
                                                    if let &Opcode::Splat = v369 {
                                                        let v221 =
                                                            constructor_put_in_vreg(ctx, v48.1);
                                                        let v361 =
                                                            constructor_put_in_vreg(ctx, v120.0);
                                                        let v371 =
                                                            constructor_put_in_xreg(ctx, v370);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v372 = constructor_rv_vmacc_vx(
                                                            ctx, v221, v361, v371, v188, v189,
                                                        );
                                                        let v373 =
                                                            constructor_output_vreg(ctx, v372);
                                                        let v374 = Some(v373);
                                                        // Rule at src/isa/riscv64/lower.isle line 273.
                                                        return v374;
                                                    }
                                                }
                                            }
                                            let v221 = constructor_put_in_vreg(ctx, v48.1);
                                            let v361 = constructor_put_in_vreg(ctx, v120.0);
                                            let v362 = constructor_put_in_vreg(ctx, v120.1);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v363 = constructor_rv_vmacc_vv(
                                                ctx, v221, v361, v362, v188, v189,
                                            );
                                            let v364 = constructor_output_vreg(ctx, v363);
                                            let v365 = Some(v364);
                                            // Rule at src/isa/riscv64/lower.isle line 270.
                                            return v365;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } => {
                                        match v93 {
                                            &Opcode::Splat => {
                                                let v226 = C::def_inst(ctx, v94);
                                                if let Some(v227) = v226 {
                                                    let v228 = &C::inst_data(ctx, v227);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v229,
                                                        arg: v230,
                                                    } = v228
                                                    {
                                                        match v229 {
                                                            &Opcode::Uextend => {
                                                                let v78 = C::def_inst(ctx, v48.1);
                                                                if let Some(v79) = v78 {
                                                                    let v80 =
                                                                        &C::inst_data(ctx, v79);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v81,
                                                                        arg: v82,
                                                                    } = v80 {
                                                                        match v81 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v83 = C::value_type(ctx, v82);
                                                                                let v270 = C::lane_type(ctx, v83);
                                                                                let v231 = C::value_type(ctx, v230);
                                                                                let v271 = C::ty_equal(ctx, v270, v231);
                                                                                if v271 == true {
                                                                                    let v272 = constructor_put_in_vreg(ctx, v82);
                                                                                    let v233 = constructor_put_in_xreg(ctx, v230);
                                                                                    let v188 = &constructor_unmasked(ctx);
                                                                                    let v246 = C::ty_half_lanes(ctx, v83);
                                                                                    let v247 = v246?;
                                                                                    let v248 = C::vstate_from_type(ctx, v247);
                                                                                    let v249 = C::vstate_mf2(ctx, v248);
                                                                                    let v311 = constructor_rv_vwaddu_vx(ctx, v272, v233, v188, v249);
                                                                                    let v312 = constructor_output_vreg(ctx, v311);
                                                                                    let v313 = Some(v312);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 207.
                                                                                    return v313;
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v83 = C::value_type(ctx, v82);
                                                                                let v270 = C::lane_type(ctx, v83);
                                                                                let v231 = C::value_type(ctx, v230);
                                                                                let v271 = C::ty_equal(ctx, v270, v231);
                                                                                if v271 == true {
                                                                                    let v272 = constructor_put_in_vreg(ctx, v82);
                                                                                    let v294 = constructor_gen_slidedown_half(ctx, v83, v272);
                                                                                    let v295 = constructor_put_in_xreg(ctx, v230);
                                                                                    let v188 = &constructor_unmasked(ctx);
                                                                                    let v246 = C::ty_half_lanes(ctx, v83);
                                                                                    let v247 = v246?;
                                                                                    let v248 = C::vstate_from_type(ctx, v247);
                                                                                    let v249 = C::vstate_mf2(ctx, v248);
                                                                                    let v326 = constructor_rv_vwaddu_vx(ctx, v294, v295, v188, v249);
                                                                                    let v327 = constructor_output_vreg(ctx, v326);
                                                                                    let v328 = Some(v327);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 230.
                                                                                    return v328;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v203 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v204) = v203 {
                                                                    let v205 =
                                                                        C::lane_type(ctx, v204);
                                                                    let v231 =
                                                                        C::value_type(ctx, v230);
                                                                    let v232 = C::ty_equal(
                                                                        ctx, v205, v231,
                                                                    );
                                                                    if v232 == true {
                                                                        let v221 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.1,
                                                                            );
                                                                        let v233 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v230,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v208 =
                                                                            C::vstate_from_type(
                                                                                ctx, v204,
                                                                            );
                                                                        let v209 = C::vstate_mf2(
                                                                            ctx, v208,
                                                                        );
                                                                        let v237 = constructor_rv_vwaddu_wx(ctx, v221, v233, v188, v209);
                                                                        let v238 =
                                                                            constructor_output_vreg(
                                                                                ctx, v237,
                                                                            );
                                                                        let v239 = Some(v238);
                                                                        // Rule at src/isa/riscv64/lower.isle line 136.
                                                                        return v239;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v78 = C::def_inst(ctx, v48.1);
                                                                if let Some(v79) = v78 {
                                                                    let v80 =
                                                                        &C::inst_data(ctx, v79);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v81,
                                                                        arg: v82,
                                                                    } = v80 {
                                                                        match v81 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v83 = C::value_type(ctx, v82);
                                                                                let v270 = C::lane_type(ctx, v83);
                                                                                let v231 = C::value_type(ctx, v230);
                                                                                let v271 = C::ty_equal(ctx, v270, v231);
                                                                                if v271 == true {
                                                                                    let v272 = constructor_put_in_vreg(ctx, v82);
                                                                                    let v233 = constructor_put_in_xreg(ctx, v230);
                                                                                    let v188 = &constructor_unmasked(ctx);
                                                                                    let v246 = C::ty_half_lanes(ctx, v83);
                                                                                    let v247 = v246?;
                                                                                    let v248 = C::vstate_from_type(ctx, v247);
                                                                                    let v249 = C::vstate_mf2(ctx, v248);
                                                                                    let v273 = constructor_rv_vwadd_vx(ctx, v272, v233, v188, v249);
                                                                                    let v274 = constructor_output_vreg(ctx, v273);
                                                                                    let v275 = Some(v274);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 162.
                                                                                    return v275;
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v83 = C::value_type(ctx, v82);
                                                                                let v270 = C::lane_type(ctx, v83);
                                                                                let v231 = C::value_type(ctx, v230);
                                                                                let v271 = C::ty_equal(ctx, v270, v231);
                                                                                if v271 == true {
                                                                                    let v272 = constructor_put_in_vreg(ctx, v82);
                                                                                    let v294 = constructor_gen_slidedown_half(ctx, v83, v272);
                                                                                    let v295 = constructor_put_in_xreg(ctx, v230);
                                                                                    let v188 = &constructor_unmasked(ctx);
                                                                                    let v246 = C::ty_half_lanes(ctx, v83);
                                                                                    let v247 = v246?;
                                                                                    let v248 = C::vstate_from_type(ctx, v247);
                                                                                    let v249 = C::vstate_mf2(ctx, v248);
                                                                                    let v296 = constructor_rv_vwadd_vx(ctx, v294, v295, v188, v249);
                                                                                    let v297 = constructor_output_vreg(ctx, v296);
                                                                                    let v298 = Some(v297);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 185.
                                                                                    return v298;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v203 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v204) = v203 {
                                                                    let v205 =
                                                                        C::lane_type(ctx, v204);
                                                                    let v231 =
                                                                        C::value_type(ctx, v230);
                                                                    let v232 = C::ty_equal(
                                                                        ctx, v205, v231,
                                                                    );
                                                                    if v232 == true {
                                                                        let v221 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.1,
                                                                            );
                                                                        let v233 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v230,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v208 =
                                                                            C::vstate_from_type(
                                                                                ctx, v204,
                                                                            );
                                                                        let v209 = C::vstate_mf2(
                                                                            ctx, v208,
                                                                        );
                                                                        let v234 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v221, v233,
                                                                                v188, v209,
                                                                            );
                                                                        let v235 =
                                                                            constructor_output_vreg(
                                                                                ctx, v234,
                                                                            );
                                                                        let v236 = Some(v235);
                                                                        // Rule at src/isa/riscv64/lower.isle line 131.
                                                                        return v236;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                                let v222 = constructor_put_in_xreg(ctx, v94);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v189 = C::vstate_from_type(ctx, v12);
                                                let v223 = constructor_rv_vadd_vx(
                                                    ctx, v221, v222, v188, v189,
                                                );
                                                let v224 = constructor_output_vreg(ctx, v223);
                                                let v225 = Some(v224);
                                                // Rule at src/isa/riscv64/lower.isle line 128.
                                                return v225;
                                            }
                                            &Opcode::Ineg => {
                                                let v226 = C::def_inst(ctx, v94);
                                                if let Some(v227) = v226 {
                                                    let v228 = &C::inst_data(ctx, v227);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v409,
                                                        args: ref v410,
                                                    } = v228
                                                    {
                                                        if let &Opcode::Imul = v409 {
                                                            let v411 =
                                                                C::unpack_value_array_2(ctx, v410);
                                                            let v428 = C::def_inst(ctx, v411.0);
                                                            if let Some(v429) = v428 {
                                                                let v430 = &C::inst_data(ctx, v429);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v431,
                                                                    arg: v432,
                                                                } = v430
                                                                {
                                                                    if let &Opcode::Splat = v431 {
                                                                        let v221 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.1,
                                                                            );
                                                                        let v433 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v411.1,
                                                                            );
                                                                        let v434 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v432,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v189 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v435 = constructor_rv_vnmsac_vx(ctx, v221, v433, v434, v188, v189);
                                                                        let v436 =
                                                                            constructor_output_vreg(
                                                                                ctx, v435,
                                                                            );
                                                                        let v437 = Some(v436);
                                                                        // Rule at src/isa/riscv64/lower.isle line 296.
                                                                        return v437;
                                                                    }
                                                                }
                                                            }
                                                            let v419 = C::def_inst(ctx, v411.1);
                                                            if let Some(v420) = v419 {
                                                                let v421 = &C::inst_data(ctx, v420);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v422,
                                                                    arg: v423,
                                                                } = v421
                                                                {
                                                                    if let &Opcode::Splat = v422 {
                                                                        let v221 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.1,
                                                                            );
                                                                        let v414 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v411.0,
                                                                            );
                                                                        let v424 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v423,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v189 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v425 = constructor_rv_vnmsac_vx(ctx, v221, v414, v424, v188, v189);
                                                                        let v426 =
                                                                            constructor_output_vreg(
                                                                                ctx, v425,
                                                                            );
                                                                        let v427 = Some(v426);
                                                                        // Rule at src/isa/riscv64/lower.isle line 293.
                                                                        return v427;
                                                                    }
                                                                }
                                                            }
                                                            let v221 =
                                                                constructor_put_in_vreg(ctx, v48.1);
                                                            let v414 = constructor_put_in_vreg(
                                                                ctx, v411.0,
                                                            );
                                                            let v415 = constructor_put_in_vreg(
                                                                ctx, v411.1,
                                                            );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v189 =
                                                                C::vstate_from_type(ctx, v12);
                                                            let v416 = constructor_rv_vnmsac_vv(
                                                                ctx, v221, v414, v415, v188, v189,
                                                            );
                                                            let v417 =
                                                                constructor_output_vreg(ctx, v416);
                                                            let v418 = Some(v417);
                                                            // Rule at src/isa/riscv64/lower.isle line 290.
                                                            return v418;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v78 = C::def_inst(ctx, v48.1);
                                                if let Some(v79) = v78 {
                                                    let v80 = &C::inst_data(ctx, v79);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v81,
                                                        arg: v82,
                                                    } = v80
                                                    {
                                                        match v81 {
                                                            &Opcode::Splat => {
                                                                let v197 = C::def_inst(ctx, v82);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Sextend = v200 {
                                                                            let v95 = C::value_type(ctx, v94);
                                                                            let v265 = C::lane_type(ctx, v95);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v266 = C::ty_equal(ctx, v265, v202);
                                                                            if v266 == true {
                                                                                let v261 = constructor_put_in_vreg(ctx, v94);
                                                                                let v207 = constructor_put_in_xreg(ctx, v201);
                                                                                let v188 = &constructor_unmasked(ctx);
                                                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                                                let v255 = v254?;
                                                                                let v256 = C::vstate_from_type(ctx, v255);
                                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                                let v267 = constructor_rv_vwadd_vx(ctx, v261, v207, v188, v257);
                                                                                let v268 = constructor_output_vreg(ctx, v267);
                                                                                let v269 = Some(v268);
                                                                                // Rule at src/isa/riscv64/lower.isle line 157.
                                                                                return v269;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v245 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v262 = constructor_rv_vwadd_vv(
                                                                    ctx, v261, v245, v188, v257,
                                                                );
                                                                let v263 = constructor_output_vreg(
                                                                    ctx, v262,
                                                                );
                                                                let v264 = Some(v263);
                                                                // Rule at src/isa/riscv64/lower.isle line 153.
                                                                return v264;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v245 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v329 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v245,
                                                                    );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v330 = constructor_rv_vwadd_vv(
                                                                    ctx, v261, v329, v188, v257,
                                                                );
                                                                let v331 = constructor_output_vreg(
                                                                    ctx, v330,
                                                                );
                                                                let v332 = Some(v331);
                                                                // Rule at src/isa/riscv64/lower.isle line 237.
                                                                return v332;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                                let v253 = constructor_put_in_vreg(ctx, v94);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v95 = C::value_type(ctx, v94);
                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                let v255 = v254?;
                                                let v256 = C::vstate_from_type(ctx, v255);
                                                let v257 = C::vstate_mf2(ctx, v256);
                                                let v258 = constructor_rv_vwadd_wv(
                                                    ctx, v221, v253, v188, v257,
                                                );
                                                let v259 = constructor_output_vreg(ctx, v258);
                                                let v260 = Some(v259);
                                                // Rule at src/isa/riscv64/lower.isle line 150.
                                                return v260;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v78 = C::def_inst(ctx, v48.1);
                                                if let Some(v79) = v78 {
                                                    let v80 = &C::inst_data(ctx, v79);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v81,
                                                        arg: v82,
                                                    } = v80
                                                    {
                                                        match v81 {
                                                            &Opcode::Splat => {
                                                                let v197 = C::def_inst(ctx, v82);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Sextend = v200 {
                                                                            let v95 = C::value_type(ctx, v94);
                                                                            let v265 = C::lane_type(ctx, v95);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v266 = C::ty_equal(ctx, v265, v202);
                                                                            if v266 == true {
                                                                                let v261 = constructor_put_in_vreg(ctx, v94);
                                                                                let v284 = constructor_gen_slidedown_half(ctx, v95, v261);
                                                                                let v290 = constructor_put_in_xreg(ctx, v201);
                                                                                let v188 = &constructor_unmasked(ctx);
                                                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                                                let v255 = v254?;
                                                                                let v256 = C::vstate_from_type(ctx, v255);
                                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                                let v291 = constructor_rv_vwadd_vx(ctx, v284, v290, v188, v257);
                                                                                let v292 = constructor_output_vreg(ctx, v291);
                                                                                let v293 = Some(v292);
                                                                                // Rule at src/isa/riscv64/lower.isle line 180.
                                                                                return v293;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v284 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v261,
                                                                    );
                                                                let v285 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v333 = constructor_rv_vwadd_vv(
                                                                    ctx, v284, v285, v188, v257,
                                                                );
                                                                let v334 = constructor_output_vreg(
                                                                    ctx, v333,
                                                                );
                                                                let v335 = Some(v334);
                                                                // Rule at src/isa/riscv64/lower.isle line 241.
                                                                return v335;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v284 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v261,
                                                                    );
                                                                let v285 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v286 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v285,
                                                                    );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v287 = constructor_rv_vwadd_vv(
                                                                    ctx, v284, v286, v188, v257,
                                                                );
                                                                let v288 = constructor_output_vreg(
                                                                    ctx, v287,
                                                                );
                                                                let v289 = Some(v288);
                                                                // Rule at src/isa/riscv64/lower.isle line 176.
                                                                return v289;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                                let v253 = constructor_put_in_vreg(ctx, v94);
                                                let v95 = C::value_type(ctx, v94);
                                                let v280 =
                                                    constructor_gen_slidedown_half(ctx, v95, v253);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                let v255 = v254?;
                                                let v256 = C::vstate_from_type(ctx, v255);
                                                let v257 = C::vstate_mf2(ctx, v256);
                                                let v281 = constructor_rv_vwadd_wv(
                                                    ctx, v221, v280, v188, v257,
                                                );
                                                let v282 = constructor_output_vreg(ctx, v281);
                                                let v283 = Some(v282);
                                                // Rule at src/isa/riscv64/lower.isle line 173.
                                                return v283;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v78 = C::def_inst(ctx, v48.1);
                                                if let Some(v79) = v78 {
                                                    let v80 = &C::inst_data(ctx, v79);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v81,
                                                        arg: v82,
                                                    } = v80
                                                    {
                                                        match v81 {
                                                            &Opcode::Splat => {
                                                                let v197 = C::def_inst(ctx, v82);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Uextend = v200 {
                                                                            let v95 = C::value_type(ctx, v94);
                                                                            let v265 = C::lane_type(ctx, v95);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v266 = C::ty_equal(ctx, v265, v202);
                                                                            if v266 == true {
                                                                                let v261 = constructor_put_in_vreg(ctx, v94);
                                                                                let v207 = constructor_put_in_xreg(ctx, v201);
                                                                                let v188 = &constructor_unmasked(ctx);
                                                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                                                let v255 = v254?;
                                                                                let v256 = C::vstate_from_type(ctx, v255);
                                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                                let v308 = constructor_rv_vwaddu_vx(ctx, v261, v207, v188, v257);
                                                                                let v309 = constructor_output_vreg(ctx, v308);
                                                                                let v310 = Some(v309);
                                                                                // Rule at src/isa/riscv64/lower.isle line 202.
                                                                                return v310;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v245 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v305 = constructor_rv_vwaddu_vv(
                                                                    ctx, v261, v245, v188, v257,
                                                                );
                                                                let v306 = constructor_output_vreg(
                                                                    ctx, v305,
                                                                );
                                                                let v307 = Some(v306);
                                                                // Rule at src/isa/riscv64/lower.isle line 198.
                                                                return v307;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v245 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v329 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v245,
                                                                    );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v336 = constructor_rv_vwaddu_vv(
                                                                    ctx, v261, v329, v188, v257,
                                                                );
                                                                let v337 = constructor_output_vreg(
                                                                    ctx, v336,
                                                                );
                                                                let v338 = Some(v337);
                                                                // Rule at src/isa/riscv64/lower.isle line 247.
                                                                return v338;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                                let v253 = constructor_put_in_vreg(ctx, v94);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v95 = C::value_type(ctx, v94);
                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                let v255 = v254?;
                                                let v256 = C::vstate_from_type(ctx, v255);
                                                let v257 = C::vstate_mf2(ctx, v256);
                                                let v302 = constructor_rv_vwaddu_wv(
                                                    ctx, v221, v253, v188, v257,
                                                );
                                                let v303 = constructor_output_vreg(ctx, v302);
                                                let v304 = Some(v303);
                                                // Rule at src/isa/riscv64/lower.isle line 195.
                                                return v304;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v78 = C::def_inst(ctx, v48.1);
                                                if let Some(v79) = v78 {
                                                    let v80 = &C::inst_data(ctx, v79);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v81,
                                                        arg: v82,
                                                    } = v80
                                                    {
                                                        match v81 {
                                                            &Opcode::Splat => {
                                                                let v197 = C::def_inst(ctx, v82);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Uextend = v200 {
                                                                            let v95 = C::value_type(ctx, v94);
                                                                            let v265 = C::lane_type(ctx, v95);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v266 = C::ty_equal(ctx, v265, v202);
                                                                            if v266 == true {
                                                                                let v261 = constructor_put_in_vreg(ctx, v94);
                                                                                let v284 = constructor_gen_slidedown_half(ctx, v95, v261);
                                                                                let v290 = constructor_put_in_xreg(ctx, v201);
                                                                                let v188 = &constructor_unmasked(ctx);
                                                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                                                let v255 = v254?;
                                                                                let v256 = C::vstate_from_type(ctx, v255);
                                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                                let v323 = constructor_rv_vwaddu_vx(ctx, v284, v290, v188, v257);
                                                                                let v324 = constructor_output_vreg(ctx, v323);
                                                                                let v325 = Some(v324);
                                                                                // Rule at src/isa/riscv64/lower.isle line 225.
                                                                                return v325;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v284 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v261,
                                                                    );
                                                                let v285 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v339 = constructor_rv_vwaddu_vv(
                                                                    ctx, v284, v285, v188, v257,
                                                                );
                                                                let v340 = constructor_output_vreg(
                                                                    ctx, v339,
                                                                );
                                                                let v341 = Some(v340);
                                                                // Rule at src/isa/riscv64/lower.isle line 251.
                                                                return v341;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v261 = constructor_put_in_vreg(
                                                                    ctx, v94,
                                                                );
                                                                let v95 = C::value_type(ctx, v94);
                                                                let v284 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v261,
                                                                    );
                                                                let v285 = constructor_put_in_vreg(
                                                                    ctx, v82,
                                                                );
                                                                let v286 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v95, v285,
                                                                    );
                                                                let v188 =
                                                                    &constructor_unmasked(ctx);
                                                                let v254 =
                                                                    C::ty_half_lanes(ctx, v95);
                                                                let v255 = v254?;
                                                                let v256 =
                                                                    C::vstate_from_type(ctx, v255);
                                                                let v257 = C::vstate_mf2(ctx, v256);
                                                                let v320 = constructor_rv_vwaddu_vv(
                                                                    ctx, v284, v286, v188, v257,
                                                                );
                                                                let v321 = constructor_output_vreg(
                                                                    ctx, v320,
                                                                );
                                                                let v322 = Some(v321);
                                                                // Rule at src/isa/riscv64/lower.isle line 221.
                                                                return v322;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                                let v253 = constructor_put_in_vreg(ctx, v94);
                                                let v95 = C::value_type(ctx, v94);
                                                let v280 =
                                                    constructor_gen_slidedown_half(ctx, v95, v253);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v254 = C::ty_half_lanes(ctx, v95);
                                                let v255 = v254?;
                                                let v256 = C::vstate_from_type(ctx, v255);
                                                let v257 = C::vstate_mf2(ctx, v256);
                                                let v317 = constructor_rv_vwaddu_wv(
                                                    ctx, v221, v280, v188, v257,
                                                );
                                                let v318 = constructor_output_vreg(ctx, v317);
                                                let v319 = Some(v318);
                                                // Rule at src/isa/riscv64/lower.isle line 218.
                                                return v319;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                match v80 {
                                    &InstructionData::Binary {
                                        opcode: ref v100,
                                        args: ref v101,
                                    } => {
                                        if let &Opcode::Imul = v100 {
                                            let v102 = C::unpack_value_array_2(ctx, v101);
                                            let v136 = C::def_inst(ctx, v102.0);
                                            if let Some(v137) = v136 {
                                                let v138 = &C::inst_data(ctx, v137);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v139,
                                                    arg: v140,
                                                } = v138
                                                {
                                                    if let &Opcode::Splat = v139 {
                                                        let v186 =
                                                            constructor_put_in_vreg(ctx, v48.0);
                                                        let v356 =
                                                            constructor_put_in_vreg(ctx, v102.1);
                                                        let v357 =
                                                            constructor_put_in_xreg(ctx, v140);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v358 = constructor_rv_vmacc_vx(
                                                            ctx, v186, v356, v357, v188, v189,
                                                        );
                                                        let v359 =
                                                            constructor_output_vreg(ctx, v358);
                                                        let v360 = Some(v359);
                                                        // Rule at src/isa/riscv64/lower.isle line 267.
                                                        return v360;
                                                    }
                                                }
                                            }
                                            let v347 = C::def_inst(ctx, v102.1);
                                            if let Some(v348) = v347 {
                                                let v349 = &C::inst_data(ctx, v348);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v350,
                                                    arg: v351,
                                                } = v349
                                                {
                                                    if let &Opcode::Splat = v350 {
                                                        let v186 =
                                                            constructor_put_in_vreg(ctx, v48.0);
                                                        let v342 =
                                                            constructor_put_in_vreg(ctx, v102.0);
                                                        let v352 =
                                                            constructor_put_in_xreg(ctx, v351);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v353 = constructor_rv_vmacc_vx(
                                                            ctx, v186, v342, v352, v188, v189,
                                                        );
                                                        let v354 =
                                                            constructor_output_vreg(ctx, v353);
                                                        let v355 = Some(v354);
                                                        // Rule at src/isa/riscv64/lower.isle line 264.
                                                        return v355;
                                                    }
                                                }
                                            }
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v342 = constructor_put_in_vreg(ctx, v102.0);
                                            let v343 = constructor_put_in_vreg(ctx, v102.1);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v344 = constructor_rv_vmacc_vv(
                                                ctx, v186, v342, v343, v188, v189,
                                            );
                                            let v345 = constructor_output_vreg(ctx, v344);
                                            let v346 = Some(v345);
                                            // Rule at src/isa/riscv64/lower.isle line 261.
                                            return v346;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } => {
                                        match v81 {
                                            &Opcode::Splat => {
                                                let v197 = C::def_inst(ctx, v82);
                                                if let Some(v198) = v197 {
                                                    let v199 = &C::inst_data(ctx, v198);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v200,
                                                        arg: v201,
                                                    } = v199
                                                    {
                                                        match v200 {
                                                            &Opcode::Uextend => {
                                                                let v203 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v204) = v203 {
                                                                    let v205 =
                                                                        C::lane_type(ctx, v204);
                                                                    let v202 =
                                                                        C::value_type(ctx, v201);
                                                                    let v206 = C::ty_equal(
                                                                        ctx, v205, v202,
                                                                    );
                                                                    if v206 == true {
                                                                        let v186 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.0,
                                                                            );
                                                                        let v207 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v201,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v208 =
                                                                            C::vstate_from_type(
                                                                                ctx, v204,
                                                                            );
                                                                        let v209 = C::vstate_mf2(
                                                                            ctx, v208,
                                                                        );
                                                                        let v213 = constructor_rv_vwaddu_wx(ctx, v186, v207, v188, v209);
                                                                        let v214 =
                                                                            constructor_output_vreg(
                                                                                ctx, v213,
                                                                            );
                                                                        let v215 = Some(v214);
                                                                        // Rule at src/isa/riscv64/lower.isle line 118.
                                                                        return v215;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v203 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v204) = v203 {
                                                                    let v205 =
                                                                        C::lane_type(ctx, v204);
                                                                    let v202 =
                                                                        C::value_type(ctx, v201);
                                                                    let v206 = C::ty_equal(
                                                                        ctx, v205, v202,
                                                                    );
                                                                    if v206 == true {
                                                                        let v186 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.0,
                                                                            );
                                                                        let v207 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v201,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v208 =
                                                                            C::vstate_from_type(
                                                                                ctx, v204,
                                                                            );
                                                                        let v209 = C::vstate_mf2(
                                                                            ctx, v208,
                                                                        );
                                                                        let v210 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v186, v207,
                                                                                v188, v209,
                                                                            );
                                                                        let v211 =
                                                                            constructor_output_vreg(
                                                                                ctx, v210,
                                                                            );
                                                                        let v212 = Some(v211);
                                                                        // Rule at src/isa/riscv64/lower.isle line 113.
                                                                        return v212;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v193 = constructor_put_in_xreg(ctx, v82);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v189 = C::vstate_from_type(ctx, v12);
                                                let v194 = constructor_rv_vadd_vx(
                                                    ctx, v186, v193, v188, v189,
                                                );
                                                let v195 = constructor_output_vreg(ctx, v194);
                                                let v196 = Some(v195);
                                                // Rule at src/isa/riscv64/lower.isle line 110.
                                                return v196;
                                            }
                                            &Opcode::Ineg => {
                                                let v197 = C::def_inst(ctx, v82);
                                                if let Some(v198) = v197 {
                                                    let v199 = &C::inst_data(ctx, v198);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v380,
                                                        args: ref v381,
                                                    } = v199
                                                    {
                                                        if let &Opcode::Imul = v380 {
                                                            let v382 =
                                                                C::unpack_value_array_2(ctx, v381);
                                                            let v399 = C::def_inst(ctx, v382.0);
                                                            if let Some(v400) = v399 {
                                                                let v401 = &C::inst_data(ctx, v400);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v402,
                                                                    arg: v403,
                                                                } = v401
                                                                {
                                                                    if let &Opcode::Splat = v402 {
                                                                        let v186 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.0,
                                                                            );
                                                                        let v404 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v382.1,
                                                                            );
                                                                        let v405 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v403,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v189 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v406 = constructor_rv_vnmsac_vx(ctx, v186, v404, v405, v188, v189);
                                                                        let v407 =
                                                                            constructor_output_vreg(
                                                                                ctx, v406,
                                                                            );
                                                                        let v408 = Some(v407);
                                                                        // Rule at src/isa/riscv64/lower.isle line 287.
                                                                        return v408;
                                                                    }
                                                                }
                                                            }
                                                            let v390 = C::def_inst(ctx, v382.1);
                                                            if let Some(v391) = v390 {
                                                                let v392 = &C::inst_data(ctx, v391);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v393,
                                                                    arg: v394,
                                                                } = v392
                                                                {
                                                                    if let &Opcode::Splat = v393 {
                                                                        let v186 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v48.0,
                                                                            );
                                                                        let v385 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v382.0,
                                                                            );
                                                                        let v395 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v394,
                                                                            );
                                                                        let v188 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v189 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v396 = constructor_rv_vnmsac_vx(ctx, v186, v385, v395, v188, v189);
                                                                        let v397 =
                                                                            constructor_output_vreg(
                                                                                ctx, v396,
                                                                            );
                                                                        let v398 = Some(v397);
                                                                        // Rule at src/isa/riscv64/lower.isle line 284.
                                                                        return v398;
                                                                    }
                                                                }
                                                            }
                                                            let v186 =
                                                                constructor_put_in_vreg(ctx, v48.0);
                                                            let v385 = constructor_put_in_vreg(
                                                                ctx, v382.0,
                                                            );
                                                            let v386 = constructor_put_in_vreg(
                                                                ctx, v382.1,
                                                            );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v189 =
                                                                C::vstate_from_type(ctx, v12);
                                                            let v387 = constructor_rv_vnmsac_vv(
                                                                ctx, v186, v385, v386, v188, v189,
                                                            );
                                                            let v388 =
                                                                constructor_output_vreg(ctx, v387);
                                                            let v389 = Some(v388);
                                                            // Rule at src/isa/riscv64/lower.isle line 281.
                                                            return v389;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v245 = constructor_put_in_vreg(ctx, v82);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v83 = C::value_type(ctx, v82);
                                                let v246 = C::ty_half_lanes(ctx, v83);
                                                let v247 = v246?;
                                                let v248 = C::vstate_from_type(ctx, v247);
                                                let v249 = C::vstate_mf2(ctx, v248);
                                                let v250 = constructor_rv_vwadd_wv(
                                                    ctx, v186, v245, v188, v249,
                                                );
                                                let v251 = constructor_output_vreg(ctx, v250);
                                                let v252 = Some(v251);
                                                // Rule at src/isa/riscv64/lower.isle line 147.
                                                return v252;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v245 = constructor_put_in_vreg(ctx, v82);
                                                let v83 = C::value_type(ctx, v82);
                                                let v276 =
                                                    constructor_gen_slidedown_half(ctx, v83, v245);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v246 = C::ty_half_lanes(ctx, v83);
                                                let v247 = v246?;
                                                let v248 = C::vstate_from_type(ctx, v247);
                                                let v249 = C::vstate_mf2(ctx, v248);
                                                let v277 = constructor_rv_vwadd_wv(
                                                    ctx, v186, v276, v188, v249,
                                                );
                                                let v278 = constructor_output_vreg(ctx, v277);
                                                let v279 = Some(v278);
                                                // Rule at src/isa/riscv64/lower.isle line 170.
                                                return v279;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v245 = constructor_put_in_vreg(ctx, v82);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v83 = C::value_type(ctx, v82);
                                                let v246 = C::ty_half_lanes(ctx, v83);
                                                let v247 = v246?;
                                                let v248 = C::vstate_from_type(ctx, v247);
                                                let v249 = C::vstate_mf2(ctx, v248);
                                                let v299 = constructor_rv_vwaddu_wv(
                                                    ctx, v186, v245, v188, v249,
                                                );
                                                let v300 = constructor_output_vreg(ctx, v299);
                                                let v301 = Some(v300);
                                                // Rule at src/isa/riscv64/lower.isle line 192.
                                                return v301;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v245 = constructor_put_in_vreg(ctx, v82);
                                                let v83 = C::value_type(ctx, v82);
                                                let v276 =
                                                    constructor_gen_slidedown_half(ctx, v83, v245);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v246 = C::ty_half_lanes(ctx, v83);
                                                let v247 = v246?;
                                                let v248 = C::vstate_from_type(ctx, v247);
                                                let v249 = C::vstate_mf2(ctx, v248);
                                                let v314 = constructor_rv_vwaddu_wv(
                                                    ctx, v186, v276, v188, v249,
                                                );
                                                let v315 = constructor_output_vreg(ctx, v314);
                                                let v316 = Some(v315);
                                                // Rule at src/isa/riscv64/lower.isle line 215.
                                                return v316;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v190 = constructor_rv_vadd_vv(ctx, v186, v187, v188, v189);
                            let v191 = constructor_output_vreg(ctx, v190);
                            let v192 = Some(v191);
                            // Rule at src/isa/riscv64/lower.isle line 107.
                            return v192;
                        }
                        match v3 {
                            I64 => {
                                let v84 = C::has_zba(ctx);
                                if v84 == true {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Binary {
                                            opcode: ref v118,
                                            args: ref v119,
                                        } = v92
                                        {
                                            if let &Opcode::Ishl = v118 {
                                                let v120 = C::unpack_value_array_2(ctx, v119);
                                                let v123 = C::maybe_uextend(ctx, v120.1);
                                                if let Some(v124) = v123 {
                                                    let v125 = C::def_inst(ctx, v124);
                                                    if let Some(v126) = v125 {
                                                        let v127 = &C::inst_data(ctx, v126);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v128,
                                                            imm: v129,
                                                        } = v127
                                                        {
                                                            if let &Opcode::Iconst = v128 {
                                                                let v148 = C::def_inst(ctx, v120.0);
                                                                if let Some(v149) = v148 {
                                                                    let v150 =
                                                                        &C::inst_data(ctx, v149);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v151,
                                                                        arg: v152,
                                                                    } = v150 {
                                                                        if let &Opcode::Uextend = v151 {
                                                                            let v153 = C::value_type(ctx, v152);
                                                                            if v153 == I32 {
                                                                                let v154 = &constructor_match_shnadd_uw(ctx, v129);
                                                                                if let Some(v155) = v154 {
                                                                                    let v156 = C::put_in_reg(ctx, v152);
                                                                                    let v74 = C::put_in_reg(ctx, v48.1);
                                                                                    let v157 = constructor_alu_rrr(ctx, v155, v156, v74);
                                                                                    let v158 = constructor_output_reg(ctx, v157);
                                                                                    let v159 = Some(v158);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 90.
                                                                                    return v159;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Binary {
                                            opcode: ref v100,
                                            args: ref v101,
                                        } = v80
                                        {
                                            if let &Opcode::Ishl = v100 {
                                                let v102 = C::unpack_value_array_2(ctx, v101);
                                                let v105 = C::maybe_uextend(ctx, v102.1);
                                                if let Some(v106) = v105 {
                                                    let v107 = C::def_inst(ctx, v106);
                                                    if let Some(v108) = v107 {
                                                        let v109 = &C::inst_data(ctx, v108);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v110,
                                                            imm: v111,
                                                        } = v109
                                                        {
                                                            if let &Opcode::Iconst = v110 {
                                                                let v136 = C::def_inst(ctx, v102.0);
                                                                if let Some(v137) = v136 {
                                                                    let v138 =
                                                                        &C::inst_data(ctx, v137);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v139,
                                                                        arg: v140,
                                                                    } = v138 {
                                                                        if let &Opcode::Uextend = v139 {
                                                                            let v141 = C::value_type(ctx, v140);
                                                                            if v141 == I32 {
                                                                                let v142 = &constructor_match_shnadd_uw(ctx, v111);
                                                                                if let Some(v143) = v142 {
                                                                                    let v144 = C::put_in_reg(ctx, v140);
                                                                                    let v66 = C::put_in_reg(ctx, v48.0);
                                                                                    let v145 = constructor_alu_rrr(ctx, v143, v144, v66);
                                                                                    let v146 = constructor_output_reg(ctx, v145);
                                                                                    let v147 = Some(v146);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 85.
                                                                                    return v147;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        match v92 {
                                            &InstructionData::Binary {
                                                opcode: ref v118,
                                                args: ref v119,
                                            } => {
                                                if let &Opcode::Ishl = v118 {
                                                    let v120 = C::unpack_value_array_2(ctx, v119);
                                                    let v123 = C::maybe_uextend(ctx, v120.1);
                                                    if let Some(v124) = v123 {
                                                        let v125 = C::def_inst(ctx, v124);
                                                        if let Some(v126) = v125 {
                                                            let v127 = &C::inst_data(ctx, v126);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v128,
                                                                imm: v129,
                                                            } = v127
                                                            {
                                                                if let &Opcode::Iconst = v128 {
                                                                    let v130 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v129,
                                                                        );
                                                                    if let Some(v131) = v130 {
                                                                        let v132 = C::put_in_reg(
                                                                            ctx, v120.0,
                                                                        );
                                                                        let v74 = C::put_in_reg(
                                                                            ctx, v48.1,
                                                                        );
                                                                        let v133 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v131, v132,
                                                                                v74,
                                                                            );
                                                                        let v134 =
                                                                            constructor_output_reg(
                                                                                ctx, v133,
                                                                            );
                                                                        let v135 = Some(v134);
                                                                        // Rule at src/isa/riscv64/lower.isle line 68.
                                                                        return v135;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v93,
                                                arg: v94,
                                            } => {
                                                if let &Opcode::Uextend = v93 {
                                                    let v95 = C::value_type(ctx, v94);
                                                    if v95 == I32 {
                                                        let v96 = constructor_put_in_xreg(ctx, v94);
                                                        let v52 =
                                                            constructor_put_in_xreg(ctx, v48.1);
                                                        let v97 =
                                                            constructor_rv_adduw(ctx, v96, v52);
                                                        let v98 = constructor_output_xreg(ctx, v97);
                                                        let v99 = Some(v98);
                                                        // Rule at src/isa/riscv64/lower.isle line 53.
                                                        return v99;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        match v80 {
                                            &InstructionData::Binary {
                                                opcode: ref v100,
                                                args: ref v101,
                                            } => {
                                                if let &Opcode::Ishl = v100 {
                                                    let v102 = C::unpack_value_array_2(ctx, v101);
                                                    let v105 = C::maybe_uextend(ctx, v102.1);
                                                    if let Some(v106) = v105 {
                                                        let v107 = C::def_inst(ctx, v106);
                                                        if let Some(v108) = v107 {
                                                            let v109 = &C::inst_data(ctx, v108);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v110,
                                                                imm: v111,
                                                            } = v109
                                                            {
                                                                if let &Opcode::Iconst = v110 {
                                                                    let v112 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v111,
                                                                        );
                                                                    if let Some(v113) = v112 {
                                                                        let v114 = C::put_in_reg(
                                                                            ctx, v102.0,
                                                                        );
                                                                        let v66 = C::put_in_reg(
                                                                            ctx, v48.0,
                                                                        );
                                                                        let v115 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v113, v114,
                                                                                v66,
                                                                            );
                                                                        let v116 =
                                                                            constructor_output_reg(
                                                                                ctx, v115,
                                                                            );
                                                                        let v117 = Some(v116);
                                                                        // Rule at src/isa/riscv64/lower.isle line 63.
                                                                        return v117;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v81,
                                                arg: v82,
                                            } => {
                                                if let &Opcode::Uextend = v81 {
                                                    let v83 = C::value_type(ctx, v82);
                                                    if v83 == I32 {
                                                        let v85 = constructor_put_in_xreg(ctx, v82);
                                                        let v86 =
                                                            constructor_put_in_xreg(ctx, v48.0);
                                                        let v87 =
                                                            constructor_rv_adduw(ctx, v85, v86);
                                                        let v88 = constructor_output_xreg(ctx, v87);
                                                        let v89 = Some(v88);
                                                        // Rule at src/isa/riscv64/lower.isle line 49.
                                                        return v89;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v160 = C::put_in_regs(ctx, v48.0);
                                let v162 = C::value_regs_get(ctx, v160, 0x0_usize);
                                let v163 = C::xreg_new(ctx, v162);
                                let v164 = C::put_in_regs(ctx, v48.1);
                                let v165 = C::value_regs_get(ctx, v164, 0x0_usize);
                                let v166 = C::xreg_new(ctx, v165);
                                let v167 = constructor_rv_add(ctx, v163, v166);
                                let v168 = C::put_in_regs(ctx, v48.1);
                                let v169 = C::value_regs_get(ctx, v168, 0x0_usize);
                                let v170 = C::xreg_new(ctx, v169);
                                let v171 = constructor_rv_sltu(ctx, v167, v170);
                                let v172 = C::put_in_regs(ctx, v48.0);
                                let v174 = C::value_regs_get(ctx, v172, 0x1_usize);
                                let v175 = C::xreg_new(ctx, v174);
                                let v176 = C::put_in_regs(ctx, v48.1);
                                let v177 = C::value_regs_get(ctx, v176, 0x1_usize);
                                let v178 = C::xreg_new(ctx, v177);
                                let v179 = constructor_rv_add(ctx, v175, v178);
                                let v180 = constructor_rv_add(ctx, v179, v171);
                                let v181 = C::xreg_to_reg(ctx, v167);
                                let v182 = C::xreg_to_reg(ctx, v180);
                                let v183 = C::value_regs(ctx, v181, v182);
                                let v184 = C::output(ctx, v183);
                                let v185 = Some(v184);
                                // Rule at src/isa/riscv64/lower.isle line 96.
                                return v185;
                            }
                            _ => {}
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v70 = C::i64_from_iconst(ctx, v48.0);
                            if let Some(v71) = v70 {
                                let v72 = C::imm12_from_i64(ctx, v71);
                                if let Some(v73) = v72 {
                                    let v65 = &constructor_select_addi(ctx, v60);
                                    let v74 = C::put_in_reg(ctx, v48.1);
                                    let v75 = constructor_alu_rr_imm12(ctx, v65, v74, v73);
                                    let v76 = constructor_output_reg(ctx, v75);
                                    let v77 = Some(v76);
                                    // Rule at src/isa/riscv64/lower.isle line 44.
                                    return v77;
                                }
                            }
                            let v61 = C::i64_from_iconst(ctx, v48.1);
                            if let Some(v62) = v61 {
                                let v63 = C::imm12_from_i64(ctx, v62);
                                if let Some(v64) = v63 {
                                    let v65 = &constructor_select_addi(ctx, v60);
                                    let v66 = C::put_in_reg(ctx, v48.0);
                                    let v67 = constructor_alu_rr_imm12(ctx, v65, v66, v64);
                                    let v68 = constructor_output_reg(ctx, v67);
                                    let v69 = Some(v68);
                                    // Rule at src/isa/riscv64/lower.isle line 41.
                                    return v69;
                                }
                            }
                        }
                        if v3 == I64 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                            let v52 = constructor_put_in_xreg(ctx, v48.1);
                            let v56 = constructor_rv_add(ctx, v51, v52);
                            let v57 = constructor_output_xreg(ctx, v56);
                            let v58 = Some(v57);
                            // Rule at src/isa/riscv64/lower.isle line 37.
                            return v58;
                        }
                        let v42 = C::fits_in_32(ctx, v3);
                        if let Some(v43) = v42 {
                            let v44 = C::ty_int(ctx, v43);
                            if let Some(v45) = v44 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v52 = constructor_put_in_xreg(ctx, v48.1);
                                let v53 = constructor_rv_addw(ctx, v51, v52);
                                let v54 = constructor_output_xreg(ctx, v53);
                                let v55 = Some(v54);
                                // Rule at src/isa/riscv64/lower.isle line 34.
                                return v55;
                            }
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    match v81 {
                                        &Opcode::Splat => {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    match v93 {
                                                        &Opcode::SwidenLow => {
                                                            let v197 = C::def_inst(ctx, v82);
                                                            if let Some(v198) = v197 {
                                                                let v199 = &C::inst_data(ctx, v198);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v200,
                                                                    arg: v201,
                                                                } = v199
                                                                {
                                                                    if let &Opcode::Sextend = v200 {
                                                                        let v95 =
                                                                            C::value_type(ctx, v94);
                                                                        let v265 =
                                                                            C::lane_type(ctx, v95);
                                                                        let v202 = C::value_type(
                                                                            ctx, v201,
                                                                        );
                                                                        let v266 = C::ty_equal(
                                                                            ctx, v265, v202,
                                                                        );
                                                                        if v266 == true {
                                                                            let v261 = constructor_put_in_vreg(ctx, v94);
                                                                            let v207 = constructor_put_in_xreg(ctx, v201);
                                                                            let v188 = &constructor_unmasked(ctx);
                                                                            let v254 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v95,
                                                                                );
                                                                            let v255 = v254?;
                                                                            let v256 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v255,
                                                                                );
                                                                            let v257 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v256,
                                                                                );
                                                                            let v506 = constructor_rv_vwsub_vx(ctx, v261, v207, v188, v257);
                                                                            let v507 = constructor_output_vreg(ctx, v506);
                                                                            let v508 = Some(v507);
                                                                            // Rule at src/isa/riscv64/lower.isle line 368.
                                                                            return v508;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v197 = C::def_inst(ctx, v82);
                                                            if let Some(v198) = v197 {
                                                                let v199 = &C::inst_data(ctx, v198);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v200,
                                                                    arg: v201,
                                                                } = v199
                                                                {
                                                                    if let &Opcode::Sextend = v200 {
                                                                        let v95 =
                                                                            C::value_type(ctx, v94);
                                                                        let v265 =
                                                                            C::lane_type(ctx, v95);
                                                                        let v202 = C::value_type(
                                                                            ctx, v201,
                                                                        );
                                                                        let v266 = C::ty_equal(
                                                                            ctx, v265, v202,
                                                                        );
                                                                        if v266 == true {
                                                                            let v261 = constructor_put_in_vreg(ctx, v94);
                                                                            let v284 = constructor_gen_slidedown_half(ctx, v95, v261);
                                                                            let v290 = constructor_put_in_xreg(ctx, v201);
                                                                            let v188 = &constructor_unmasked(ctx);
                                                                            let v254 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v95,
                                                                                );
                                                                            let v255 = v254?;
                                                                            let v256 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v255,
                                                                                );
                                                                            let v257 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v256,
                                                                                );
                                                                            let v515 = constructor_rv_vwsub_vx(ctx, v284, v290, v188, v257);
                                                                            let v516 = constructor_output_vreg(ctx, v515);
                                                                            let v517 = Some(v516);
                                                                            // Rule at src/isa/riscv64/lower.isle line 383.
                                                                            return v517;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v197 = C::def_inst(ctx, v82);
                                                            if let Some(v198) = v197 {
                                                                let v199 = &C::inst_data(ctx, v198);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v200,
                                                                    arg: v201,
                                                                } = v199
                                                                {
                                                                    if let &Opcode::Uextend = v200 {
                                                                        let v95 =
                                                                            C::value_type(ctx, v94);
                                                                        let v265 =
                                                                            C::lane_type(ctx, v95);
                                                                        let v202 = C::value_type(
                                                                            ctx, v201,
                                                                        );
                                                                        let v266 = C::ty_equal(
                                                                            ctx, v265, v202,
                                                                        );
                                                                        if v266 == true {
                                                                            let v261 = constructor_put_in_vreg(ctx, v94);
                                                                            let v207 = constructor_put_in_xreg(ctx, v201);
                                                                            let v188 = &constructor_unmasked(ctx);
                                                                            let v254 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v95,
                                                                                );
                                                                            let v255 = v254?;
                                                                            let v256 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v255,
                                                                                );
                                                                            let v257 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v256,
                                                                                );
                                                                            let v524 = constructor_rv_vwsubu_vx(ctx, v261, v207, v188, v257);
                                                                            let v525 = constructor_output_vreg(ctx, v524);
                                                                            let v526 = Some(v525);
                                                                            // Rule at src/isa/riscv64/lower.isle line 397.
                                                                            return v526;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v197 = C::def_inst(ctx, v82);
                                                            if let Some(v198) = v197 {
                                                                let v199 = &C::inst_data(ctx, v198);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v200,
                                                                    arg: v201,
                                                                } = v199
                                                                {
                                                                    if let &Opcode::Uextend = v200 {
                                                                        let v95 =
                                                                            C::value_type(ctx, v94);
                                                                        let v265 =
                                                                            C::lane_type(ctx, v95);
                                                                        let v202 = C::value_type(
                                                                            ctx, v201,
                                                                        );
                                                                        let v266 = C::ty_equal(
                                                                            ctx, v265, v202,
                                                                        );
                                                                        if v266 == true {
                                                                            let v261 = constructor_put_in_vreg(ctx, v94);
                                                                            let v284 = constructor_gen_slidedown_half(ctx, v95, v261);
                                                                            let v290 = constructor_put_in_xreg(ctx, v201);
                                                                            let v188 = &constructor_unmasked(ctx);
                                                                            let v254 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v95,
                                                                                );
                                                                            let v255 = v254?;
                                                                            let v256 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v255,
                                                                                );
                                                                            let v257 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v256,
                                                                                );
                                                                            let v533 = constructor_rv_vwsubu_vx(ctx, v284, v290, v188, v257);
                                                                            let v534 = constructor_output_vreg(ctx, v533);
                                                                            let v535 = Some(v534);
                                                                            // Rule at src/isa/riscv64/lower.isle line 412.
                                                                            return v535;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenLow => {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    match v93 {
                                                        &Opcode::SwidenLow => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v245 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v503 = constructor_rv_vwsub_vv(
                                                                ctx, v261, v245, v188, v257,
                                                            );
                                                            let v504 =
                                                                constructor_output_vreg(ctx, v503);
                                                            let v505 = Some(v504);
                                                            // Rule at src/isa/riscv64/lower.isle line 364.
                                                            return v505;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v284 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v261,
                                                                );
                                                            let v285 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v539 = constructor_rv_vwsub_vv(
                                                                ctx, v284, v285, v188, v257,
                                                            );
                                                            let v540 =
                                                                constructor_output_vreg(ctx, v539);
                                                            let v541 = Some(v540);
                                                            // Rule at src/isa/riscv64/lower.isle line 423.
                                                            return v541;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    match v93 {
                                                        &Opcode::SwidenLow => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v245 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v329 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v245,
                                                                );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v536 = constructor_rv_vwsub_vv(
                                                                ctx, v261, v329, v188, v257,
                                                            );
                                                            let v537 =
                                                                constructor_output_vreg(ctx, v536);
                                                            let v538 = Some(v537);
                                                            // Rule at src/isa/riscv64/lower.isle line 419.
                                                            return v538;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v284 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v261,
                                                                );
                                                            let v285 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v286 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v285,
                                                                );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v512 = constructor_rv_vwsub_vv(
                                                                ctx, v284, v286, v188, v257,
                                                            );
                                                            let v513 =
                                                                constructor_output_vreg(ctx, v512);
                                                            let v514 = Some(v513);
                                                            // Rule at src/isa/riscv64/lower.isle line 379.
                                                            return v514;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    match v93 {
                                                        &Opcode::UwidenLow => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v245 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v521 = constructor_rv_vwsubu_vv(
                                                                ctx, v261, v245, v188, v257,
                                                            );
                                                            let v522 =
                                                                constructor_output_vreg(ctx, v521);
                                                            let v523 = Some(v522);
                                                            // Rule at src/isa/riscv64/lower.isle line 393.
                                                            return v523;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v284 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v261,
                                                                );
                                                            let v285 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v545 = constructor_rv_vwsubu_vv(
                                                                ctx, v284, v285, v188, v257,
                                                            );
                                                            let v546 =
                                                                constructor_output_vreg(ctx, v545);
                                                            let v547 = Some(v546);
                                                            // Rule at src/isa/riscv64/lower.isle line 433.
                                                            return v547;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    match v93 {
                                                        &Opcode::UwidenLow => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v245 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v329 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v245,
                                                                );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v542 = constructor_rv_vwsubu_vv(
                                                                ctx, v261, v329, v188, v257,
                                                            );
                                                            let v543 =
                                                                constructor_output_vreg(ctx, v542);
                                                            let v544 = Some(v543);
                                                            // Rule at src/isa/riscv64/lower.isle line 429.
                                                            return v544;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v261 =
                                                                constructor_put_in_vreg(ctx, v94);
                                                            let v95 = C::value_type(ctx, v94);
                                                            let v284 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v261,
                                                                );
                                                            let v285 =
                                                                constructor_put_in_vreg(ctx, v82);
                                                            let v286 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v95, v285,
                                                                );
                                                            let v188 = &constructor_unmasked(ctx);
                                                            let v254 = C::ty_half_lanes(ctx, v95);
                                                            let v255 = v254?;
                                                            let v256 =
                                                                C::vstate_from_type(ctx, v255);
                                                            let v257 = C::vstate_mf2(ctx, v256);
                                                            let v530 = constructor_rv_vwsubu_vv(
                                                                ctx, v284, v286, v188, v257,
                                                            );
                                                            let v531 =
                                                                constructor_output_vreg(ctx, v530);
                                                            let v532 = Some(v531);
                                                            // Rule at src/isa/riscv64/lower.isle line 408.
                                                            return v532;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v497 = constructor_rv_vrsub_vi(ctx, v221, v241, v188, v189);
                                let v498 = constructor_output_vreg(ctx, v497);
                                let v499 = Some(v498);
                                // Rule at src/isa/riscv64/lower.isle line 354.
                                return v499;
                            }
                            let v492 = constructor_negated_replicated_imm5(ctx, v48.1);
                            if let Some(v493) = v492 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v494 = constructor_rv_vadd_vi(ctx, v186, v493, v188, v189);
                                let v495 = constructor_output_vreg(ctx, v494);
                                let v496 = Some(v495);
                                // Rule at src/isa/riscv64/lower.isle line 350.
                                return v496;
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v489 =
                                            constructor_rv_vrsub_vx(ctx, v221, v222, v188, v189);
                                        let v490 = constructor_output_vreg(ctx, v489);
                                        let v491 = Some(v490);
                                        // Rule at src/isa/riscv64/lower.isle line 347.
                                        return v491;
                                    }
                                }
                            }
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    match v81 {
                                        &Opcode::Splat => {
                                            let v197 = C::def_inst(ctx, v82);
                                            if let Some(v198) = v197 {
                                                let v199 = &C::inst_data(ctx, v198);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v200,
                                                    arg: v201,
                                                } = v199
                                                {
                                                    match v200 {
                                                        &Opcode::Uextend => {
                                                            let v203 = C::ty_half_width(ctx, v12);
                                                            if let Some(v204) = v203 {
                                                                let v205 = C::lane_type(ctx, v204);
                                                                let v202 = C::value_type(ctx, v201);
                                                                let v206 =
                                                                    C::ty_equal(ctx, v205, v202);
                                                                if v206 == true {
                                                                    let v186 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v48.0,
                                                                        );
                                                                    let v207 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v201,
                                                                        );
                                                                    let v188 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v208 = C::vstate_from_type(
                                                                        ctx, v204,
                                                                    );
                                                                    let v209 =
                                                                        C::vstate_mf2(ctx, v208);
                                                                    let v486 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v186, v207, v188,
                                                                            v209,
                                                                        );
                                                                    let v487 =
                                                                        constructor_output_vreg(
                                                                            ctx, v486,
                                                                        );
                                                                    let v488 = Some(v487);
                                                                    // Rule at src/isa/riscv64/lower.isle line 342.
                                                                    return v488;
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v203 = C::ty_half_width(ctx, v12);
                                                            if let Some(v204) = v203 {
                                                                let v205 = C::lane_type(ctx, v204);
                                                                let v202 = C::value_type(ctx, v201);
                                                                let v206 =
                                                                    C::ty_equal(ctx, v205, v202);
                                                                if v206 == true {
                                                                    let v186 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v48.0,
                                                                        );
                                                                    let v207 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v201,
                                                                        );
                                                                    let v188 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v208 = C::vstate_from_type(
                                                                        ctx, v204,
                                                                    );
                                                                    let v209 =
                                                                        C::vstate_mf2(ctx, v208);
                                                                    let v483 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v186, v207, v188,
                                                                            v209,
                                                                        );
                                                                    let v484 =
                                                                        constructor_output_vreg(
                                                                            ctx, v483,
                                                                        );
                                                                    let v485 = Some(v484);
                                                                    // Rule at src/isa/riscv64/lower.isle line 337.
                                                                    return v485;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v193 = constructor_put_in_xreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v480 =
                                                constructor_rv_vsub_vx(ctx, v186, v193, v188, v189);
                                            let v481 = constructor_output_vreg(ctx, v480);
                                            let v482 = Some(v481);
                                            // Rule at src/isa/riscv64/lower.isle line 334.
                                            return v482;
                                        }
                                        &Opcode::SwidenLow => {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v245 = constructor_put_in_vreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v83 = C::value_type(ctx, v82);
                                            let v246 = C::ty_half_lanes(ctx, v83);
                                            let v247 = v246?;
                                            let v248 = C::vstate_from_type(ctx, v247);
                                            let v249 = C::vstate_mf2(ctx, v248);
                                            let v500 = constructor_rv_vwsub_wv(
                                                ctx, v186, v245, v188, v249,
                                            );
                                            let v501 = constructor_output_vreg(ctx, v500);
                                            let v502 = Some(v501);
                                            // Rule at src/isa/riscv64/lower.isle line 361.
                                            return v502;
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v245 = constructor_put_in_vreg(ctx, v82);
                                            let v83 = C::value_type(ctx, v82);
                                            let v276 =
                                                constructor_gen_slidedown_half(ctx, v83, v245);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v246 = C::ty_half_lanes(ctx, v83);
                                            let v247 = v246?;
                                            let v248 = C::vstate_from_type(ctx, v247);
                                            let v249 = C::vstate_mf2(ctx, v248);
                                            let v509 = constructor_rv_vwsub_wv(
                                                ctx, v186, v276, v188, v249,
                                            );
                                            let v510 = constructor_output_vreg(ctx, v509);
                                            let v511 = Some(v510);
                                            // Rule at src/isa/riscv64/lower.isle line 376.
                                            return v511;
                                        }
                                        &Opcode::UwidenLow => {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v245 = constructor_put_in_vreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v83 = C::value_type(ctx, v82);
                                            let v246 = C::ty_half_lanes(ctx, v83);
                                            let v247 = v246?;
                                            let v248 = C::vstate_from_type(ctx, v247);
                                            let v249 = C::vstate_mf2(ctx, v248);
                                            let v518 = constructor_rv_vwsubu_wv(
                                                ctx, v186, v245, v188, v249,
                                            );
                                            let v519 = constructor_output_vreg(ctx, v518);
                                            let v520 = Some(v519);
                                            // Rule at src/isa/riscv64/lower.isle line 390.
                                            return v520;
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v245 = constructor_put_in_vreg(ctx, v82);
                                            let v83 = C::value_type(ctx, v82);
                                            let v276 =
                                                constructor_gen_slidedown_half(ctx, v83, v245);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v246 = C::ty_half_lanes(ctx, v83);
                                            let v247 = v246?;
                                            let v248 = C::vstate_from_type(ctx, v247);
                                            let v249 = C::vstate_mf2(ctx, v248);
                                            let v527 = constructor_rv_vwsubu_wv(
                                                ctx, v186, v276, v188, v249,
                                            );
                                            let v528 = constructor_output_vreg(ctx, v527);
                                            let v529 = Some(v528);
                                            // Rule at src/isa/riscv64/lower.isle line 405.
                                            return v529;
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v477 = constructor_rv_vsub_vv(ctx, v186, v187, v188, v189);
                            let v478 = constructor_output_vreg(ctx, v477);
                            let v479 = Some(v478);
                            // Rule at src/isa/riscv64/lower.isle line 331.
                            return v479;
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v472 = constructor_imm12_from_negated_value(ctx, v48.1);
                            if let Some(v473) = v472 {
                                let v65 = &constructor_select_addi(ctx, v60);
                                let v66 = C::put_in_reg(ctx, v48.0);
                                let v474 = constructor_alu_rr_imm12(ctx, v65, v66, v473);
                                let v475 = constructor_output_reg(ctx, v474);
                                let v476 = Some(v475);
                                // Rule at src/isa/riscv64/lower.isle line 326.
                                return v476;
                            }
                        }
                        match v3 {
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v52 = constructor_put_in_xreg(ctx, v48.1);
                                let v465 = constructor_rv_sub(ctx, v51, v52);
                                let v466 = constructor_output_xreg(ctx, v465);
                                let v467 = Some(v466);
                                // Rule at src/isa/riscv64/lower.isle line 319.
                                return v467;
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v160 = C::put_in_regs(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v469 = constructor_i128_sub(ctx, v160, v468);
                                let v470 = C::output(ctx, v469);
                                let v471 = Some(v470);
                                // Rule at src/isa/riscv64/lower.isle line 322.
                                return v471;
                            }
                            _ => {}
                        }
                        let v42 = C::fits_in_32(ctx, v3);
                        if let Some(v43) = v42 {
                            let v44 = C::ty_int(ctx, v43);
                            if let Some(v45) = v44 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v52 = constructor_put_in_xreg(ctx, v48.1);
                                let v462 = constructor_rv_subw(ctx, v51, v52);
                                let v463 = constructor_output_xreg(ctx, v462);
                                let v464 = Some(v463);
                                // Rule at src/isa/riscv64/lower.isle line 316.
                                return v464;
                            }
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v48 = C::unpack_value_array_2(ctx, v47);
                        let v78 = C::def_inst(ctx, v48.1);
                        if let Some(v79) = v78 {
                            let v80 = &C::inst_data(ctx, v79);
                            if let &InstructionData::Unary {
                                opcode: ref v81,
                                arg: v82,
                            } = v80
                            {
                                match v81 {
                                    &Opcode::Splat => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v11 = C::ty_supported_vec(ctx, v3);
                                        if let Some(v12) = v11 {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v193 = constructor_put_in_xreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v607 =
                                                constructor_rv_vmul_vx(ctx, v186, v193, v188, v189);
                                            let v608 = constructor_output_vreg(ctx, v607);
                                            let v609 = Some(v608);
                                            // Rule at src/isa/riscv64/lower.isle line 502.
                                            return v609;
                                        }
                                    }
                                    &Opcode::Uextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    if let &Opcode::Uextend = v93 {
                                                        let v583 = constructor_zext(ctx, v94);
                                                        let v584 = constructor_zext(ctx, v82);
                                                        let v585 =
                                                            constructor_rv_mul(ctx, v583, v584);
                                                        let v587 =
                                                            constructor_rv_mulhu(ctx, v583, v584);
                                                        let v586 = C::xreg_to_reg(ctx, v585);
                                                        let v588 = C::xreg_to_reg(ctx, v587);
                                                        let v589 = C::value_regs(ctx, v586, v588);
                                                        let v590 = C::output(ctx, v589);
                                                        let v591 = Some(v590);
                                                        // Rule at src/isa/riscv64/lower.isle line 484.
                                                        return v591;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v90 = C::def_inst(ctx, v48.0);
                                            if let Some(v91) = v90 {
                                                let v92 = &C::inst_data(ctx, v91);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v93,
                                                    arg: v94,
                                                } = v92
                                                {
                                                    if let &Opcode::Sextend = v93 {
                                                        let v592 = constructor_sext(ctx, v94);
                                                        let v593 = constructor_sext(ctx, v82);
                                                        let v594 =
                                                            constructor_rv_mul(ctx, v592, v593);
                                                        let v596 =
                                                            constructor_rv_mulh(ctx, v592, v593);
                                                        let v595 = C::xreg_to_reg(ctx, v594);
                                                        let v597 = C::xreg_to_reg(ctx, v596);
                                                        let v598 = C::value_regs(ctx, v595, v597);
                                                        let v599 = C::output(ctx, v598);
                                                        let v600 = Some(v599);
                                                        // Rule at src/isa/riscv64/lower.isle line 489.
                                                        return v600;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v604 =
                                            constructor_rv_vmul_vx(ctx, v221, v222, v188, v189);
                                        let v605 = constructor_output_vreg(ctx, v604);
                                        let v606 = Some(v605);
                                        // Rule at src/isa/riscv64/lower.isle line 499.
                                        return v606;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v601 = constructor_rv_vmul_vv(ctx, v186, v187, v188, v189);
                            let v602 = constructor_output_vreg(ctx, v601);
                            let v603 = Some(v602);
                            // Rule at src/isa/riscv64/lower.isle line 496.
                            return v603;
                        }
                        if v3 == I128 {
                            let v160 = C::put_in_regs(ctx, v48.0);
                            let v162 = C::value_regs_get(ctx, v160, 0x0_usize);
                            let v163 = C::xreg_new(ctx, v162);
                            let v566 = C::value_regs_get(ctx, v160, 0x1_usize);
                            let v567 = C::xreg_new(ctx, v566);
                            let v568 = C::put_in_regs(ctx, v48.1);
                            let v569 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v570 = C::xreg_new(ctx, v569);
                            let v571 = C::value_regs_get(ctx, v568, 0x1_usize);
                            let v572 = C::xreg_new(ctx, v571);
                            let v573 = constructor_rv_mulhu(ctx, v163, v570);
                            let v574 = constructor_madd(ctx, v163, v572, v573);
                            let v575 = constructor_madd(ctx, v567, v570, v574);
                            let v576 = C::zero_reg(ctx);
                            let v577 = constructor_madd(ctx, v163, v570, v576);
                            let v578 = C::xreg_to_reg(ctx, v577);
                            let v579 = C::xreg_to_reg(ctx, v575);
                            let v580 = C::value_regs(ctx, v578, v579);
                            let v581 = C::output(ctx, v580);
                            let v582 = Some(v581);
                            // Rule at src/isa/riscv64/lower.isle line 456.
                            return v582;
                        }
                        let v42 = C::fits_in_32(ctx, v3);
                        if let Some(v43) = v42 {
                            let v44 = C::ty_int(ctx, v43);
                            if let Some(v45) = v44 {
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v52 = constructor_put_in_xreg(ctx, v48.1);
                                let v563 = constructor_rv_mulw(ctx, v51, v52);
                                let v564 = constructor_output_xreg(ctx, v563);
                                let v565 = Some(v564);
                                // Rule at src/isa/riscv64/lower.isle line 452.
                                return v565;
                            }
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                            let v52 = constructor_put_in_xreg(ctx, v48.1);
                            let v560 = constructor_rv_mul(ctx, v51, v52);
                            let v561 = constructor_output_xreg(ctx, v560);
                            let v562 = Some(v561);
                            // Rule at src/isa/riscv64/lower.isle line 449.
                            return v562;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v639 =
                                            constructor_rv_vmulhu_vx(ctx, v186, v193, v188, v189);
                                        let v640 = constructor_output_vreg(ctx, v639);
                                        let v641 = Some(v640);
                                        // Rule at src/isa/riscv64/lower.isle line 532.
                                        return v641;
                                    }
                                }
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v636 =
                                            constructor_rv_vmulhu_vx(ctx, v221, v222, v188, v189);
                                        let v637 = constructor_output_vreg(ctx, v636);
                                        let v638 = Some(v637);
                                        // Rule at src/isa/riscv64/lower.isle line 529.
                                        return v638;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v633 = constructor_rv_vmulhu_vv(ctx, v186, v187, v188, v189);
                            let v634 = constructor_output_vreg(ctx, v633);
                            let v635 = Some(v634);
                            // Rule at src/isa/riscv64/lower.isle line 526.
                            return v635;
                        }
                        if v3 == I64 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                            let v52 = constructor_put_in_xreg(ctx, v48.1);
                            let v630 = constructor_rv_mulhu(ctx, v51, v52);
                            let v631 = constructor_output_xreg(ctx, v630);
                            let v632 = Some(v631);
                            // Rule at src/isa/riscv64/lower.isle line 523.
                            return v632;
                        }
                        let v42 = C::fits_in_32(ctx, v3);
                        if let Some(v43) = v42 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v624 = constructor_zext(ctx, v48.0);
                            let v625 = constructor_zext(ctx, v48.1);
                            let v626 = constructor_rv_mul(ctx, v624, v625);
                            let v447 = C::ty_bits(ctx, v43);
                            let v448 = C::u8_as_i32(ctx, v447);
                            let v449 = C::imm12_const(ctx, v448);
                            let v627 = constructor_rv_srli(ctx, v626, v449);
                            let v628 = constructor_output_xreg(ctx, v627);
                            let v629 = Some(v628);
                            // Rule at src/isa/riscv64/lower.isle line 519.
                            return v629;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v621 =
                                            constructor_rv_vmulh_vx(ctx, v186, v193, v188, v189);
                                        let v622 = constructor_output_vreg(ctx, v621);
                                        let v623 = Some(v622);
                                        // Rule at src/isa/riscv64/lower.isle line 515.
                                        return v623;
                                    }
                                }
                            }
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v618 =
                                            constructor_rv_vmulh_vx(ctx, v221, v222, v188, v189);
                                        let v619 = constructor_output_vreg(ctx, v618);
                                        let v620 = Some(v619);
                                        // Rule at src/isa/riscv64/lower.isle line 512.
                                        return v620;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v615 = constructor_rv_vmulh_vv(ctx, v186, v187, v188, v189);
                            let v616 = constructor_output_vreg(ctx, v615);
                            let v617 = Some(v616);
                            // Rule at src/isa/riscv64/lower.isle line 509.
                            return v617;
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v610 = constructor_sext(ctx, v48.0);
                            let v611 = constructor_sext(ctx, v48.1);
                            let v612 = constructor_lower_smlhi(ctx, v60, v610, v611);
                            let v613 = constructor_output_xreg(ctx, v612);
                            let v614 = Some(v613);
                            // Rule at src/isa/riscv64/lower.isle line 506.
                            return v614;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v222 = constructor_put_in_xreg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2813 =
                                            constructor_rv_vsmul_vx(ctx, v221, v222, v188, v189);
                                        let v2814 = constructor_output_vreg(ctx, v2813);
                                        let v2815 = Some(v2814);
                                        // Rule at src/isa/riscv64/lower.isle line 2961.
                                        return v2815;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v193 = constructor_put_in_xreg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2810 =
                                            constructor_rv_vsmul_vx(ctx, v186, v193, v188, v189);
                                        let v2811 = constructor_output_vreg(ctx, v2810);
                                        let v2812 = Some(v2811);
                                        // Rule at src/isa/riscv64/lower.isle line 2958.
                                        return v2812;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2807 = constructor_rv_vsmul_vv(ctx, v186, v187, v188, v189);
                            let v2808 = constructor_output_vreg(ctx, v2807);
                            let v2809 = Some(v2808);
                            // Rule at src/isa/riscv64/lower.isle line 2955.
                            return v2809;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v644 = C::has_m(ctx);
                        if v644 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v660 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v650);
                                                if let Some(v661) = v660 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v662 = constructor_rv_divuw(ctx, v51, v52);
                                                    let v663 = constructor_output_xreg(ctx, v662);
                                                    let v664 = Some(v663);
                                                    // Rule at src/isa/riscv64/lower.isle line 550.
                                                    return v664;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v625 = constructor_zext(ctx, v48.1);
                                    let v645 = constructor_nonzero_divisor(ctx, v625);
                                    let v656 = constructor_rv_divuw(ctx, v51, v645);
                                    let v657 = constructor_output_xreg(ctx, v656);
                                    let v658 = Some(v657);
                                    // Rule at src/isa/riscv64/lower.isle line 546.
                                    return v658;
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v670 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v650);
                                                if let Some(v671) = v670 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v672 = constructor_rv_divu(ctx, v51, v52);
                                                    let v673 = constructor_output_xreg(ctx, v672);
                                                    let v674 = Some(v673);
                                                    // Rule at src/isa/riscv64/lower.isle line 559.
                                                    return v674;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                    let v665 = constructor_nonzero_divisor(ctx, v52);
                                    let v666 = constructor_rv_divu(ctx, v51, v665);
                                    let v667 = constructor_output_xreg(ctx, v666);
                                    let v668 = Some(v667);
                                    // Rule at src/isa/riscv64/lower.isle line 555.
                                    return v668;
                                }
                                _ => {}
                            }
                            let v642 = C::fits_in_16(ctx, v3);
                            if let Some(v643) = v642 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v651 = C::safe_divisor_from_imm64(ctx, v643, v650);
                                            if let Some(v652) = v651 {
                                                let v624 = constructor_zext(ctx, v48.0);
                                                let v625 = constructor_zext(ctx, v48.1);
                                                let v653 = constructor_rv_divuw(ctx, v624, v625);
                                                let v654 = constructor_output_xreg(ctx, v653);
                                                let v655 = Some(v654);
                                                // Rule at src/isa/riscv64/lower.isle line 541.
                                                return v655;
                                            }
                                        }
                                    }
                                }
                                let v624 = constructor_zext(ctx, v48.0);
                                let v625 = constructor_zext(ctx, v48.1);
                                let v645 = constructor_nonzero_divisor(ctx, v625);
                                let v646 = constructor_rv_divuw(ctx, v624, v645);
                                let v647 = constructor_output_xreg(ctx, v646);
                                let v648 = Some(v647);
                                // Rule at src/isa/riscv64/lower.isle line 537.
                                return v648;
                            }
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v644 = C::has_m(ctx);
                        if v644 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v660 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v650);
                                                if let Some(v661) = v660 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v686 = constructor_rv_divw(ctx, v51, v52);
                                                    let v687 = constructor_output_xreg(ctx, v686);
                                                    let v688 = Some(v687);
                                                    // Rule at src/isa/riscv64/lower.isle line 587.
                                                    return v688;
                                                }
                                            }
                                        }
                                    }
                                    let v610 = constructor_sext(ctx, v48.0);
                                    let v611 = constructor_sext(ctx, v48.1);
                                    let v682 = constructor_safe_sdiv_divisor(ctx, I32, v610, v611);
                                    let v683 = constructor_rv_divw(ctx, v610, v682);
                                    let v684 = constructor_output_xreg(ctx, v683);
                                    let v685 = Some(v684);
                                    // Rule at src/isa/riscv64/lower.isle line 582.
                                    return v685;
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v670 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v650);
                                                if let Some(v671) = v670 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v694 = constructor_rv_div(ctx, v51, v52);
                                                    let v695 = constructor_output_xreg(ctx, v694);
                                                    let v696 = Some(v695);
                                                    // Rule at src/isa/riscv64/lower.isle line 596.
                                                    return v696;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v86 = constructor_put_in_xreg(ctx, v48.0);
                                    let v689 = constructor_put_in_xreg(ctx, v48.1);
                                    let v690 = constructor_safe_sdiv_divisor(ctx, I64, v86, v689);
                                    let v691 = constructor_rv_div(ctx, v51, v690);
                                    let v692 = constructor_output_xreg(ctx, v691);
                                    let v693 = Some(v692);
                                    // Rule at src/isa/riscv64/lower.isle line 592.
                                    return v693;
                                }
                                _ => {}
                            }
                            let v642 = C::fits_in_16(ctx, v3);
                            if let Some(v643) = v642 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v651 = C::safe_divisor_from_imm64(ctx, v643, v650);
                                            if let Some(v652) = v651 {
                                                let v610 = constructor_sext(ctx, v48.0);
                                                let v611 = constructor_sext(ctx, v48.1);
                                                let v679 = constructor_rv_divw(ctx, v610, v611);
                                                let v680 = constructor_output_xreg(ctx, v679);
                                                let v681 = Some(v680);
                                                // Rule at src/isa/riscv64/lower.isle line 577.
                                                return v681;
                                            }
                                        }
                                    }
                                }
                                let v610 = constructor_sext(ctx, v48.0);
                                let v611 = constructor_sext(ctx, v48.1);
                                let v675 = constructor_safe_sdiv_divisor(ctx, v643, v610, v611);
                                let v676 = constructor_rv_divw(ctx, v610, v675);
                                let v677 = constructor_output_xreg(ctx, v676);
                                let v678 = Some(v677);
                                // Rule at src/isa/riscv64/lower.isle line 572.
                                return v678;
                            }
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v644 = C::has_m(ctx);
                        if v644 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v660 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v650);
                                                if let Some(v661) = v660 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v706 = constructor_rv_remuw(ctx, v51, v52);
                                                    let v707 = constructor_output_xreg(ctx, v706);
                                                    let v708 = Some(v707);
                                                    // Rule at src/isa/riscv64/lower.isle line 634.
                                                    return v708;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v625 = constructor_zext(ctx, v48.1);
                                    let v645 = constructor_nonzero_divisor(ctx, v625);
                                    let v703 = constructor_rv_remuw(ctx, v51, v645);
                                    let v704 = constructor_output_xreg(ctx, v703);
                                    let v705 = Some(v704);
                                    // Rule at src/isa/riscv64/lower.isle line 630.
                                    return v705;
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v670 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v650);
                                                if let Some(v671) = v670 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v712 = constructor_rv_remu(ctx, v51, v52);
                                                    let v713 = constructor_output_xreg(ctx, v712);
                                                    let v714 = Some(v713);
                                                    // Rule at src/isa/riscv64/lower.isle line 643.
                                                    return v714;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                    let v665 = constructor_nonzero_divisor(ctx, v52);
                                    let v709 = constructor_rv_remu(ctx, v51, v665);
                                    let v710 = constructor_output_xreg(ctx, v709);
                                    let v711 = Some(v710);
                                    // Rule at src/isa/riscv64/lower.isle line 639.
                                    return v711;
                                }
                                _ => {}
                            }
                            let v642 = C::fits_in_16(ctx, v3);
                            if let Some(v643) = v642 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v651 = C::safe_divisor_from_imm64(ctx, v643, v650);
                                            if let Some(v652) = v651 {
                                                let v624 = constructor_zext(ctx, v48.0);
                                                let v625 = constructor_zext(ctx, v48.1);
                                                let v700 = constructor_rv_remuw(ctx, v624, v625);
                                                let v701 = constructor_output_xreg(ctx, v700);
                                                let v702 = Some(v701);
                                                // Rule at src/isa/riscv64/lower.isle line 625.
                                                return v702;
                                            }
                                        }
                                    }
                                }
                                let v624 = constructor_zext(ctx, v48.0);
                                let v625 = constructor_zext(ctx, v48.1);
                                let v645 = constructor_nonzero_divisor(ctx, v625);
                                let v697 = constructor_rv_remuw(ctx, v624, v645);
                                let v698 = constructor_output_xreg(ctx, v697);
                                let v699 = Some(v698);
                                // Rule at src/isa/riscv64/lower.isle line 621.
                                return v699;
                            }
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v644 = C::has_m(ctx);
                        if v644 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v660 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v650);
                                                if let Some(v661) = v660 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v725 = constructor_rv_remw(ctx, v51, v52);
                                                    let v726 = constructor_output_xreg(ctx, v725);
                                                    let v727 = Some(v726);
                                                    // Rule at src/isa/riscv64/lower.isle line 663.
                                                    return v727;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v611 = constructor_sext(ctx, v48.1);
                                    let v715 = constructor_nonzero_divisor(ctx, v611);
                                    let v722 = constructor_rv_remw(ctx, v51, v715);
                                    let v723 = constructor_output_xreg(ctx, v722);
                                    let v724 = Some(v723);
                                    // Rule at src/isa/riscv64/lower.isle line 659.
                                    return v724;
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v670 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v650);
                                                if let Some(v671) = v670 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v731 = constructor_rv_rem(ctx, v51, v52);
                                                    let v732 = constructor_output_xreg(ctx, v731);
                                                    let v733 = Some(v732);
                                                    // Rule at src/isa/riscv64/lower.isle line 672.
                                                    return v733;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v52 = constructor_put_in_xreg(ctx, v48.1);
                                    let v665 = constructor_nonzero_divisor(ctx, v52);
                                    let v728 = constructor_rv_rem(ctx, v51, v665);
                                    let v729 = constructor_output_xreg(ctx, v728);
                                    let v730 = Some(v729);
                                    // Rule at src/isa/riscv64/lower.isle line 668.
                                    return v730;
                                }
                                _ => {}
                            }
                            let v642 = C::fits_in_16(ctx, v3);
                            if let Some(v643) = v642 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v651 = C::safe_divisor_from_imm64(ctx, v643, v650);
                                            if let Some(v652) = v651 {
                                                let v610 = constructor_sext(ctx, v48.0);
                                                let v611 = constructor_sext(ctx, v48.1);
                                                let v719 = constructor_rv_remw(ctx, v610, v611);
                                                let v720 = constructor_output_xreg(ctx, v719);
                                                let v721 = Some(v720);
                                                // Rule at src/isa/riscv64/lower.isle line 654.
                                                return v721;
                                            }
                                        }
                                    }
                                }
                                let v610 = constructor_sext(ctx, v48.0);
                                let v611 = constructor_sext(ctx, v48.1);
                                let v715 = constructor_nonzero_divisor(ctx, v611);
                                let v716 = constructor_rv_remw(ctx, v610, v715);
                                let v717 = constructor_output_xreg(ctx, v716);
                                let v718 = Some(v717);
                                // Rule at src/isa/riscv64/lower.isle line 650.
                                return v718;
                            }
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v826 = C::has_zbs(ctx);
                        if v826 == true {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                match v92 {
                                    &InstructionData::Binary {
                                        opcode: ref v118,
                                        args: ref v119,
                                    } => {
                                        match v118 {
                                            &Opcode::Ushr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v78 = C::def_inst(ctx, v48.1);
                                                        if let Some(v79) = v78 {
                                                            let v80 = &C::inst_data(ctx, v79);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v649,
                                                                imm: v650,
                                                            } = v80
                                                            {
                                                                if let &Opcode::Iconst = v649 {
                                                                    let v849 = C::u64_from_imm64(
                                                                        ctx, v650,
                                                                    );
                                                                    if v849 == 0x1_u64 {
                                                                        let v120 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v119,
                                                                            );
                                                                        let v883 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v120.1,
                                                                            );
                                                                        if let Some(v884) = v883 {
                                                                            let v885 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v884,
                                                                                );
                                                                            if let Some(v886) = v885
                                                                            {
                                                                                let v863 = constructor_put_in_xreg(ctx, v120.0);
                                                                                let v888 =
                                                                                    C::imm12_and(
                                                                                        ctx, v886,
                                                                                        0x1f_u64,
                                                                                    );
                                                                                let v889 = constructor_rv_bexti(ctx, v863, v888);
                                                                                let v890 = constructor_output_xreg(ctx, v889);
                                                                                let v891 =
                                                                                    Some(v890);
                                                                                // Rule at src/isa/riscv64/lower.isle line 795.
                                                                                return v891;
                                                                            }
                                                                        }
                                                                        let v863 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.0,
                                                                            );
                                                                        let v864 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.1,
                                                                            );
                                                                        let v866 = C::imm12_const(
                                                                            ctx, 31_i32,
                                                                        );
                                                                        let v867 =
                                                                            constructor_rv_andi(
                                                                                ctx, v864, v866,
                                                                            );
                                                                        let v868 =
                                                                            constructor_rv_bext(
                                                                                ctx, v863, v867,
                                                                            );
                                                                        let v869 =
                                                                            constructor_output_xreg(
                                                                                ctx, v868,
                                                                            );
                                                                        let v870 = Some(v869);
                                                                        // Rule at src/isa/riscv64/lower.isle line 769.
                                                                        return v870;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v78 = C::def_inst(ctx, v48.1);
                                                        if let Some(v79) = v78 {
                                                            let v80 = &C::inst_data(ctx, v79);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v649,
                                                                imm: v650,
                                                            } = v80
                                                            {
                                                                if let &Opcode::Iconst = v649 {
                                                                    let v849 = C::u64_from_imm64(
                                                                        ctx, v650,
                                                                    );
                                                                    if v849 == 0x1_u64 {
                                                                        let v120 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v119,
                                                                            );
                                                                        let v883 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v120.1,
                                                                            );
                                                                        if let Some(v884) = v883 {
                                                                            let v885 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v884,
                                                                                );
                                                                            if let Some(v886) = v885
                                                                            {
                                                                                let v863 = constructor_put_in_xreg(ctx, v120.0);
                                                                                let v893 =
                                                                                    C::imm12_and(
                                                                                        ctx, v886,
                                                                                        0x3f_u64,
                                                                                    );
                                                                                let v894 = constructor_rv_bexti(ctx, v863, v893);
                                                                                let v895 = constructor_output_xreg(ctx, v894);
                                                                                let v896 =
                                                                                    Some(v895);
                                                                                // Rule at src/isa/riscv64/lower.isle line 801.
                                                                                return v896;
                                                                            }
                                                                        }
                                                                        let v863 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.0,
                                                                            );
                                                                        let v864 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.1,
                                                                            );
                                                                        let v877 =
                                                                            constructor_rv_bext(
                                                                                ctx, v863, v864,
                                                                            );
                                                                        let v878 =
                                                                            constructor_output_xreg(
                                                                                ctx, v877,
                                                                            );
                                                                        let v879 = Some(v878);
                                                                        // Rule at src/isa/riscv64/lower.isle line 782.
                                                                        return v879;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            &Opcode::Sshr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v78 = C::def_inst(ctx, v48.1);
                                                        if let Some(v79) = v78 {
                                                            let v80 = &C::inst_data(ctx, v79);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v649,
                                                                imm: v650,
                                                            } = v80
                                                            {
                                                                if let &Opcode::Iconst = v649 {
                                                                    let v849 = C::u64_from_imm64(
                                                                        ctx, v650,
                                                                    );
                                                                    if v849 == 0x1_u64 {
                                                                        let v120 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v119,
                                                                            );
                                                                        let v883 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v120.1,
                                                                            );
                                                                        if let Some(v884) = v883 {
                                                                            let v885 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v884,
                                                                                );
                                                                            if let Some(v886) = v885
                                                                            {
                                                                                let v863 = constructor_put_in_xreg(ctx, v120.0);
                                                                                let v888 =
                                                                                    C::imm12_and(
                                                                                        ctx, v886,
                                                                                        0x1f_u64,
                                                                                    );
                                                                                let v889 = constructor_rv_bexti(ctx, v863, v888);
                                                                                let v890 = constructor_output_xreg(ctx, v889);
                                                                                let v891 =
                                                                                    Some(v890);
                                                                                // Rule at src/isa/riscv64/lower.isle line 798.
                                                                                return v891;
                                                                            }
                                                                        }
                                                                        let v863 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.0,
                                                                            );
                                                                        let v864 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.1,
                                                                            );
                                                                        let v866 = C::imm12_const(
                                                                            ctx, 31_i32,
                                                                        );
                                                                        let v867 =
                                                                            constructor_rv_andi(
                                                                                ctx, v864, v866,
                                                                            );
                                                                        let v868 =
                                                                            constructor_rv_bext(
                                                                                ctx, v863, v867,
                                                                            );
                                                                        let v869 =
                                                                            constructor_output_xreg(
                                                                                ctx, v868,
                                                                            );
                                                                        let v870 = Some(v869);
                                                                        // Rule at src/isa/riscv64/lower.isle line 772.
                                                                        return v870;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v78 = C::def_inst(ctx, v48.1);
                                                        if let Some(v79) = v78 {
                                                            let v80 = &C::inst_data(ctx, v79);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v649,
                                                                imm: v650,
                                                            } = v80
                                                            {
                                                                if let &Opcode::Iconst = v649 {
                                                                    let v849 = C::u64_from_imm64(
                                                                        ctx, v650,
                                                                    );
                                                                    if v849 == 0x1_u64 {
                                                                        let v120 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v119,
                                                                            );
                                                                        let v883 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v120.1,
                                                                            );
                                                                        if let Some(v884) = v883 {
                                                                            let v885 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v884,
                                                                                );
                                                                            if let Some(v886) = v885
                                                                            {
                                                                                let v863 = constructor_put_in_xreg(ctx, v120.0);
                                                                                let v893 =
                                                                                    C::imm12_and(
                                                                                        ctx, v886,
                                                                                        0x3f_u64,
                                                                                    );
                                                                                let v894 = constructor_rv_bexti(ctx, v863, v893);
                                                                                let v895 = constructor_output_xreg(ctx, v894);
                                                                                let v896 =
                                                                                    Some(v895);
                                                                                // Rule at src/isa/riscv64/lower.isle line 804.
                                                                                return v896;
                                                                            }
                                                                        }
                                                                        let v863 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.0,
                                                                            );
                                                                        let v864 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v120.1,
                                                                            );
                                                                        let v877 =
                                                                            constructor_rv_bext(
                                                                                ctx, v863, v864,
                                                                            );
                                                                        let v878 =
                                                                            constructor_output_xreg(
                                                                                ctx, v877,
                                                                            );
                                                                        let v879 = Some(v878);
                                                                        // Rule at src/isa/riscv64/lower.isle line 785.
                                                                        return v879;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v855,
                                        imm: v856,
                                    } => {
                                        if let &Opcode::Iconst = v855 {
                                            let v3 = C::value_type(ctx, v2);
                                            match v3 {
                                                I32 => {
                                                    let v78 = C::def_inst(ctx, v48.1);
                                                    if let Some(v79) = v78 {
                                                        let v80 = &C::inst_data(ctx, v79);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v100,
                                                            args: ref v101,
                                                        } = v80
                                                        {
                                                            match v100 {
                                                                &Opcode::Ushr => {
                                                                    let v857 = C::u64_from_imm64(
                                                                        ctx, v856,
                                                                    );
                                                                    if v857 == 0x1_u64 {
                                                                        let v102 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v101,
                                                                            );
                                                                        let v871 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.0,
                                                                            );
                                                                        let v872 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.1,
                                                                            );
                                                                        let v866 = C::imm12_const(
                                                                            ctx, 31_i32,
                                                                        );
                                                                        let v873 =
                                                                            constructor_rv_andi(
                                                                                ctx, v872, v866,
                                                                            );
                                                                        let v874 =
                                                                            constructor_rv_bext(
                                                                                ctx, v871, v873,
                                                                            );
                                                                        let v875 =
                                                                            constructor_output_xreg(
                                                                                ctx, v874,
                                                                            );
                                                                        let v876 = Some(v875);
                                                                        // Rule at src/isa/riscv64/lower.isle line 775.
                                                                        return v876;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v857 = C::u64_from_imm64(
                                                                        ctx, v856,
                                                                    );
                                                                    if v857 == 0x1_u64 {
                                                                        let v102 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v101,
                                                                            );
                                                                        let v871 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.0,
                                                                            );
                                                                        let v872 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.1,
                                                                            );
                                                                        let v866 = C::imm12_const(
                                                                            ctx, 31_i32,
                                                                        );
                                                                        let v873 =
                                                                            constructor_rv_andi(
                                                                                ctx, v872, v866,
                                                                            );
                                                                        let v874 =
                                                                            constructor_rv_bext(
                                                                                ctx, v871, v873,
                                                                            );
                                                                        let v875 =
                                                                            constructor_output_xreg(
                                                                                ctx, v874,
                                                                            );
                                                                        let v876 = Some(v875);
                                                                        // Rule at src/isa/riscv64/lower.isle line 778.
                                                                        return v876;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                I64 => {
                                                    let v78 = C::def_inst(ctx, v48.1);
                                                    if let Some(v79) = v78 {
                                                        let v80 = &C::inst_data(ctx, v79);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v100,
                                                            args: ref v101,
                                                        } = v80
                                                        {
                                                            match v100 {
                                                                &Opcode::Ushr => {
                                                                    let v857 = C::u64_from_imm64(
                                                                        ctx, v856,
                                                                    );
                                                                    if v857 == 0x1_u64 {
                                                                        let v102 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v101,
                                                                            );
                                                                        let v871 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.0,
                                                                            );
                                                                        let v872 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.1,
                                                                            );
                                                                        let v880 =
                                                                            constructor_rv_bext(
                                                                                ctx, v871, v872,
                                                                            );
                                                                        let v881 =
                                                                            constructor_output_xreg(
                                                                                ctx, v880,
                                                                            );
                                                                        let v882 = Some(v881);
                                                                        // Rule at src/isa/riscv64/lower.isle line 788.
                                                                        return v882;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v857 = C::u64_from_imm64(
                                                                        ctx, v856,
                                                                    );
                                                                    if v857 == 0x1_u64 {
                                                                        let v102 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v101,
                                                                            );
                                                                        let v871 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.0,
                                                                            );
                                                                        let v872 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v102.1,
                                                                            );
                                                                        let v880 =
                                                                            constructor_rv_bext(
                                                                                ctx, v871, v872,
                                                                            );
                                                                        let v881 =
                                                                            constructor_output_xreg(
                                                                                ctx, v880,
                                                                            );
                                                                        let v882 = Some(v881);
                                                                        // Rule at src/isa/riscv64/lower.isle line 791.
                                                                        return v882;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v734 = C::fits_in_64(ctx, v3);
                                            if let Some(v735) = v734 {
                                                let v857 = C::u64_from_imm64(ctx, v856);
                                                let v858 = C::bclr_imm(ctx, v735, v857);
                                                if let Some(v859) = v858 {
                                                    let v757 = constructor_put_in_xreg(ctx, v48.1);
                                                    let v860 =
                                                        constructor_rv_bclri(ctx, v757, v859);
                                                    let v861 = constructor_output_xreg(ctx, v860);
                                                    let v862 = Some(v861);
                                                    // Rule at src/isa/riscv64/lower.isle line 759.
                                                    return v862;
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v649,
                                    imm: v650,
                                } = v80
                                {
                                    if let &Opcode::Iconst = v649 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v734 = C::fits_in_64(ctx, v3);
                                        if let Some(v735) = v734 {
                                            let v849 = C::u64_from_imm64(ctx, v650);
                                            let v850 = C::bclr_imm(ctx, v735, v849);
                                            if let Some(v851) = v850 {
                                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                let v852 = constructor_rv_bclri(ctx, v51, v851);
                                                let v853 = constructor_output_xreg(ctx, v852);
                                                let v854 = Some(v853);
                                                // Rule at src/isa/riscv64/lower.isle line 755.
                                                return v854;
                                            }
                                        }
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I64 {
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Bnot = v93 {
                                            let v226 = C::def_inst(ctx, v94);
                                            if let Some(v227) = v226 {
                                                let v228 = &C::inst_data(ctx, v227);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v409,
                                                    args: ref v410,
                                                } = v228
                                                {
                                                    if let &Opcode::Ishl = v409 {
                                                        let v411 =
                                                            C::unpack_value_array_2(ctx, v410);
                                                        let v836 = C::i64_from_iconst(ctx, v411.0);
                                                        if let Some(v837) = v836 {
                                                            if v837 == 1_i64 {
                                                                let v757 = constructor_put_in_xreg(
                                                                    ctx, v48.1,
                                                                );
                                                                let v838 = constructor_put_in_xreg(
                                                                    ctx, v411.1,
                                                                );
                                                                let v846 = constructor_rv_bclr(
                                                                    ctx, v757, v838,
                                                                );
                                                                let v847 = constructor_output_xreg(
                                                                    ctx, v846,
                                                                );
                                                                let v848 = Some(v847);
                                                                // Rule at src/isa/riscv64/lower.isle line 751.
                                                                return v848;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Bnot = v81 {
                                            let v197 = C::def_inst(ctx, v82);
                                            if let Some(v198) = v197 {
                                                let v199 = &C::inst_data(ctx, v198);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v380,
                                                    args: ref v381,
                                                } = v199
                                                {
                                                    if let &Opcode::Ishl = v380 {
                                                        let v382 =
                                                            C::unpack_value_array_2(ctx, v381);
                                                        let v824 = C::i64_from_iconst(ctx, v382.0);
                                                        if let Some(v825) = v824 {
                                                            if v825 == 1_i64 {
                                                                let v51 = constructor_put_in_xreg(
                                                                    ctx, v48.0,
                                                                );
                                                                let v827 = constructor_put_in_xreg(
                                                                    ctx, v382.1,
                                                                );
                                                                let v843 = constructor_rv_bclr(
                                                                    ctx, v51, v827,
                                                                );
                                                                let v844 = constructor_output_xreg(
                                                                    ctx, v843,
                                                                );
                                                                let v845 = Some(v844);
                                                                // Rule at src/isa/riscv64/lower.isle line 748.
                                                                return v845;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v42 = C::fits_in_32(ctx, v3);
                            if let Some(v43) = v42 {
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Bnot = v93 {
                                            let v226 = C::def_inst(ctx, v94);
                                            if let Some(v227) = v226 {
                                                let v228 = &C::inst_data(ctx, v227);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v409,
                                                    args: ref v410,
                                                } = v228
                                                {
                                                    if let &Opcode::Ishl = v409 {
                                                        let v411 =
                                                            C::unpack_value_array_2(ctx, v410);
                                                        let v836 = C::i64_from_iconst(ctx, v411.0);
                                                        if let Some(v837) = v836 {
                                                            if v837 == 1_i64 {
                                                                let v757 = constructor_put_in_xreg(
                                                                    ctx, v48.1,
                                                                );
                                                                let v838 = constructor_put_in_xreg(
                                                                    ctx, v411.1,
                                                                );
                                                                let v447 = C::ty_bits(ctx, v43);
                                                                let v829 =
                                                                    C::u8_sub(ctx, v447, 0x1_u8);
                                                                let v830 = C::u8_as_i32(ctx, v829);
                                                                let v831 =
                                                                    C::imm12_const(ctx, v830);
                                                                let v839 = constructor_rv_andi(
                                                                    ctx, v838, v831,
                                                                );
                                                                let v840 = constructor_rv_bclr(
                                                                    ctx, v757, v839,
                                                                );
                                                                let v841 = constructor_output_xreg(
                                                                    ctx, v840,
                                                                );
                                                                let v842 = Some(v841);
                                                                // Rule at src/isa/riscv64/lower.isle line 744.
                                                                return v842;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Bnot = v81 {
                                            let v197 = C::def_inst(ctx, v82);
                                            if let Some(v198) = v197 {
                                                let v199 = &C::inst_data(ctx, v198);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v380,
                                                    args: ref v381,
                                                } = v199
                                                {
                                                    if let &Opcode::Ishl = v380 {
                                                        let v382 =
                                                            C::unpack_value_array_2(ctx, v381);
                                                        let v824 = C::i64_from_iconst(ctx, v382.0);
                                                        if let Some(v825) = v824 {
                                                            if v825 == 1_i64 {
                                                                let v51 = constructor_put_in_xreg(
                                                                    ctx, v48.0,
                                                                );
                                                                let v827 = constructor_put_in_xreg(
                                                                    ctx, v382.1,
                                                                );
                                                                let v447 = C::ty_bits(ctx, v43);
                                                                let v829 =
                                                                    C::u8_sub(ctx, v447, 0x1_u8);
                                                                let v830 = C::u8_as_i32(ctx, v829);
                                                                let v831 =
                                                                    C::imm12_const(ctx, v830);
                                                                let v832 = constructor_rv_andi(
                                                                    ctx, v827, v831,
                                                                );
                                                                let v833 = constructor_rv_bclr(
                                                                    ctx, v51, v832,
                                                                );
                                                                let v834 = constructor_output_xreg(
                                                                    ctx, v833,
                                                                );
                                                                let v835 = Some(v834);
                                                                // Rule at src/isa/riscv64/lower.isle line 741.
                                                                return v835;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v821 = constructor_rv_vand_vi(ctx, v221, v241, v188, v189);
                                let v822 = constructor_output_vreg(ctx, v821);
                                let v823 = Some(v822);
                                // Rule at src/isa/riscv64/lower.isle line 735.
                                return v823;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v818 = constructor_rv_vand_vi(ctx, v186, v217, v188, v189);
                                let v819 = constructor_output_vreg(ctx, v818);
                                let v820 = Some(v819);
                                // Rule at src/isa/riscv64/lower.isle line 731.
                                return v820;
                            }
                            let v810 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v811) = v810 {
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Splat = v93 {
                                            let v221 = constructor_put_in_vreg(ctx, v48.1);
                                            let v222 = constructor_put_in_xreg(ctx, v94);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v815 =
                                                constructor_rv_vand_vx(ctx, v221, v222, v188, v189);
                                            let v816 = constructor_output_vreg(ctx, v815);
                                            let v817 = Some(v816);
                                            // Rule at src/isa/riscv64/lower.isle line 727.
                                            return v817;
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Splat = v81 {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v193 = constructor_put_in_xreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v812 =
                                                constructor_rv_vand_vx(ctx, v186, v193, v188, v189);
                                            let v813 = constructor_output_vreg(ctx, v812);
                                            let v814 = Some(v813);
                                            // Rule at src/isa/riscv64/lower.isle line 723.
                                            return v814;
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v807 = constructor_rv_vand_vv(ctx, v186, v187, v188, v189);
                            let v808 = constructor_output_vreg(ctx, v807);
                            let v809 = Some(v808);
                            // Rule at src/isa/riscv64/lower.isle line 720.
                            return v809;
                        }
                        let v769 = C::has_zbb(ctx);
                        if v769 == true {
                            if v3 == I128 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Bnot = v93 {
                                            let v789 = C::put_in_regs(ctx, v48.1);
                                            let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                            let v791 = C::xreg_new(ctx, v790);
                                            let v792 = C::put_in_regs(ctx, v94);
                                            let v793 = C::value_regs_get(ctx, v792, 0x0_usize);
                                            let v794 = C::xreg_new(ctx, v793);
                                            let v795 = constructor_rv_andn(ctx, v791, v794);
                                            let v168 = C::put_in_regs(ctx, v48.1);
                                            let v796 = C::value_regs_get(ctx, v168, 0x1_usize);
                                            let v797 = C::xreg_new(ctx, v796);
                                            let v798 = C::put_in_regs(ctx, v94);
                                            let v799 = C::value_regs_get(ctx, v798, 0x1_usize);
                                            let v800 = C::xreg_new(ctx, v799);
                                            let v801 = constructor_rv_andn(ctx, v797, v800);
                                            let v802 = C::xreg_to_reg(ctx, v795);
                                            let v803 = C::xreg_to_reg(ctx, v801);
                                            let v804 = C::value_regs(ctx, v802, v803);
                                            let v805 = C::output(ctx, v804);
                                            let v806 = Some(v805);
                                            // Rule at src/isa/riscv64/lower.isle line 714.
                                            return v806;
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Bnot = v81 {
                                            let v160 = C::put_in_regs(ctx, v48.0);
                                            let v162 = C::value_regs_get(ctx, v160, 0x0_usize);
                                            let v163 = C::xreg_new(ctx, v162);
                                            let v776 = C::put_in_regs(ctx, v82);
                                            let v777 = C::value_regs_get(ctx, v776, 0x0_usize);
                                            let v778 = C::xreg_new(ctx, v777);
                                            let v779 = constructor_rv_andn(ctx, v163, v778);
                                            let v741 = C::put_in_regs(ctx, v48.0);
                                            let v742 = C::value_regs_get(ctx, v741, 0x1_usize);
                                            let v743 = C::xreg_new(ctx, v742);
                                            let v780 = C::put_in_regs(ctx, v82);
                                            let v781 = C::value_regs_get(ctx, v780, 0x1_usize);
                                            let v782 = C::xreg_new(ctx, v781);
                                            let v783 = constructor_rv_andn(ctx, v743, v782);
                                            let v784 = C::xreg_to_reg(ctx, v779);
                                            let v785 = C::xreg_to_reg(ctx, v783);
                                            let v786 = C::value_regs(ctx, v784, v785);
                                            let v787 = C::output(ctx, v786);
                                            let v788 = Some(v787);
                                            // Rule at src/isa/riscv64/lower.isle line 708.
                                            return v788;
                                        }
                                    }
                                }
                            }
                            let v734 = C::fits_in_64(ctx, v3);
                            if let Some(v735) = v734 {
                                let v752 = C::ty_int(ctx, v735);
                                if let Some(v753) = v752 {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Unary {
                                            opcode: ref v93,
                                            arg: v94,
                                        } = v92
                                        {
                                            if let &Opcode::Bnot = v93 {
                                                let v757 = constructor_put_in_xreg(ctx, v48.1);
                                                let v222 = constructor_put_in_xreg(ctx, v94);
                                                let v773 = constructor_rv_andn(ctx, v757, v222);
                                                let v774 = constructor_output_xreg(ctx, v773);
                                                let v775 = Some(v774);
                                                // Rule at src/isa/riscv64/lower.isle line 704.
                                                return v775;
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Unary {
                                            opcode: ref v81,
                                            arg: v82,
                                        } = v80
                                        {
                                            if let &Opcode::Bnot = v81 {
                                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                let v193 = constructor_put_in_xreg(ctx, v82);
                                                let v770 = constructor_rv_andn(ctx, v51, v193);
                                                let v771 = constructor_output_xreg(ctx, v770);
                                                let v772 = Some(v771);
                                                // Rule at src/isa/riscv64/lower.isle line 700.
                                                return v772;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v766 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v764,
                                v765,
                                v762,
                            );
                            let v767 = constructor_output_freg(ctx, v766);
                            let v768 = Some(v767);
                            // Rule at src/isa/riscv64/lower.isle line 693.
                            return v768;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v752 = C::ty_int(ctx, v735);
                            if let Some(v753) = v752 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v70 = C::i64_from_iconst(ctx, v48.0);
                                if let Some(v71) = v70 {
                                    let v72 = C::imm12_from_i64(ctx, v71);
                                    if let Some(v73) = v72 {
                                        let v757 = constructor_put_in_xreg(ctx, v48.1);
                                        let v758 = constructor_rv_andi(ctx, v757, v73);
                                        let v759 = constructor_output_xreg(ctx, v758);
                                        let v760 = Some(v759);
                                        // Rule at src/isa/riscv64/lower.isle line 690.
                                        return v760;
                                    }
                                }
                                let v61 = C::i64_from_iconst(ctx, v48.1);
                                if let Some(v62) = v61 {
                                    let v63 = C::imm12_from_i64(ctx, v62);
                                    if let Some(v64) = v63 {
                                        let v51 = constructor_put_in_xreg(ctx, v48.0);
                                        let v754 = constructor_rv_andi(ctx, v51, v64);
                                        let v755 = constructor_output_xreg(ctx, v754);
                                        let v756 = Some(v755);
                                        // Rule at src/isa/riscv64/lower.isle line 687.
                                        return v756;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v160 = C::put_in_regs(ctx, v48.0);
                            let v162 = C::value_regs_get(ctx, v160, 0x0_usize);
                            let v163 = C::xreg_new(ctx, v162);
                            let v164 = C::put_in_regs(ctx, v48.1);
                            let v165 = C::value_regs_get(ctx, v164, 0x0_usize);
                            let v166 = C::xreg_new(ctx, v165);
                            let v739 = constructor_rv_and(ctx, v163, v166);
                            let v741 = C::put_in_regs(ctx, v48.0);
                            let v742 = C::value_regs_get(ctx, v741, 0x1_usize);
                            let v743 = C::xreg_new(ctx, v742);
                            let v744 = C::put_in_regs(ctx, v48.1);
                            let v745 = C::value_regs_get(ctx, v744, 0x1_usize);
                            let v746 = C::xreg_new(ctx, v745);
                            let v747 = constructor_rv_and(ctx, v743, v746);
                            let v740 = C::xreg_to_reg(ctx, v739);
                            let v748 = C::xreg_to_reg(ctx, v747);
                            let v749 = C::value_regs(ctx, v740, v748);
                            let v750 = C::output(ctx, v749);
                            let v751 = Some(v750);
                            // Rule at src/isa/riscv64/lower.isle line 681.
                            return v751;
                        }
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                            let v52 = constructor_put_in_xreg(ctx, v48.1);
                            let v736 = constructor_rv_and(ctx, v51, v52);
                            let v737 = constructor_output_xreg(ctx, v736);
                            let v738 = Some(v737);
                            // Rule at src/isa/riscv64/lower.isle line 678.
                            return v738;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v826 = C::has_zbs(ctx);
                        if v826 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v734 = C::fits_in_64(ctx, v3);
                            if let Some(v735) = v734 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v855,
                                        imm: v856,
                                    } = v92
                                    {
                                        if let &Opcode::Iconst = v855 {
                                            let v857 = C::u64_from_imm64(ctx, v856);
                                            let v966 = C::bseti_imm(ctx, v857);
                                            if let Some(v967) = v966 {
                                                let v757 = constructor_put_in_xreg(ctx, v48.1);
                                                let v968 = constructor_rv_bseti(ctx, v757, v967);
                                                let v969 = constructor_output_xreg(ctx, v968);
                                                let v970 = Some(v969);
                                                // Rule at src/isa/riscv64/lower.isle line 885.
                                                return v970;
                                            }
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v849 = C::u64_from_imm64(ctx, v650);
                                            let v961 = C::bseti_imm(ctx, v849);
                                            if let Some(v962) = v961 {
                                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                let v963 = constructor_rv_bseti(ctx, v51, v962);
                                                let v964 = constructor_output_xreg(ctx, v963);
                                                let v965 = Some(v964);
                                                // Rule at src/isa/riscv64/lower.isle line 881.
                                                return v965;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Binary {
                                            opcode: ref v118,
                                            args: ref v119,
                                        } = v92
                                        {
                                            if let &Opcode::Ishl = v118 {
                                                let v120 = C::unpack_value_array_2(ctx, v119);
                                                let v950 = C::i64_from_iconst(ctx, v120.0);
                                                if let Some(v951) = v950 {
                                                    if v951 == 1_i64 {
                                                        let v757 =
                                                            constructor_put_in_xreg(ctx, v48.1);
                                                        let v864 =
                                                            constructor_put_in_xreg(ctx, v120.1);
                                                        let v866 = C::imm12_const(ctx, 31_i32);
                                                        let v867 =
                                                            constructor_rv_andi(ctx, v864, v866);
                                                        let v952 =
                                                            constructor_rv_bset(ctx, v757, v867);
                                                        let v953 =
                                                            constructor_output_xreg(ctx, v952);
                                                        let v954 = Some(v953);
                                                        // Rule at src/isa/riscv64/lower.isle line 870.
                                                        return v954;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Binary {
                                            opcode: ref v100,
                                            args: ref v101,
                                        } = v80
                                        {
                                            if let &Opcode::Ishl = v100 {
                                                let v102 = C::unpack_value_array_2(ctx, v101);
                                                let v945 = C::i64_from_iconst(ctx, v102.0);
                                                if let Some(v946) = v945 {
                                                    if v946 == 1_i64 {
                                                        let v51 =
                                                            constructor_put_in_xreg(ctx, v48.0);
                                                        let v872 =
                                                            constructor_put_in_xreg(ctx, v102.1);
                                                        let v866 = C::imm12_const(ctx, 31_i32);
                                                        let v873 =
                                                            constructor_rv_andi(ctx, v872, v866);
                                                        let v947 =
                                                            constructor_rv_bset(ctx, v51, v873);
                                                        let v948 =
                                                            constructor_output_xreg(ctx, v947);
                                                        let v949 = Some(v948);
                                                        // Rule at src/isa/riscv64/lower.isle line 867.
                                                        return v949;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Binary {
                                            opcode: ref v118,
                                            args: ref v119,
                                        } = v92
                                        {
                                            if let &Opcode::Ishl = v118 {
                                                let v120 = C::unpack_value_array_2(ctx, v119);
                                                let v950 = C::i64_from_iconst(ctx, v120.0);
                                                if let Some(v951) = v950 {
                                                    if v951 == 1_i64 {
                                                        let v757 =
                                                            constructor_put_in_xreg(ctx, v48.1);
                                                        let v864 =
                                                            constructor_put_in_xreg(ctx, v120.1);
                                                        let v958 =
                                                            constructor_rv_bset(ctx, v757, v864);
                                                        let v959 =
                                                            constructor_output_xreg(ctx, v958);
                                                        let v960 = Some(v959);
                                                        // Rule at src/isa/riscv64/lower.isle line 877.
                                                        return v960;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Binary {
                                            opcode: ref v100,
                                            args: ref v101,
                                        } = v80
                                        {
                                            if let &Opcode::Ishl = v100 {
                                                let v102 = C::unpack_value_array_2(ctx, v101);
                                                let v945 = C::i64_from_iconst(ctx, v102.0);
                                                if let Some(v946) = v945 {
                                                    if v946 == 1_i64 {
                                                        let v51 =
                                                            constructor_put_in_xreg(ctx, v48.0);
                                                        let v872 =
                                                            constructor_put_in_xreg(ctx, v102.1);
                                                        let v955 =
                                                            constructor_rv_bset(ctx, v51, v872);
                                                        let v956 =
                                                            constructor_output_xreg(ctx, v955);
                                                        let v957 = Some(v956);
                                                        // Rule at src/isa/riscv64/lower.isle line 874.
                                                        return v957;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v942 = constructor_rv_vor_vi(ctx, v221, v241, v188, v189);
                                let v943 = constructor_output_vreg(ctx, v942);
                                let v944 = Some(v943);
                                // Rule at src/isa/riscv64/lower.isle line 861.
                                return v944;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v939 = constructor_rv_vor_vi(ctx, v186, v217, v188, v189);
                                let v940 = constructor_output_vreg(ctx, v939);
                                let v941 = Some(v940);
                                // Rule at src/isa/riscv64/lower.isle line 857.
                                return v941;
                            }
                            let v810 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v811) = v810 {
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Splat = v93 {
                                            let v221 = constructor_put_in_vreg(ctx, v48.1);
                                            let v222 = constructor_put_in_xreg(ctx, v94);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v936 =
                                                constructor_rv_vor_vx(ctx, v221, v222, v188, v189);
                                            let v937 = constructor_output_vreg(ctx, v936);
                                            let v938 = Some(v937);
                                            // Rule at src/isa/riscv64/lower.isle line 853.
                                            return v938;
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Splat = v81 {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v193 = constructor_put_in_xreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v933 =
                                                constructor_rv_vor_vx(ctx, v186, v193, v188, v189);
                                            let v934 = constructor_output_vreg(ctx, v933);
                                            let v935 = Some(v934);
                                            // Rule at src/isa/riscv64/lower.isle line 849.
                                            return v935;
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v930 = constructor_rv_vor_vv(ctx, v186, v187, v188, v189);
                            let v931 = constructor_output_vreg(ctx, v930);
                            let v932 = Some(v931);
                            // Rule at src/isa/riscv64/lower.isle line 846.
                            return v932;
                        }
                        let v769 = C::has_zbb(ctx);
                        if v769 == true {
                            if v3 == I128 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Bnot = v93 {
                                            let v789 = C::put_in_regs(ctx, v48.1);
                                            let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                            let v791 = C::xreg_new(ctx, v790);
                                            let v792 = C::put_in_regs(ctx, v94);
                                            let v793 = C::value_regs_get(ctx, v792, 0x0_usize);
                                            let v794 = C::xreg_new(ctx, v793);
                                            let v923 = constructor_rv_orn(ctx, v791, v794);
                                            let v168 = C::put_in_regs(ctx, v48.1);
                                            let v796 = C::value_regs_get(ctx, v168, 0x1_usize);
                                            let v797 = C::xreg_new(ctx, v796);
                                            let v798 = C::put_in_regs(ctx, v94);
                                            let v799 = C::value_regs_get(ctx, v798, 0x1_usize);
                                            let v800 = C::xreg_new(ctx, v799);
                                            let v924 = constructor_rv_orn(ctx, v797, v800);
                                            let v925 = C::xreg_to_reg(ctx, v923);
                                            let v926 = C::xreg_to_reg(ctx, v924);
                                            let v927 = C::value_regs(ctx, v925, v926);
                                            let v928 = C::output(ctx, v927);
                                            let v929 = Some(v928);
                                            // Rule at src/isa/riscv64/lower.isle line 840.
                                            return v929;
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Bnot = v81 {
                                            let v160 = C::put_in_regs(ctx, v48.0);
                                            let v162 = C::value_regs_get(ctx, v160, 0x0_usize);
                                            let v163 = C::xreg_new(ctx, v162);
                                            let v776 = C::put_in_regs(ctx, v82);
                                            let v777 = C::value_regs_get(ctx, v776, 0x0_usize);
                                            let v778 = C::xreg_new(ctx, v777);
                                            let v916 = constructor_rv_orn(ctx, v163, v778);
                                            let v741 = C::put_in_regs(ctx, v48.0);
                                            let v742 = C::value_regs_get(ctx, v741, 0x1_usize);
                                            let v743 = C::xreg_new(ctx, v742);
                                            let v780 = C::put_in_regs(ctx, v82);
                                            let v781 = C::value_regs_get(ctx, v780, 0x1_usize);
                                            let v782 = C::xreg_new(ctx, v781);
                                            let v917 = constructor_rv_orn(ctx, v743, v782);
                                            let v918 = C::xreg_to_reg(ctx, v916);
                                            let v919 = C::xreg_to_reg(ctx, v917);
                                            let v920 = C::value_regs(ctx, v918, v919);
                                            let v921 = C::output(ctx, v920);
                                            let v922 = Some(v921);
                                            // Rule at src/isa/riscv64/lower.isle line 834.
                                            return v922;
                                        }
                                    }
                                }
                            }
                            let v734 = C::fits_in_64(ctx, v3);
                            if let Some(v735) = v734 {
                                let v752 = C::ty_int(ctx, v735);
                                if let Some(v753) = v752 {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Unary {
                                            opcode: ref v93,
                                            arg: v94,
                                        } = v92
                                        {
                                            if let &Opcode::Bnot = v93 {
                                                let v757 = constructor_put_in_xreg(ctx, v48.1);
                                                let v222 = constructor_put_in_xreg(ctx, v94);
                                                let v913 = constructor_rv_orn(ctx, v757, v222);
                                                let v914 = constructor_output_xreg(ctx, v913);
                                                let v915 = Some(v914);
                                                // Rule at src/isa/riscv64/lower.isle line 830.
                                                return v915;
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Unary {
                                            opcode: ref v81,
                                            arg: v82,
                                        } = v80
                                        {
                                            if let &Opcode::Bnot = v81 {
                                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                let v193 = constructor_put_in_xreg(ctx, v82);
                                                let v910 = constructor_rv_orn(ctx, v51, v193);
                                                let v911 = constructor_output_xreg(ctx, v910);
                                                let v912 = Some(v911);
                                                // Rule at src/isa/riscv64/lower.isle line 826.
                                                return v912;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v907 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v764,
                                v765,
                                v762,
                            );
                            let v908 = constructor_output_freg(ctx, v907);
                            let v909 = Some(v908);
                            // Rule at src/isa/riscv64/lower.isle line 819.
                            return v909;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v752 = C::ty_int(ctx, v735);
                            if let Some(v753) = v752 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v70 = C::i64_from_iconst(ctx, v48.0);
                                if let Some(v71) = v70 {
                                    let v72 = C::imm12_from_i64(ctx, v71);
                                    if let Some(v73) = v72 {
                                        let v757 = constructor_put_in_xreg(ctx, v48.1);
                                        let v903 = constructor_rv_ori(ctx, v757, v73);
                                        let v904 = constructor_output_xreg(ctx, v903);
                                        let v905 = Some(v904);
                                        // Rule at src/isa/riscv64/lower.isle line 816.
                                        return v905;
                                    }
                                }
                                let v61 = C::i64_from_iconst(ctx, v48.1);
                                if let Some(v62) = v61 {
                                    let v63 = C::imm12_from_i64(ctx, v62);
                                    if let Some(v64) = v63 {
                                        let v51 = constructor_put_in_xreg(ctx, v48.0);
                                        let v900 = constructor_rv_ori(ctx, v51, v64);
                                        let v901 = constructor_output_xreg(ctx, v900);
                                        let v902 = Some(v901);
                                        // Rule at src/isa/riscv64/lower.isle line 813.
                                        return v902;
                                    }
                                }
                            }
                        }
                        let v548 = C::ty_int(ctx, v3);
                        if let Some(v549) = v548 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v160 = C::put_in_regs(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v897 = constructor_gen_or(ctx, v549, v160, v468);
                            let v898 = C::output(ctx, v897);
                            let v899 = Some(v898);
                            // Rule at src/isa/riscv64/lower.isle line 809.
                            return v899;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v826 = C::has_zbs(ctx);
                        if v826 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v734 = C::fits_in_64(ctx, v3);
                            if let Some(v735) = v734 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v855,
                                        imm: v856,
                                    } = v92
                                    {
                                        if let &Opcode::Iconst = v855 {
                                            let v857 = C::u64_from_imm64(ctx, v856);
                                            let v1019 = C::binvi_imm(ctx, v857);
                                            if let Some(v1020) = v1019 {
                                                let v757 = constructor_put_in_xreg(ctx, v48.1);
                                                let v1021 = constructor_rv_binvi(ctx, v757, v1020);
                                                let v1022 = constructor_output_xreg(ctx, v1021);
                                                let v1023 = Some(v1022);
                                                // Rule at src/isa/riscv64/lower.isle line 949.
                                                return v1023;
                                            }
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v649,
                                        imm: v650,
                                    } = v80
                                    {
                                        if let &Opcode::Iconst = v649 {
                                            let v849 = C::u64_from_imm64(ctx, v650);
                                            let v1014 = C::binvi_imm(ctx, v849);
                                            if let Some(v1015) = v1014 {
                                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                let v1016 = constructor_rv_binvi(ctx, v51, v1015);
                                                let v1017 = constructor_output_xreg(ctx, v1016);
                                                let v1018 = Some(v1017);
                                                // Rule at src/isa/riscv64/lower.isle line 945.
                                                return v1018;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Binary {
                                            opcode: ref v118,
                                            args: ref v119,
                                        } = v92
                                        {
                                            if let &Opcode::Ishl = v118 {
                                                let v120 = C::unpack_value_array_2(ctx, v119);
                                                let v950 = C::i64_from_iconst(ctx, v120.0);
                                                if let Some(v951) = v950 {
                                                    if v951 == 1_i64 {
                                                        let v757 =
                                                            constructor_put_in_xreg(ctx, v48.1);
                                                        let v864 =
                                                            constructor_put_in_xreg(ctx, v120.1);
                                                        let v866 = C::imm12_const(ctx, 31_i32);
                                                        let v867 =
                                                            constructor_rv_andi(ctx, v864, v866);
                                                        let v1005 =
                                                            constructor_rv_binv(ctx, v757, v867);
                                                        let v1006 =
                                                            constructor_output_xreg(ctx, v1005);
                                                        let v1007 = Some(v1006);
                                                        // Rule at src/isa/riscv64/lower.isle line 934.
                                                        return v1007;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Binary {
                                            opcode: ref v100,
                                            args: ref v101,
                                        } = v80
                                        {
                                            if let &Opcode::Ishl = v100 {
                                                let v102 = C::unpack_value_array_2(ctx, v101);
                                                let v945 = C::i64_from_iconst(ctx, v102.0);
                                                if let Some(v946) = v945 {
                                                    if v946 == 1_i64 {
                                                        let v51 =
                                                            constructor_put_in_xreg(ctx, v48.0);
                                                        let v872 =
                                                            constructor_put_in_xreg(ctx, v102.1);
                                                        let v866 = C::imm12_const(ctx, 31_i32);
                                                        let v873 =
                                                            constructor_rv_andi(ctx, v872, v866);
                                                        let v1002 =
                                                            constructor_rv_binv(ctx, v51, v873);
                                                        let v1003 =
                                                            constructor_output_xreg(ctx, v1002);
                                                        let v1004 = Some(v1003);
                                                        // Rule at src/isa/riscv64/lower.isle line 931.
                                                        return v1004;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v90 = C::def_inst(ctx, v48.0);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::Binary {
                                            opcode: ref v118,
                                            args: ref v119,
                                        } = v92
                                        {
                                            if let &Opcode::Ishl = v118 {
                                                let v120 = C::unpack_value_array_2(ctx, v119);
                                                let v950 = C::i64_from_iconst(ctx, v120.0);
                                                if let Some(v951) = v950 {
                                                    if v951 == 1_i64 {
                                                        let v757 =
                                                            constructor_put_in_xreg(ctx, v48.1);
                                                        let v864 =
                                                            constructor_put_in_xreg(ctx, v120.1);
                                                        let v1011 =
                                                            constructor_rv_binv(ctx, v757, v864);
                                                        let v1012 =
                                                            constructor_output_xreg(ctx, v1011);
                                                        let v1013 = Some(v1012);
                                                        // Rule at src/isa/riscv64/lower.isle line 941.
                                                        return v1013;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::Binary {
                                            opcode: ref v100,
                                            args: ref v101,
                                        } = v80
                                        {
                                            if let &Opcode::Ishl = v100 {
                                                let v102 = C::unpack_value_array_2(ctx, v101);
                                                let v945 = C::i64_from_iconst(ctx, v102.0);
                                                if let Some(v946) = v945 {
                                                    if v946 == 1_i64 {
                                                        let v51 =
                                                            constructor_put_in_xreg(ctx, v48.0);
                                                        let v872 =
                                                            constructor_put_in_xreg(ctx, v102.1);
                                                        let v1008 =
                                                            constructor_rv_binv(ctx, v51, v872);
                                                        let v1009 =
                                                            constructor_output_xreg(ctx, v1008);
                                                        let v1010 = Some(v1009);
                                                        // Rule at src/isa/riscv64/lower.isle line 938.
                                                        return v1010;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v240 = constructor_replicated_imm5(ctx, v48.0);
                            if let Some(v241) = v240 {
                                let v221 = constructor_put_in_vreg(ctx, v48.1);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v999 = constructor_rv_vxor_vi(ctx, v221, v241, v188, v189);
                                let v1000 = constructor_output_vreg(ctx, v999);
                                let v1001 = Some(v1000);
                                // Rule at src/isa/riscv64/lower.isle line 925.
                                return v1001;
                            }
                            let v216 = constructor_replicated_imm5(ctx, v48.1);
                            if let Some(v217) = v216 {
                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                let v188 = &constructor_unmasked(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v996 = constructor_rv_vxor_vi(ctx, v186, v217, v188, v189);
                                let v997 = constructor_output_vreg(ctx, v996);
                                let v998 = Some(v997);
                                // Rule at src/isa/riscv64/lower.isle line 921.
                                return v998;
                            }
                            let v810 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v811) = v810 {
                                let v90 = C::def_inst(ctx, v48.0);
                                if let Some(v91) = v90 {
                                    let v92 = &C::inst_data(ctx, v91);
                                    if let &InstructionData::Unary {
                                        opcode: ref v93,
                                        arg: v94,
                                    } = v92
                                    {
                                        if let &Opcode::Splat = v93 {
                                            let v221 = constructor_put_in_vreg(ctx, v48.1);
                                            let v222 = constructor_put_in_xreg(ctx, v94);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v993 =
                                                constructor_rv_vxor_vx(ctx, v221, v222, v188, v189);
                                            let v994 = constructor_output_vreg(ctx, v993);
                                            let v995 = Some(v994);
                                            // Rule at src/isa/riscv64/lower.isle line 917.
                                            return v995;
                                        }
                                    }
                                }
                                let v78 = C::def_inst(ctx, v48.1);
                                if let Some(v79) = v78 {
                                    let v80 = &C::inst_data(ctx, v79);
                                    if let &InstructionData::Unary {
                                        opcode: ref v81,
                                        arg: v82,
                                    } = v80
                                    {
                                        if let &Opcode::Splat = v81 {
                                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                                            let v193 = constructor_put_in_xreg(ctx, v82);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v990 =
                                                constructor_rv_vxor_vx(ctx, v186, v193, v188, v189);
                                            let v991 = constructor_output_vreg(ctx, v990);
                                            let v992 = Some(v991);
                                            // Rule at src/isa/riscv64/lower.isle line 913.
                                            return v992;
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v987 = constructor_rv_vxor_vv(ctx, v186, v187, v188, v189);
                            let v988 = constructor_output_vreg(ctx, v987);
                            let v989 = Some(v988);
                            // Rule at src/isa/riscv64/lower.isle line 910.
                            return v989;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v984 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v764,
                                v765,
                                v762,
                            );
                            let v985 = constructor_output_freg(ctx, v984);
                            let v986 = Some(v985);
                            // Rule at src/isa/riscv64/lower.isle line 907.
                            return v986;
                        }
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v160 = C::put_in_regs(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v981 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v160, v468);
                            let v982 = C::output(ctx, v981);
                            let v983 = Some(v982);
                            // Rule at src/isa/riscv64/lower.isle line 904.
                            return v983;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v752 = C::ty_int(ctx, v735);
                            if let Some(v753) = v752 {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v70 = C::i64_from_iconst(ctx, v48.0);
                                if let Some(v71) = v70 {
                                    let v72 = C::imm12_from_i64(ctx, v71);
                                    if let Some(v73) = v72 {
                                        let v757 = constructor_put_in_xreg(ctx, v48.1);
                                        let v977 = constructor_rv_xori(ctx, v757, v73);
                                        let v978 = constructor_output_xreg(ctx, v977);
                                        let v979 = Some(v978);
                                        // Rule at src/isa/riscv64/lower.isle line 901.
                                        return v979;
                                    }
                                }
                                let v61 = C::i64_from_iconst(ctx, v48.1);
                                if let Some(v62) = v61 {
                                    let v63 = C::imm12_from_i64(ctx, v62);
                                    if let Some(v64) = v63 {
                                        let v51 = constructor_put_in_xreg(ctx, v48.0);
                                        let v974 = constructor_rv_xori(ctx, v51, v64);
                                        let v975 = constructor_output_xreg(ctx, v974);
                                        let v976 = Some(v975);
                                        // Rule at src/isa/riscv64/lower.isle line 898.
                                        return v976;
                                    }
                                }
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v52 = constructor_put_in_xreg(ctx, v48.1);
                                let v971 = constructor_rv_xor(ctx, v51, v52);
                                let v972 = constructor_output_xreg(ctx, v971);
                                let v973 = Some(v972);
                                // Rule at src/isa/riscv64/lower.isle line 894.
                                return v973;
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v769 = C::has_zbb(ctx);
                                if v769 == true {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v849 = C::u64_from_imm64(ctx, v650);
                                                let v1509 = C::u64_and(ctx, v849, 0x1f_u64);
                                                let v1510 = C::u64_sub(ctx, 0x20_u64, v1509);
                                                let v1511 = C::imm12_from_u64(ctx, v1510);
                                                if let Some(v1512) = v1511 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v1513 =
                                                        constructor_rv_roriw(ctx, v51, v1512);
                                                    let v1514 = constructor_output_xreg(ctx, v1513);
                                                    let v1515 = Some(v1514);
                                                    // Rule at src/isa/riscv64/lower.isle line 1428.
                                                    return v1515;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1505 = constructor_rv_rolw(ctx, v51, v1295);
                                    let v1506 = constructor_output_xreg(ctx, v1505);
                                    let v1507 = Some(v1506);
                                    // Rule at src/isa/riscv64/lower.isle line 1424.
                                    return v1507;
                                }
                            }
                            I64 => {
                                let v769 = C::has_zbb(ctx);
                                if v769 == true {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v78 = C::def_inst(ctx, v48.1);
                                    if let Some(v79) = v78 {
                                        let v80 = &C::inst_data(ctx, v79);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v649,
                                            imm: v650,
                                        } = v80
                                        {
                                            if let &Opcode::Iconst = v649 {
                                                let v849 = C::u64_from_imm64(ctx, v650);
                                                let v1519 = C::u64_and(ctx, v849, 0x3f_u64);
                                                let v1520 = C::u64_sub(ctx, 0x40_u64, v1519);
                                                let v1521 = C::imm12_from_u64(ctx, v1520);
                                                if let Some(v1522) = v1521 {
                                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                                    let v1523 =
                                                        constructor_rv_rori(ctx, v51, v1522);
                                                    let v1524 = constructor_output_xreg(ctx, v1523);
                                                    let v1525 = Some(v1524);
                                                    // Rule at src/isa/riscv64/lower.isle line 1437.
                                                    return v1525;
                                                }
                                            }
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1516 = constructor_rv_rol(ctx, v51, v1295);
                                    let v1517 = constructor_output_xreg(ctx, v1516);
                                    let v1518 = Some(v1517);
                                    // Rule at src/isa/riscv64/lower.isle line 1433.
                                    return v1518;
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v789 = C::put_in_regs(ctx, v48.1);
                                let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                let v791 = C::xreg_new(ctx, v790);
                                let v1328 = C::gen_shamt(ctx, I128, v791);
                                let v1329 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1330 = C::xreg_new(ctx, v1329);
                                let v1331 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1333 = C::put_in_regs(ctx, v48.0);
                                let v1334 = C::value_regs_get(ctx, v1333, 0x0_usize);
                                let v1335 = C::xreg_new(ctx, v1334);
                                let v1336 = constructor_rv_sll(ctx, v1335, v1330);
                                let v1337 = C::put_in_regs(ctx, v48.0);
                                let v1526 = C::value_regs_get(ctx, v1337, 0x1_usize);
                                let v1527 = C::xreg_new(ctx, v1526);
                                let v1528 = constructor_rv_srl(ctx, v1527, v1332);
                                let v1341 = constructor_cmp_eqz(ctx, v1330);
                                let v1342 = C::zero_reg(ctx);
                                let v1529 = constructor_gen_select_xreg(ctx, v1341, v1342, v1528);
                                let v1530 = constructor_rv_or(ctx, v1336, v1529);
                                let v1531 = C::put_in_regs(ctx, v48.0);
                                let v1532 = C::value_regs_get(ctx, v1531, 0x1_usize);
                                let v1533 = C::xreg_new(ctx, v1532);
                                let v1534 = constructor_rv_sll(ctx, v1533, v1330);
                                let v1535 = C::put_in_regs(ctx, v48.0);
                                let v1536 = C::value_regs_get(ctx, v1535, 0x0_usize);
                                let v1537 = C::xreg_new(ctx, v1536);
                                let v1538 = constructor_rv_srl(ctx, v1537, v1332);
                                let v1539 = constructor_cmp_eqz(ctx, v1330);
                                let v1540 = C::zero_reg(ctx);
                                let v1541 = constructor_gen_select_xreg(ctx, v1539, v1540, v1538);
                                let v1542 = constructor_rv_or(ctx, v1534, v1541);
                                let v1543 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1544 = C::xreg_new(ctx, v1543);
                                let v1545 = C::put_in_regs(ctx, v48.1);
                                let v1546 = C::value_regs_get(ctx, v1545, 0x0_usize);
                                let v1547 = C::xreg_new(ctx, v1546);
                                let v1356 = C::imm12_const(ctx, 127_i32);
                                let v1548 = constructor_rv_andi(ctx, v1547, v1356);
                                let v1549 = constructor_cmp_geu(ctx, v1548, v1544);
                                let v1550 = C::xreg_to_reg(ctx, v1542);
                                let v1551 = C::xreg_to_reg(ctx, v1530);
                                let v1552 = C::value_regs(ctx, v1550, v1551);
                                let v1553 = C::value_regs(ctx, v1551, v1550);
                                let v1554 = constructor_gen_select_regs(ctx, v1549, v1552, v1553);
                                let v1555 = C::output(ctx, v1554);
                                let v1556 = Some(v1555);
                                // Rule at src/isa/riscv64/lower.isle line 1442.
                                return v1556;
                            }
                            _ => {}
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v624 = constructor_zext(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                            let v1295 = C::xreg_new(ctx, v1294);
                            let v1486 = C::gen_shamt(ctx, v735, v1295);
                            let v1487 = C::value_regs_get(ctx, v1486, 0x0_usize);
                            let v1488 = C::xreg_new(ctx, v1487);
                            let v1489 = C::value_regs_get(ctx, v1486, 0x1_usize);
                            let v1490 = constructor_rv_sll(ctx, v624, v1488);
                            let v1492 = C::xreg_new(ctx, v1489);
                            let v1493 = constructor_rv_srl(ctx, v624, v1492);
                            let v1495 = constructor_cmp_eqz(ctx, v1488);
                            let v1496 = C::zero_reg(ctx);
                            let v1494 = C::xreg_to_reg(ctx, v1493);
                            let v1497 = C::xreg_new(ctx, v1494);
                            let v1498 = constructor_gen_select_xreg(ctx, v1495, v1496, v1497);
                            let v1491 = C::xreg_to_reg(ctx, v1490);
                            let v1500 = C::xreg_new(ctx, v1491);
                            let v1499 = C::xreg_to_reg(ctx, v1498);
                            let v1501 = C::xreg_new(ctx, v1499);
                            let v1502 = constructor_rv_or(ctx, v1500, v1501);
                            let v1503 = constructor_output_xreg(ctx, v1502);
                            let v1504 = Some(v1503);
                            // Rule at src/isa/riscv64/lower.isle line 1412.
                            return v1504;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v769 = C::has_zbb(ctx);
                                if v769 == true {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v61 = C::i64_from_iconst(ctx, v48.1);
                                    if let Some(v62) = v61 {
                                        let v63 = C::imm12_from_i64(ctx, v62);
                                        if let Some(v64) = v63 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1567 = constructor_rv_roriw(ctx, v51, v64);
                                            let v1568 = constructor_output_xreg(ctx, v1567);
                                            let v1569 = Some(v1568);
                                            // Rule at src/isa/riscv64/lower.isle line 1484.
                                            return v1569;
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1564 = constructor_rv_rorw(ctx, v51, v1295);
                                    let v1565 = constructor_output_xreg(ctx, v1564);
                                    let v1566 = Some(v1565);
                                    // Rule at src/isa/riscv64/lower.isle line 1480.
                                    return v1566;
                                }
                            }
                            I64 => {
                                let v769 = C::has_zbb(ctx);
                                if v769 == true {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v61 = C::i64_from_iconst(ctx, v48.1);
                                    if let Some(v62) = v61 {
                                        let v63 = C::imm12_from_i64(ctx, v62);
                                        if let Some(v64) = v63 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1573 = constructor_rv_rori(ctx, v51, v64);
                                            let v1574 = constructor_output_xreg(ctx, v1573);
                                            let v1575 = Some(v1574);
                                            // Rule at src/isa/riscv64/lower.isle line 1492.
                                            return v1575;
                                        }
                                    }
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1570 = constructor_rv_ror(ctx, v51, v1295);
                                    let v1571 = constructor_output_xreg(ctx, v1570);
                                    let v1572 = Some(v1571);
                                    // Rule at src/isa/riscv64/lower.isle line 1488.
                                    return v1572;
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v789 = C::put_in_regs(ctx, v48.1);
                                let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                let v791 = C::xreg_new(ctx, v790);
                                let v1328 = C::gen_shamt(ctx, I128, v791);
                                let v1329 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1330 = C::xreg_new(ctx, v1329);
                                let v1331 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1333 = C::put_in_regs(ctx, v48.0);
                                let v1334 = C::value_regs_get(ctx, v1333, 0x0_usize);
                                let v1335 = C::xreg_new(ctx, v1334);
                                let v1576 = constructor_rv_srl(ctx, v1335, v1330);
                                let v1337 = C::put_in_regs(ctx, v48.0);
                                let v1526 = C::value_regs_get(ctx, v1337, 0x1_usize);
                                let v1527 = C::xreg_new(ctx, v1526);
                                let v1577 = constructor_rv_sll(ctx, v1527, v1332);
                                let v1341 = constructor_cmp_eqz(ctx, v1330);
                                let v1342 = C::zero_reg(ctx);
                                let v1578 = constructor_gen_select_xreg(ctx, v1341, v1342, v1577);
                                let v1579 = constructor_rv_or(ctx, v1576, v1578);
                                let v1531 = C::put_in_regs(ctx, v48.0);
                                let v1532 = C::value_regs_get(ctx, v1531, 0x1_usize);
                                let v1533 = C::xreg_new(ctx, v1532);
                                let v1580 = constructor_rv_srl(ctx, v1533, v1330);
                                let v1535 = C::put_in_regs(ctx, v48.0);
                                let v1536 = C::value_regs_get(ctx, v1535, 0x0_usize);
                                let v1537 = C::xreg_new(ctx, v1536);
                                let v1581 = constructor_rv_sll(ctx, v1537, v1332);
                                let v1539 = constructor_cmp_eqz(ctx, v1330);
                                let v1540 = C::zero_reg(ctx);
                                let v1582 = constructor_gen_select_xreg(ctx, v1539, v1540, v1581);
                                let v1583 = constructor_rv_or(ctx, v1580, v1582);
                                let v1543 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1544 = C::xreg_new(ctx, v1543);
                                let v1545 = C::put_in_regs(ctx, v48.1);
                                let v1546 = C::value_regs_get(ctx, v1545, 0x0_usize);
                                let v1547 = C::xreg_new(ctx, v1546);
                                let v1356 = C::imm12_const(ctx, 127_i32);
                                let v1548 = constructor_rv_andi(ctx, v1547, v1356);
                                let v1549 = constructor_cmp_geu(ctx, v1548, v1544);
                                let v1584 = C::xreg_to_reg(ctx, v1583);
                                let v1585 = C::xreg_to_reg(ctx, v1579);
                                let v1586 = C::value_regs(ctx, v1584, v1585);
                                let v1587 = C::value_regs(ctx, v1585, v1584);
                                let v1588 = constructor_gen_select_regs(ctx, v1549, v1586, v1587);
                                let v1589 = C::output(ctx, v1588);
                                let v1590 = Some(v1589);
                                // Rule at src/isa/riscv64/lower.isle line 1496.
                                return v1590;
                            }
                            _ => {}
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v624 = constructor_zext(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                            let v1295 = C::xreg_new(ctx, v1294);
                            let v1486 = C::gen_shamt(ctx, v735, v1295);
                            let v1487 = C::value_regs_get(ctx, v1486, 0x0_usize);
                            let v1488 = C::xreg_new(ctx, v1487);
                            let v1489 = C::value_regs_get(ctx, v1486, 0x1_usize);
                            let v1557 = C::xreg_new(ctx, v1489);
                            let v1558 = constructor_rv_srl(ctx, v624, v1488);
                            let v1559 = constructor_rv_sll(ctx, v624, v1557);
                            let v1495 = constructor_cmp_eqz(ctx, v1488);
                            let v1496 = C::zero_reg(ctx);
                            let v1560 = constructor_gen_select_xreg(ctx, v1495, v1496, v1559);
                            let v1561 = constructor_rv_or(ctx, v1558, v1560);
                            let v1562 = constructor_output_xreg(ctx, v1561);
                            let v1563 = Some(v1562);
                            // Rule at src/isa/riscv64/lower.isle line 1468.
                            return v1563;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1371 = C::def_inst(ctx, v1309);
                                if let Some(v1372) = v1371 {
                                    let v1373 = &C::inst_data(ctx, v1372);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1374,
                                        imm: v1375,
                                    } = v1373
                                    {
                                        if let &Opcode::Iconst = v1374 {
                                            let v1376 = C::u64_from_imm64(ctx, v1375);
                                            let v1377 = C::uimm5_from_u64(ctx, v1376);
                                            if let Some(v1378) = v1377 {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v189 = C::vstate_from_type(ctx, v12);
                                                let v1379 = constructor_rv_vsll_vi(
                                                    ctx, v186, v1378, v188, v189,
                                                );
                                                let v1380 = constructor_output_vreg(ctx, v1379);
                                                let v1381 = Some(v1380);
                                                // Rule at src/isa/riscv64/lower.isle line 1291.
                                                return v1381;
                                            }
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                            let v1295 = C::xreg_new(ctx, v1294);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1368 = constructor_rv_vsll_vx(ctx, v186, v1295, v188, v189);
                            let v1369 = constructor_output_vreg(ctx, v1368);
                            let v1370 = Some(v1369);
                            // Rule at src/isa/riscv64/lower.isle line 1288.
                            return v1370;
                        }
                        match v3 {
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v1308 = C::maybe_uextend(ctx, v48.1);
                                if let Some(v1309) = v1308 {
                                    let v1310 = C::i64_from_iconst(ctx, v1309);
                                    if let Some(v1311) = v1310 {
                                        let v1312 = C::imm12_from_i64(ctx, v1311);
                                        if let Some(v1313) = v1312 {
                                            let v84 = C::has_zba(ctx);
                                            if v84 == true {
                                                let v90 = C::def_inst(ctx, v48.0);
                                                if let Some(v91) = v90 {
                                                    let v92 = &C::inst_data(ctx, v91);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v93,
                                                        arg: v94,
                                                    } = v92
                                                    {
                                                        if let &Opcode::Uextend = v93 {
                                                            let v95 = C::value_type(ctx, v94);
                                                            if v95 == I32 {
                                                                let v96 = constructor_put_in_xreg(
                                                                    ctx, v94,
                                                                );
                                                                let v1324 = constructor_rv_slliuw(
                                                                    ctx, v96, v1313,
                                                                );
                                                                let v1325 = constructor_output_xreg(
                                                                    ctx, v1324,
                                                                );
                                                                let v1326 = Some(v1325);
                                                                // Rule at src/isa/riscv64/lower.isle line 1260.
                                                                return v1326;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1319 = constructor_ty_shift_mask(ctx, v3);
                                            let v1320 = C::imm12_and(ctx, v1313, v1319);
                                            let v1321 = constructor_rv_slli(ctx, v51, v1320);
                                            let v1322 = constructor_output_xreg(ctx, v1321);
                                            let v1323 = Some(v1322);
                                            // Rule at src/isa/riscv64/lower.isle line 1256.
                                            return v1323;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v789 = C::put_in_regs(ctx, v48.1);
                                let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                let v791 = C::xreg_new(ctx, v790);
                                let v1328 = C::gen_shamt(ctx, I128, v791);
                                let v1329 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1330 = C::xreg_new(ctx, v1329);
                                let v1331 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1333 = C::put_in_regs(ctx, v48.0);
                                let v1334 = C::value_regs_get(ctx, v1333, 0x0_usize);
                                let v1335 = C::xreg_new(ctx, v1334);
                                let v1336 = constructor_rv_sll(ctx, v1335, v1330);
                                let v1337 = C::put_in_regs(ctx, v48.0);
                                let v1338 = C::value_regs_get(ctx, v1337, 0x0_usize);
                                let v1339 = C::xreg_new(ctx, v1338);
                                let v1340 = constructor_rv_srl(ctx, v1339, v1332);
                                let v1341 = constructor_cmp_eqz(ctx, v1330);
                                let v1342 = C::zero_reg(ctx);
                                let v1343 = constructor_gen_select_xreg(ctx, v1341, v1342, v1340);
                                let v1344 = C::put_in_regs(ctx, v48.0);
                                let v1345 = C::value_regs_get(ctx, v1344, 0x1_usize);
                                let v1346 = C::xreg_new(ctx, v1345);
                                let v1347 = constructor_rv_sll(ctx, v1346, v1330);
                                let v1348 = constructor_rv_or(ctx, v1343, v1347);
                                let v1350 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1351 = C::xreg_new(ctx, v1350);
                                let v1352 = C::put_in_regs(ctx, v48.1);
                                let v1353 = C::value_regs_get(ctx, v1352, 0x0_usize);
                                let v1354 = C::xreg_new(ctx, v1353);
                                let v1356 = C::imm12_const(ctx, 127_i32);
                                let v1357 = constructor_rv_andi(ctx, v1354, v1356);
                                let v1358 = constructor_cmp_geu(ctx, v1357, v1351);
                                let v1359 = C::zero_reg(ctx);
                                let v1360 = C::xreg_to_reg(ctx, v1359);
                                let v1361 = C::xreg_to_reg(ctx, v1336);
                                let v1362 = C::value_regs(ctx, v1360, v1361);
                                let v1363 = C::xreg_to_reg(ctx, v1348);
                                let v1364 = C::value_regs(ctx, v1361, v1363);
                                let v1365 = constructor_gen_select_regs(ctx, v1358, v1362, v1364);
                                let v1366 = C::output(ctx, v1365);
                                let v1367 = Some(v1366);
                                // Rule at src/isa/riscv64/lower.isle line 1265.
                                return v1367;
                            }
                            _ => {}
                        }
                        let v1306 = C::int_fits_in_32(ctx, v3);
                        if let Some(v1307) = v1306 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1310 = C::i64_from_iconst(ctx, v1309);
                                if let Some(v1311) = v1310 {
                                    let v1312 = C::imm12_from_i64(ctx, v1311);
                                    if let Some(v1313) = v1312 {
                                        let v51 = constructor_put_in_xreg(ctx, v48.0);
                                        let v1314 = constructor_ty_shift_mask(ctx, v1307);
                                        let v1315 = C::imm12_and(ctx, v1313, v1314);
                                        let v1316 = constructor_rv_slliw(ctx, v51, v1315);
                                        let v1317 = constructor_output_xreg(ctx, v1316);
                                        let v1318 = Some(v1317);
                                        // Rule at src/isa/riscv64/lower.isle line 1251.
                                        return v1318;
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1300 = constructor_rv_sllw(ctx, v51, v1295);
                                let v1301 = constructor_output_xreg(ctx, v1300);
                                let v1302 = Some(v1301);
                                // Rule at src/isa/riscv64/lower.isle line 1243.
                                return v1302;
                            }
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1303 = constructor_rv_sll(ctx, v51, v1295);
                                let v1304 = constructor_output_xreg(ctx, v1303);
                                let v1305 = Some(v1304);
                                // Rule at src/isa/riscv64/lower.isle line 1247.
                                return v1305;
                            }
                            _ => {}
                        }
                        let v548 = C::ty_int(ctx, v3);
                        if let Some(v549) = v548 {
                            let v1289 = C::ty_8_or_16(ctx, v549);
                            if let Some(v1290) = v1289 {
                                let v1291 = constructor_ty_shift_mask(ctx, v1290);
                                let v1292 = constructor_u64_to_imm12(ctx, v1291);
                                if let Some(v1293) = v1292 {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v51 = constructor_put_in_xreg(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1296 = constructor_rv_andi(ctx, v1295, v1293);
                                    let v1297 = constructor_rv_sllw(ctx, v51, v1296);
                                    let v1298 = constructor_output_xreg(ctx, v1297);
                                    let v1299 = Some(v1298);
                                    // Rule at src/isa/riscv64/lower.isle line 1238.
                                    return v1299;
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1371 = C::def_inst(ctx, v1309);
                                if let Some(v1372) = v1371 {
                                    let v1373 = &C::inst_data(ctx, v1372);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1374,
                                        imm: v1375,
                                    } = v1373
                                    {
                                        if let &Opcode::Iconst = v1374 {
                                            let v1376 = C::u64_from_imm64(ctx, v1375);
                                            let v1377 = C::uimm5_from_u64(ctx, v1376);
                                            if let Some(v1378) = v1377 {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v189 = C::vstate_from_type(ctx, v12);
                                                let v1434 = constructor_rv_vsrl_vi(
                                                    ctx, v186, v1378, v188, v189,
                                                );
                                                let v1435 = constructor_output_vreg(ctx, v1434);
                                                let v1436 = Some(v1435);
                                                // Rule at src/isa/riscv64/lower.isle line 1346.
                                                return v1436;
                                            }
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                            let v1295 = C::xreg_new(ctx, v1294);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1431 = constructor_rv_vsrl_vx(ctx, v186, v1295, v188, v189);
                            let v1432 = constructor_output_vreg(ctx, v1431);
                            let v1433 = Some(v1432);
                            // Rule at src/isa/riscv64/lower.isle line 1343.
                            return v1433;
                        }
                        match v3 {
                            I32 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v1308 = C::maybe_uextend(ctx, v48.1);
                                if let Some(v1309) = v1308 {
                                    let v1310 = C::i64_from_iconst(ctx, v1309);
                                    if let Some(v1311) = v1310 {
                                        let v1312 = C::imm12_from_i64(ctx, v1311);
                                        if let Some(v1313) = v1312 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1401 = constructor_rv_srliw(ctx, v51, v1313);
                                            let v1402 = constructor_output_xreg(ctx, v1401);
                                            let v1403 = Some(v1402);
                                            // Rule at src/isa/riscv64/lower.isle line 1314.
                                            return v1403;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v1308 = C::maybe_uextend(ctx, v48.1);
                                if let Some(v1309) = v1308 {
                                    let v1310 = C::i64_from_iconst(ctx, v1309);
                                    if let Some(v1311) = v1310 {
                                        let v1312 = C::imm12_from_i64(ctx, v1311);
                                        if let Some(v1313) = v1312 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1404 = constructor_rv_srli(ctx, v51, v1313);
                                            let v1405 = constructor_output_xreg(ctx, v1404);
                                            let v1406 = Some(v1405);
                                            // Rule at src/isa/riscv64/lower.isle line 1317.
                                            return v1406;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v789 = C::put_in_regs(ctx, v48.1);
                                let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                let v791 = C::xreg_new(ctx, v790);
                                let v1328 = C::gen_shamt(ctx, I128, v791);
                                let v1329 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1330 = C::xreg_new(ctx, v1329);
                                let v1331 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1333 = C::put_in_regs(ctx, v48.0);
                                let v1407 = C::value_regs_get(ctx, v1333, 0x1_usize);
                                let v1408 = C::xreg_new(ctx, v1407);
                                let v1409 = constructor_rv_sll(ctx, v1408, v1332);
                                let v1410 = constructor_cmp_eqz(ctx, v1330);
                                let v576 = C::zero_reg(ctx);
                                let v1411 = constructor_gen_select_xreg(ctx, v1410, v576, v1409);
                                let v1412 = C::put_in_regs(ctx, v48.0);
                                let v1413 = C::value_regs_get(ctx, v1412, 0x0_usize);
                                let v1414 = C::xreg_new(ctx, v1413);
                                let v1415 = constructor_rv_srl(ctx, v1414, v1330);
                                let v1416 = constructor_rv_or(ctx, v1411, v1415);
                                let v1417 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1418 = C::xreg_new(ctx, v1417);
                                let v1419 = C::put_in_regs(ctx, v48.0);
                                let v1420 = C::value_regs_get(ctx, v1419, 0x1_usize);
                                let v1421 = C::xreg_new(ctx, v1420);
                                let v1422 = constructor_rv_srl(ctx, v1421, v1330);
                                let v1352 = C::put_in_regs(ctx, v48.1);
                                let v1353 = C::value_regs_get(ctx, v1352, 0x0_usize);
                                let v1354 = C::xreg_new(ctx, v1353);
                                let v1356 = C::imm12_const(ctx, 127_i32);
                                let v1357 = constructor_rv_andi(ctx, v1354, v1356);
                                let v1423 = constructor_cmp_geu(ctx, v1357, v1418);
                                let v1359 = C::zero_reg(ctx);
                                let v1424 = C::xreg_to_reg(ctx, v1422);
                                let v1360 = C::xreg_to_reg(ctx, v1359);
                                let v1425 = C::value_regs(ctx, v1424, v1360);
                                let v1426 = C::xreg_to_reg(ctx, v1416);
                                let v1427 = C::value_regs(ctx, v1426, v1424);
                                let v1428 = constructor_gen_select_regs(ctx, v1423, v1425, v1427);
                                let v1429 = C::output(ctx, v1428);
                                let v1430 = Some(v1429);
                                // Rule at src/isa/riscv64/lower.isle line 1320.
                                return v1430;
                            }
                            _ => {}
                        }
                        let v548 = C::ty_int(ctx, v3);
                        if let Some(v549) = v548 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1310 = C::i64_from_iconst(ctx, v1309);
                                if let Some(v1311) = v1310 {
                                    let v1312 = C::imm12_from_i64(ctx, v1311);
                                    if let Some(v1313) = v1312 {
                                        let v1382 = C::fits_in_16(ctx, v549);
                                        if let Some(v1383) = v1382 {
                                            let v624 = constructor_zext(ctx, v48.0);
                                            let v1384 = constructor_ty_shift_mask(ctx, v1383);
                                            let v1397 = C::imm12_and(ctx, v1313, v1384);
                                            let v1398 = constructor_rv_srliw(ctx, v624, v1397);
                                            let v1399 = constructor_output_xreg(ctx, v1398);
                                            let v1400 = Some(v1399);
                                            // Rule at src/isa/riscv64/lower.isle line 1311.
                                            return v1400;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1391 = constructor_rv_srlw(ctx, v51, v1295);
                                let v1392 = constructor_output_xreg(ctx, v1391);
                                let v1393 = Some(v1392);
                                // Rule at src/isa/riscv64/lower.isle line 1303.
                                return v1393;
                            }
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1394 = constructor_rv_srl(ctx, v51, v1295);
                                let v1395 = constructor_output_xreg(ctx, v1394);
                                let v1396 = Some(v1395);
                                // Rule at src/isa/riscv64/lower.isle line 1307.
                                return v1396;
                            }
                            _ => {}
                        }
                        if let Some(v549) = v548 {
                            let v1382 = C::fits_in_16(ctx, v549);
                            if let Some(v1383) = v1382 {
                                let v1384 = constructor_ty_shift_mask(ctx, v1383);
                                let v1385 = constructor_u64_to_imm12(ctx, v1384);
                                if let Some(v1386) = v1385 {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v624 = constructor_zext(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1387 = constructor_rv_andi(ctx, v1295, v1386);
                                    let v1388 = constructor_rv_srlw(ctx, v624, v1387);
                                    let v1389 = constructor_output_xreg(ctx, v1388);
                                    let v1390 = Some(v1389);
                                    // Rule at src/isa/riscv64/lower.isle line 1298.
                                    return v1390;
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1371 = C::def_inst(ctx, v1309);
                                if let Some(v1372) = v1371 {
                                    let v1373 = &C::inst_data(ctx, v1372);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1374,
                                        imm: v1375,
                                    } = v1373
                                    {
                                        if let &Opcode::Iconst = v1374 {
                                            let v1376 = C::u64_from_imm64(ctx, v1375);
                                            let v1377 = C::uimm5_from_u64(ctx, v1376);
                                            if let Some(v1378) = v1377 {
                                                let v186 = constructor_put_in_vreg(ctx, v48.0);
                                                let v188 = &constructor_unmasked(ctx);
                                                let v189 = C::vstate_from_type(ctx, v12);
                                                let v1483 = constructor_rv_vsra_vi(
                                                    ctx, v186, v1378, v188, v189,
                                                );
                                                let v1484 = constructor_output_vreg(ctx, v1483);
                                                let v1485 = Some(v1484);
                                                // Rule at src/isa/riscv64/lower.isle line 1406.
                                                return v1485;
                                            }
                                        }
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v468 = C::put_in_regs(ctx, v48.1);
                            let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                            let v1295 = C::xreg_new(ctx, v1294);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1480 = constructor_rv_vsra_vx(ctx, v186, v1295, v188, v189);
                            let v1481 = constructor_output_vreg(ctx, v1480);
                            let v1482 = Some(v1481);
                            // Rule at src/isa/riscv64/lower.isle line 1403.
                            return v1482;
                        }
                        match v3 {
                            I32 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v1308 = C::maybe_uextend(ctx, v48.1);
                                if let Some(v1309) = v1308 {
                                    let v1310 = C::i64_from_iconst(ctx, v1309);
                                    if let Some(v1311) = v1310 {
                                        let v1312 = C::imm12_from_i64(ctx, v1311);
                                        if let Some(v1313) = v1312 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1449 = constructor_rv_sraiw(ctx, v51, v1313);
                                            let v1450 = constructor_output_xreg(ctx, v1449);
                                            let v1451 = Some(v1450);
                                            // Rule at src/isa/riscv64/lower.isle line 1369.
                                            return v1451;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v1308 = C::maybe_uextend(ctx, v48.1);
                                if let Some(v1309) = v1308 {
                                    let v1310 = C::i64_from_iconst(ctx, v1309);
                                    if let Some(v1311) = v1310 {
                                        let v1312 = C::imm12_from_i64(ctx, v1311);
                                        if let Some(v1313) = v1312 {
                                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                                            let v1452 = constructor_rv_srai(ctx, v51, v1313);
                                            let v1453 = constructor_output_xreg(ctx, v1452);
                                            let v1454 = Some(v1453);
                                            // Rule at src/isa/riscv64/lower.isle line 1372.
                                            return v1454;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v789 = C::put_in_regs(ctx, v48.1);
                                let v790 = C::value_regs_get(ctx, v789, 0x0_usize);
                                let v791 = C::xreg_new(ctx, v790);
                                let v1328 = C::gen_shamt(ctx, I128, v791);
                                let v1329 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1330 = C::xreg_new(ctx, v1329);
                                let v1331 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1333 = C::put_in_regs(ctx, v48.0);
                                let v1407 = C::value_regs_get(ctx, v1333, 0x1_usize);
                                let v1408 = C::xreg_new(ctx, v1407);
                                let v1409 = constructor_rv_sll(ctx, v1408, v1332);
                                let v1410 = constructor_cmp_eqz(ctx, v1330);
                                let v576 = C::zero_reg(ctx);
                                let v1411 = constructor_gen_select_xreg(ctx, v1410, v576, v1409);
                                let v1412 = C::put_in_regs(ctx, v48.0);
                                let v1413 = C::value_regs_get(ctx, v1412, 0x0_usize);
                                let v1414 = C::xreg_new(ctx, v1413);
                                let v1415 = constructor_rv_srl(ctx, v1414, v1330);
                                let v1416 = constructor_rv_or(ctx, v1411, v1415);
                                let v1417 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1418 = C::xreg_new(ctx, v1417);
                                let v1419 = C::put_in_regs(ctx, v48.0);
                                let v1420 = C::value_regs_get(ctx, v1419, 0x1_usize);
                                let v1421 = C::xreg_new(ctx, v1420);
                                let v1455 = constructor_rv_sra(ctx, v1421, v1330);
                                let v1457 = C::i64_as_u64(ctx, -1_i64);
                                let v1458 = constructor_imm(ctx, I64, v1457);
                                let v1459 = C::xreg_new(ctx, v1458);
                                let v1460 = C::put_in_regs(ctx, v48.0);
                                let v1461 = C::value_regs_get(ctx, v1460, 0x1_usize);
                                let v1462 = C::xreg_new(ctx, v1461);
                                let v1463 = constructor_cmp_ltz(ctx, v1462);
                                let v1464 = C::zero_reg(ctx);
                                let v1465 = constructor_gen_select_xreg(ctx, v1463, v1459, v1464);
                                let v1466 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1467 = C::xreg_new(ctx, v1466);
                                let v1468 = C::put_in_regs(ctx, v48.1);
                                let v1469 = C::value_regs_get(ctx, v1468, 0x0_usize);
                                let v1470 = C::xreg_new(ctx, v1469);
                                let v1356 = C::imm12_const(ctx, 127_i32);
                                let v1471 = constructor_rv_andi(ctx, v1470, v1356);
                                let v1472 = constructor_cmp_geu(ctx, v1471, v1467);
                                let v1473 = C::xreg_to_reg(ctx, v1455);
                                let v1474 = C::xreg_to_reg(ctx, v1465);
                                let v1475 = C::value_regs(ctx, v1473, v1474);
                                let v1426 = C::xreg_to_reg(ctx, v1416);
                                let v1476 = C::value_regs(ctx, v1426, v1473);
                                let v1477 = constructor_gen_select_regs(ctx, v1472, v1475, v1476);
                                let v1478 = C::output(ctx, v1477);
                                let v1479 = Some(v1478);
                                // Rule at src/isa/riscv64/lower.isle line 1375.
                                return v1479;
                            }
                            _ => {}
                        }
                        let v548 = C::ty_int(ctx, v3);
                        if let Some(v549) = v548 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1308 = C::maybe_uextend(ctx, v48.1);
                            if let Some(v1309) = v1308 {
                                let v1310 = C::i64_from_iconst(ctx, v1309);
                                if let Some(v1311) = v1310 {
                                    let v1312 = C::imm12_from_i64(ctx, v1311);
                                    if let Some(v1313) = v1312 {
                                        let v1382 = C::fits_in_16(ctx, v549);
                                        if let Some(v1383) = v1382 {
                                            let v610 = constructor_sext(ctx, v48.0);
                                            let v1384 = constructor_ty_shift_mask(ctx, v1383);
                                            let v1397 = C::imm12_and(ctx, v1313, v1384);
                                            let v1446 = constructor_rv_sraiw(ctx, v610, v1397);
                                            let v1447 = constructor_output_xreg(ctx, v1446);
                                            let v1448 = Some(v1447);
                                            // Rule at src/isa/riscv64/lower.isle line 1366.
                                            return v1448;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1440 = constructor_rv_sraw(ctx, v51, v1295);
                                let v1441 = constructor_output_xreg(ctx, v1440);
                                let v1442 = Some(v1441);
                                // Rule at src/isa/riscv64/lower.isle line 1358.
                                return v1442;
                            }
                            I64 => {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v51 = constructor_put_in_xreg(ctx, v48.0);
                                let v468 = C::put_in_regs(ctx, v48.1);
                                let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                let v1295 = C::xreg_new(ctx, v1294);
                                let v1443 = constructor_rv_sra(ctx, v51, v1295);
                                let v1444 = constructor_output_xreg(ctx, v1443);
                                let v1445 = Some(v1444);
                                // Rule at src/isa/riscv64/lower.isle line 1362.
                                return v1445;
                            }
                            _ => {}
                        }
                        if let Some(v549) = v548 {
                            let v1382 = C::fits_in_16(ctx, v549);
                            if let Some(v1383) = v1382 {
                                let v1384 = constructor_ty_shift_mask(ctx, v1383);
                                let v1385 = constructor_u64_to_imm12(ctx, v1384);
                                if let Some(v1386) = v1385 {
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v610 = constructor_sext(ctx, v48.0);
                                    let v468 = C::put_in_regs(ctx, v48.1);
                                    let v1294 = C::value_regs_get(ctx, v468, 0x0_usize);
                                    let v1295 = C::xreg_new(ctx, v1294);
                                    let v1387 = constructor_rv_andi(ctx, v1295, v1386);
                                    let v1437 = constructor_rv_sraw(ctx, v610, v1387);
                                    let v1438 = constructor_output_xreg(ctx, v1437);
                                    let v1439 = Some(v1438);
                                    // Rule at src/isa/riscv64/lower.isle line 1353.
                                    return v1439;
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v1759 = constructor_put_in_freg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1760 =
                                            constructor_rv_vfadd_vf(ctx, v221, v1759, v188, v189);
                                        let v1761 = constructor_output_vreg(ctx, v1760);
                                        let v1762 = Some(v1761);
                                        // Rule at src/isa/riscv64/lower.isle line 1747.
                                        return v1762;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1609 = constructor_put_in_freg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1756 =
                                            constructor_rv_vfadd_vf(ctx, v186, v1609, v188, v189);
                                        let v1757 = constructor_output_vreg(ctx, v1756);
                                        let v1758 = Some(v1757);
                                        // Rule at src/isa/riscv64/lower.isle line 1744.
                                        return v1758;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1753 = constructor_rv_vfadd_vv(ctx, v186, v187, v188, v189);
                            let v1754 = constructor_output_vreg(ctx, v1753);
                            let v1755 = Some(v1754);
                            // Rule at src/isa/riscv64/lower.isle line 1741.
                            return v1755;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1750 = constructor_rv_fadd(ctx, v762, &FRM::RNE, v764, v765);
                            let v1751 = constructor_output_freg(ctx, v1750);
                            let v1752 = Some(v1751);
                            // Rule at src/isa/riscv64/lower.isle line 1738.
                            return v1752;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v1759 = constructor_put_in_freg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1772 =
                                            constructor_rv_vfrsub_vf(ctx, v221, v1759, v188, v189);
                                        let v1773 = constructor_output_vreg(ctx, v1772);
                                        let v1774 = Some(v1773);
                                        // Rule at src/isa/riscv64/lower.isle line 1761.
                                        return v1774;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1609 = constructor_put_in_freg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1769 =
                                            constructor_rv_vfsub_vf(ctx, v186, v1609, v188, v189);
                                        let v1770 = constructor_output_vreg(ctx, v1769);
                                        let v1771 = Some(v1770);
                                        // Rule at src/isa/riscv64/lower.isle line 1758.
                                        return v1771;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1766 = constructor_rv_vfsub_vv(ctx, v186, v187, v188, v189);
                            let v1767 = constructor_output_vreg(ctx, v1766);
                            let v1768 = Some(v1767);
                            // Rule at src/isa/riscv64/lower.isle line 1755.
                            return v1768;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1763 = constructor_rv_fsub(ctx, v762, &FRM::RNE, v764, v765);
                            let v1764 = constructor_output_freg(ctx, v1763);
                            let v1765 = Some(v1764);
                            // Rule at src/isa/riscv64/lower.isle line 1752.
                            return v1765;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v1759 = constructor_put_in_freg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1784 =
                                            constructor_rv_vfmul_vf(ctx, v221, v1759, v188, v189);
                                        let v1785 = constructor_output_vreg(ctx, v1784);
                                        let v1786 = Some(v1785);
                                        // Rule at src/isa/riscv64/lower.isle line 1774.
                                        return v1786;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1609 = constructor_put_in_freg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1781 =
                                            constructor_rv_vfmul_vf(ctx, v186, v1609, v188, v189);
                                        let v1782 = constructor_output_vreg(ctx, v1781);
                                        let v1783 = Some(v1782);
                                        // Rule at src/isa/riscv64/lower.isle line 1771.
                                        return v1783;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1778 = constructor_rv_vfmul_vv(ctx, v186, v187, v188, v189);
                            let v1779 = constructor_output_vreg(ctx, v1778);
                            let v1780 = Some(v1779);
                            // Rule at src/isa/riscv64/lower.isle line 1768.
                            return v1780;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1775 = constructor_rv_fmul(ctx, v762, &FRM::RNE, v764, v765);
                            let v1776 = constructor_output_freg(ctx, v1775);
                            let v1777 = Some(v1776);
                            // Rule at src/isa/riscv64/lower.isle line 1765.
                            return v1777;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v90 = C::def_inst(ctx, v48.0);
                            if let Some(v91) = v90 {
                                let v92 = &C::inst_data(ctx, v91);
                                if let &InstructionData::Unary {
                                    opcode: ref v93,
                                    arg: v94,
                                } = v92
                                {
                                    if let &Opcode::Splat = v93 {
                                        let v221 = constructor_put_in_vreg(ctx, v48.1);
                                        let v1759 = constructor_put_in_freg(ctx, v94);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1796 =
                                            constructor_rv_vfrdiv_vf(ctx, v221, v1759, v188, v189);
                                        let v1797 = constructor_output_vreg(ctx, v1796);
                                        let v1798 = Some(v1797);
                                        // Rule at src/isa/riscv64/lower.isle line 1788.
                                        return v1798;
                                    }
                                }
                            }
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1609 = constructor_put_in_freg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1793 =
                                            constructor_rv_vfdiv_vf(ctx, v186, v1609, v188, v189);
                                        let v1794 = constructor_output_vreg(ctx, v1793);
                                        let v1795 = Some(v1794);
                                        // Rule at src/isa/riscv64/lower.isle line 1785.
                                        return v1795;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1790 = constructor_rv_vfdiv_vv(ctx, v186, v187, v188, v189);
                            let v1791 = constructor_output_vreg(ctx, v1790);
                            let v1792 = Some(v1791);
                            // Rule at src/isa/riscv64/lower.isle line 1782.
                            return v1792;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1787 = constructor_rv_fdiv(ctx, v762, &FRM::RNE, v764, v765);
                            let v1788 = constructor_output_freg(ctx, v1787);
                            let v1789 = Some(v1788);
                            // Rule at src/isa/riscv64/lower.isle line 1779.
                            return v1789;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v78 = C::def_inst(ctx, v48.1);
                            if let Some(v79) = v78 {
                                let v80 = &C::inst_data(ctx, v79);
                                if let &InstructionData::Unary {
                                    opcode: ref v81,
                                    arg: v82,
                                } = v80
                                {
                                    if let &Opcode::Splat = v81 {
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1609 = constructor_put_in_freg(ctx, v82);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1610 =
                                            constructor_rv_vfsgnj_vf(ctx, v186, v1609, v188, v189);
                                        let v1611 = constructor_output_vreg(ctx, v1610);
                                        let v1612 = Some(v1611);
                                        // Rule at src/isa/riscv64/lower.isle line 1541.
                                        return v1612;
                                    }
                                }
                            }
                            let v186 = constructor_put_in_vreg(ctx, v48.0);
                            let v187 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1606 = constructor_rv_vfsgnj_vv(ctx, v186, v187, v188, v189);
                            let v1607 = constructor_output_vreg(ctx, v1606);
                            let v1608 = Some(v1607);
                            // Rule at src/isa/riscv64/lower.isle line 1538.
                            return v1608;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1603 = constructor_rv_fsgnj(ctx, v762, v764, v765);
                            let v1604 = constructor_output_freg(ctx, v1603);
                            let v1605 = Some(v1604);
                            // Rule at src/isa/riscv64/lower.isle line 1535.
                            return v1605;
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1815 = constructor_gen_fcmp_mask(
                                ctx,
                                v12,
                                &FloatCC::Ordered,
                                v48.0,
                                v48.1,
                            );
                            let v1249 = C::lane_type(ctx, v12);
                            let v1816 = constructor_canonical_nan_u64(ctx, v1249);
                            let v1817 = constructor_imm(ctx, I64, v1816);
                            let v1818 = C::xreg_new(ctx, v1817);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1819 = constructor_rv_vmv_vx(ctx, v1818, v189);
                            let v1820 = constructor_put_in_vreg(ctx, v48.0);
                            let v1821 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v1822 = constructor_rv_vfmin_vv(ctx, v1820, v1821, v188, v189);
                            let v1823 = constructor_rv_vmerge_vvm(ctx, v1819, v1822, v1815, v189);
                            let v1824 = constructor_output_vreg(ctx, v1823);
                            let v1825 = Some(v1824);
                            // Rule at src/isa/riscv64/lower.isle line 1817.
                            return v1825;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1811 = C::has_zfa(ctx);
                            if v1811 == true {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v764 = constructor_put_in_freg(ctx, v48.0);
                                let v765 = constructor_put_in_freg(ctx, v48.1);
                                let v1812 = constructor_rv_fminm(ctx, v762, v764, v765);
                                let v1813 = constructor_output_freg(ctx, v1812);
                                let v1814 = Some(v1813);
                                // Rule at src/isa/riscv64/lower.isle line 1807.
                                return v1814;
                            }
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1800 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v762,
                                v764,
                                v765,
                            );
                            let v1801 = constructor_put_in_freg(ctx, v48.0);
                            let v1802 = constructor_put_in_freg(ctx, v48.1);
                            let v1803 = constructor_rv_fadd(ctx, v762, &FRM::RNE, v1801, v1802);
                            let v1804 = constructor_put_in_freg(ctx, v48.0);
                            let v1805 = constructor_put_in_freg(ctx, v48.1);
                            let v1806 = constructor_rv_fmin(ctx, v762, v1804, v1805);
                            let v1807 = constructor_float_to_int_compare(ctx, v1800);
                            let v1808 = constructor_gen_select_freg(ctx, v1807, v1806, v1803);
                            let v1809 = constructor_output_freg(ctx, v1808);
                            let v1810 = Some(v1809);
                            // Rule at src/isa/riscv64/lower.isle line 1796.
                            return v1810;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v1815 = constructor_gen_fcmp_mask(
                                ctx,
                                v12,
                                &FloatCC::Ordered,
                                v48.0,
                                v48.1,
                            );
                            let v1249 = C::lane_type(ctx, v12);
                            let v1816 = constructor_canonical_nan_u64(ctx, v1249);
                            let v1817 = constructor_imm(ctx, I64, v1816);
                            let v1818 = C::xreg_new(ctx, v1817);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1819 = constructor_rv_vmv_vx(ctx, v1818, v189);
                            let v1820 = constructor_put_in_vreg(ctx, v48.0);
                            let v1821 = constructor_put_in_vreg(ctx, v48.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v1833 = constructor_rv_vfmax_vv(ctx, v1820, v1821, v188, v189);
                            let v1834 = constructor_rv_vmerge_vvm(ctx, v1819, v1833, v1815, v189);
                            let v1835 = constructor_output_vreg(ctx, v1834);
                            let v1836 = Some(v1835);
                            // Rule at src/isa/riscv64/lower.isle line 1850.
                            return v1836;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1811 = C::has_zfa(ctx);
                            if v1811 == true {
                                let v48 = C::unpack_value_array_2(ctx, v47);
                                let v764 = constructor_put_in_freg(ctx, v48.0);
                                let v765 = constructor_put_in_freg(ctx, v48.1);
                                let v1830 = constructor_rv_fmaxm(ctx, v762, v764, v765);
                                let v1831 = constructor_output_freg(ctx, v1830);
                                let v1832 = Some(v1831);
                                // Rule at src/isa/riscv64/lower.isle line 1840.
                                return v1832;
                            }
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v764 = constructor_put_in_freg(ctx, v48.0);
                            let v765 = constructor_put_in_freg(ctx, v48.1);
                            let v1800 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v762,
                                v764,
                                v765,
                            );
                            let v1801 = constructor_put_in_freg(ctx, v48.0);
                            let v1802 = constructor_put_in_freg(ctx, v48.1);
                            let v1803 = constructor_rv_fadd(ctx, v762, &FRM::RNE, v1801, v1802);
                            let v1804 = constructor_put_in_freg(ctx, v48.0);
                            let v1805 = constructor_put_in_freg(ctx, v48.1);
                            let v1826 = constructor_rv_fmax(ctx, v762, v1804, v1805);
                            let v1807 = constructor_float_to_int_compare(ctx, v1800);
                            let v1827 = constructor_gen_select_freg(ctx, v1807, v1826, v1803);
                            let v1828 = constructor_output_freg(ctx, v1827);
                            let v1829 = Some(v1828);
                            // Rule at src/isa/riscv64/lower.isle line 1829.
                            return v1829;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2705 = C::ty_lane_count(ctx, v12);
                            let v2758 = C::u64_udiv(ctx, v2705, 0x2_u64);
                            if let Some(v2759) = v2758 {
                                let v2760 = constructor_u64_to_uimm5(ctx, v2759);
                                if let Some(v2761) = v2760 {
                                    let v2817 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2818) = v2817 {
                                        let v48 = C::unpack_value_array_2(ctx, v47);
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v2819 = C::ty_half_lanes(ctx, v12);
                                        let v2820 = v2819?;
                                        let v2821 = C::vstate_from_type(ctx, v2820);
                                        let v2822 = C::vstate_mf2(ctx, v2821);
                                        let v2823 =
                                            constructor_rv_vnclip_wi(ctx, v186, v2818, v188, v2822);
                                        let v2824 = constructor_put_in_vreg(ctx, v48.1);
                                        let v2825 = constructor_rv_vnclip_wi(
                                            ctx, v2824, v2818, v188, v2822,
                                        );
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2826 = constructor_rv_vslideup_vvi(
                                            ctx, v2823, v2825, v2761, v188, v189,
                                        );
                                        let v2827 = constructor_output_vreg(ctx, v2826);
                                        let v2828 = Some(v2827);
                                        // Rule at src/isa/riscv64/lower.isle line 2966.
                                        return v2828;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2705 = C::ty_lane_count(ctx, v12);
                            let v2758 = C::u64_udiv(ctx, v2705, 0x2_u64);
                            if let Some(v2759) = v2758 {
                                let v2760 = constructor_u64_to_uimm5(ctx, v2759);
                                if let Some(v2761) = v2760 {
                                    let v2817 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2818) = v2817 {
                                        let v48 = C::unpack_value_array_2(ctx, v47);
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v1846 = C::zero_reg(ctx);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v2816 = C::value_type(ctx, v48.0);
                                        let v2834 = C::vstate_from_type(ctx, v2816);
                                        let v2835 =
                                            constructor_rv_vmax_vx(ctx, v186, v1846, v188, v2834);
                                        let v2765 = constructor_put_in_vreg(ctx, v48.1);
                                        let v2836 = C::zero_reg(ctx);
                                        let v2837 =
                                            constructor_rv_vmax_vx(ctx, v2765, v2836, v188, v2834);
                                        let v2819 = C::ty_half_lanes(ctx, v12);
                                        let v2820 = v2819?;
                                        let v2821 = C::vstate_from_type(ctx, v2820);
                                        let v2822 = C::vstate_mf2(ctx, v2821);
                                        let v2838 = constructor_rv_vnclipu_wi(
                                            ctx, v2835, v2818, v188, v2822,
                                        );
                                        let v2839 = constructor_rv_vnclipu_wi(
                                            ctx, v2837, v2818, v188, v2822,
                                        );
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2840 = constructor_rv_vslideup_vvi(
                                            ctx, v2838, v2839, v2761, v188, v189,
                                        );
                                        let v2841 = constructor_output_vreg(ctx, v2840);
                                        let v2842 = Some(v2841);
                                        // Rule at src/isa/riscv64/lower.isle line 2988.
                                        return v2842;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2705 = C::ty_lane_count(ctx, v12);
                            let v2758 = C::u64_udiv(ctx, v2705, 0x2_u64);
                            if let Some(v2759) = v2758 {
                                let v2760 = constructor_u64_to_uimm5(ctx, v2759);
                                if let Some(v2761) = v2760 {
                                    let v2817 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2818) = v2817 {
                                        let v48 = C::unpack_value_array_2(ctx, v47);
                                        let v186 = constructor_put_in_vreg(ctx, v48.0);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v2819 = C::ty_half_lanes(ctx, v12);
                                        let v2820 = v2819?;
                                        let v2821 = C::vstate_from_type(ctx, v2820);
                                        let v2822 = C::vstate_mf2(ctx, v2821);
                                        let v2829 = constructor_rv_vnclipu_wi(
                                            ctx, v186, v2818, v188, v2822,
                                        );
                                        let v2824 = constructor_put_in_vreg(ctx, v48.1);
                                        let v2830 = constructor_rv_vnclipu_wi(
                                            ctx, v2824, v2818, v188, v2822,
                                        );
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2831 = constructor_rv_vslideup_vvi(
                                            ctx, v2829, v2830, v2761, v188, v189,
                                        );
                                        let v2832 = constructor_output_vreg(ctx, v2831);
                                        let v2833 = Some(v2832);
                                        // Rule at src/isa/riscv64/lower.isle line 2975.
                                        return v2833;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2705 = C::ty_lane_count(ctx, v12);
                            let v2758 = C::u64_udiv(ctx, v2705, 0x2_u64);
                            if let Some(v2759) = v2758 {
                                let v2760 = constructor_u64_to_uimm5(ctx, v2759);
                                if let Some(v2761) = v2760 {
                                    let v2762 =
                                        constructor_gen_vec_mask(ctx, 0x5555555555555555_u64);
                                    let v48 = C::unpack_value_array_2(ctx, v47);
                                    let v2763 = constructor_put_in_vreg(ctx, v48.0);
                                    let v189 = C::vstate_from_type(ctx, v12);
                                    let v2764 =
                                        constructor_rv_vcompress_vm(ctx, v2763, v2762, v189);
                                    let v2765 = constructor_put_in_vreg(ctx, v48.1);
                                    let v2766 =
                                        constructor_rv_vcompress_vm(ctx, v2765, v2762, v189);
                                    let v188 = &constructor_unmasked(ctx);
                                    let v2767 = constructor_rv_vslideup_vvi(
                                        ctx, v2764, v2766, v2761, v188, v189,
                                    );
                                    let v2769 =
                                        constructor_gen_vec_mask(ctx, 0xaaaaaaaaaaaaaaaa_u64);
                                    let v2770 = constructor_put_in_vreg(ctx, v48.0);
                                    let v2771 =
                                        constructor_rv_vcompress_vm(ctx, v2770, v2769, v189);
                                    let v2772 = constructor_put_in_vreg(ctx, v48.1);
                                    let v2773 =
                                        constructor_rv_vcompress_vm(ctx, v2772, v2769, v189);
                                    let v2774 = constructor_rv_vslideup_vvi(
                                        ctx, v2771, v2773, v2761, v188, v189,
                                    );
                                    let v2775 =
                                        constructor_rv_vadd_vv(ctx, v2767, v2774, v188, v189);
                                    let v2776 = constructor_output_vreg(ctx, v2775);
                                    let v2777 = Some(v2776);
                                    // Rule at src/isa/riscv64/lower.isle line 2895.
                                    return v2777;
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v48 = C::unpack_value_array_2(ctx, v47);
                            let v51 = constructor_put_in_xreg(ctx, v48.0);
                            let v52 = constructor_put_in_xreg(ctx, v48.1);
                            let v1965 = C::xreg_to_reg(ctx, v51);
                            let v1966 = C::xreg_to_reg(ctx, v52);
                            let v1967 = C::value_regs(ctx, v1965, v1966);
                            let v1968 = C::output(ctx, v1967);
                            let v1969 = Some(v1968);
                            // Rule at src/isa/riscv64/lower.isle line 1945.
                            return v1969;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2541,
            arg: v2542,
            imm: v2543,
        } => {
            if let &Opcode::Extractlane = v2541 {
                let v2546 = constructor_put_in_vreg(ctx, v2542);
                let v2544 = C::value_type(ctx, v2542);
                let v2545 = C::u8_from_uimm8(ctx, v2543);
                let v2547 = constructor_gen_extractlane(ctx, v2544, v2546, v2545);
                let v2548 = constructor_output_reg(ctx, v2547);
                let v2549 = Some(v2548);
                // Rule at src/isa/riscv64/lower.isle line 2655.
                return v2549;
            }
        }
        &InstructionData::Call {
            opcode: ref v2517,
            args: v2518,
            func_ref: v2519,
        } => {
            match v2517 {
                &Opcode::Call => {
                    let v2521 = C::func_ref_data(ctx, v2519);
                    let v2520 = C::value_list_slice(ctx, v2518);
                    let v2525 = C::gen_call(ctx, v2521.0, v2521.1, v2521.2, v2520);
                    let v2526 = Some(v2525);
                    // Rule at src/isa/riscv64/lower.isle line 2638.
                    return v2526;
                }
                &Opcode::ReturnCall => {
                    let v2521 = C::func_ref_data(ctx, v2519);
                    let v2520 = C::value_list_slice(ctx, v2518);
                    let v2537 = C::gen_return_call(ctx, v2521.0, v2521.1, v2521.2, v2520);
                    let v2538 = Some(v2537);
                    // Rule at src/isa/riscv64/lower.isle line 2646.
                    return v2538;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2527,
            args: v2528,
            sig_ref: v2529,
        } => {
            match v2527 {
                &Opcode::CallIndirect => {
                    let v2530 = C::value_list_slice(ctx, v2528);
                    let v2531 = C::value_slice_unwrap(ctx, v2530);
                    if let Some(v2532) = v2531 {
                        let v2535 = C::gen_call_indirect(ctx, v2529, v2532.0, v2532.1);
                        let v2536 = Some(v2535);
                        // Rule at src/isa/riscv64/lower.isle line 2641.
                        return v2536;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2530 = C::value_list_slice(ctx, v2528);
                    let v2531 = C::value_slice_unwrap(ctx, v2530);
                    if let Some(v2532) = v2531 {
                        let v2539 = C::gen_return_call_indirect(ctx, v2529, v2532.0, v2532.1);
                        let v2540 = Some(v2539);
                        // Rule at src/isa/riscv64/lower.isle line 2649.
                        return v2540;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v2087,
            arg: v2088,
            code: ref v2089,
        } => {
            match v2087 {
                &Opcode::Trapz => {
                    let v2100 = C::def_inst(ctx, v2088);
                    if let Some(v2101) = v2100 {
                        let v2102 = &C::inst_data(ctx, v2101);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2103,
                            args: ref v2104,
                            cond: ref v2105,
                        } = v2102
                        {
                            if let &Opcode::Icmp = v2103 {
                                let v2106 = C::unpack_value_array_2(ctx, v2104);
                                let v2109 = C::value_type(ctx, v2106.0);
                                let v2110 = C::fits_in_64(ctx, v2109);
                                if let Some(v2111) = v2110 {
                                    let v2112 = &C::intcc_complement(ctx, v2105);
                                    let v2113 = constructor_put_in_xreg(ctx, v2106.0);
                                    let v2114 = constructor_put_in_xreg(ctx, v2106.1);
                                    let v2115 =
                                        constructor_gen_trapif(ctx, v2112, v2113, v2114, v2089);
                                    let v2116 = Some(v2115);
                                    // Rule at src/isa/riscv64/lower.isle line 2066.
                                    return v2116;
                                }
                            }
                        }
                    }
                    let v2090 = C::value_type(ctx, v2088);
                    if v2090 == I128 {
                        let v2097 = C::put_in_regs(ctx, v2088);
                        let v2098 =
                            constructor_gen_trapif_val_i128(ctx, &ZeroCond::Zero, v2097, v2089);
                        let v2099 = Some(v2098);
                        // Rule at src/isa/riscv64/lower.isle line 2061.
                        return v2099;
                    }
                    let v2091 = C::fits_in_64(ctx, v2090);
                    if let Some(v2092) = v2091 {
                        let v2093 = constructor_put_in_xreg(ctx, v2088);
                        let v2094 = constructor_gen_trapz(ctx, v2093, v2089);
                        let v2095 = Some(v2094);
                        // Rule at src/isa/riscv64/lower.isle line 2058.
                        return v2095;
                    }
                }
                &Opcode::Trapnz => {
                    let v2100 = C::def_inst(ctx, v2088);
                    if let Some(v2101) = v2100 {
                        let v2102 = &C::inst_data(ctx, v2101);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2103,
                            args: ref v2104,
                            cond: ref v2105,
                        } = v2102
                        {
                            if let &Opcode::Icmp = v2103 {
                                let v2106 = C::unpack_value_array_2(ctx, v2104);
                                let v2109 = C::value_type(ctx, v2106.0);
                                let v2110 = C::fits_in_64(ctx, v2109);
                                if let Some(v2111) = v2110 {
                                    let v2122 = constructor_put_in_xreg(ctx, v2106.0);
                                    let v2123 = constructor_put_in_xreg(ctx, v2106.1);
                                    let v2124 =
                                        constructor_gen_trapif(ctx, v2105, v2122, v2123, v2089);
                                    let v2125 = Some(v2124);
                                    // Rule at src/isa/riscv64/lower.isle line 2079.
                                    return v2125;
                                }
                            }
                        }
                    }
                    let v2090 = C::value_type(ctx, v2088);
                    if v2090 == I128 {
                        let v2097 = C::put_in_regs(ctx, v2088);
                        let v2120 =
                            constructor_gen_trapif_val_i128(ctx, &ZeroCond::NonZero, v2097, v2089);
                        let v2121 = Some(v2120);
                        // Rule at src/isa/riscv64/lower.isle line 2074.
                        return v2121;
                    }
                    let v2091 = C::fits_in_64(ctx, v2090);
                    if let Some(v2092) = v2091 {
                        let v2093 = constructor_put_in_xreg(ctx, v2088);
                        let v2117 = constructor_gen_trapnz(ctx, v2093, v2089);
                        let v2118 = Some(v2117);
                        // Rule at src/isa/riscv64/lower.isle line 2071.
                        return v2118;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2251,
            args: ref v2252,
            cond: ref v2253,
        } => {
            if let &Opcode::Fcmp = v2251 {
                let v2254 = C::unpack_value_array_2(ctx, v2252);
                let v2257 = C::value_type(ctx, v2254.0);
                let v2266 = C::ty_supported_vec(ctx, v2257);
                if let Some(v2267) = v2266 {
                    let v2268 = constructor_gen_fcmp_mask(ctx, v2267, v2253, v2254.0, v2254.1);
                    let v2269 = constructor_gen_expand_mask(ctx, v2267, v2268);
                    let v2270 = constructor_output_vreg(ctx, v2269);
                    let v2271 = Some(v2270);
                    // Rule at src/isa/riscv64/lower.isle line 2344.
                    return v2271;
                }
                let v2258 = C::ty_supported_float(ctx, v2257);
                if let Some(v2259) = v2258 {
                    let v2260 = constructor_put_in_freg(ctx, v2254.0);
                    let v2261 = constructor_put_in_freg(ctx, v2254.1);
                    let v2262 = &constructor_fcmp_to_float_compare(ctx, v2253, v2259, v2260, v2261);
                    let v2263 = constructor_lower_float_compare(ctx, v2262);
                    let v2264 = constructor_output_xreg(ctx, v2263);
                    let v2265 = Some(v2264);
                    // Rule at src/isa/riscv64/lower.isle line 2337.
                    return v2265;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2272,
            func_ref: v2273,
        } => {
            if let &Opcode::FuncAddr = v2272 {
                let v2274 = C::func_ref_data(ctx, v2273);
                let v2279 = C::load_ext_name(ctx, v2274.1, 0_i64);
                let v2280 = constructor_output_reg(ctx, v2279);
                let v2281 = Some(v2280);
                // Rule at src/isa/riscv64/lower.isle line 2349.
                return v2281;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v438,
            args: ref v439,
            code: ref v440,
        } => {
            if let &Opcode::UaddOverflowTrap = v438 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I64 {
                        let v441 = C::unpack_value_array_2(ctx, v439);
                        let v454 = constructor_put_in_xreg(ctx, v441.0);
                        let v455 = constructor_put_in_xreg(ctx, v441.1);
                        let v456 = constructor_rv_add(ctx, v454, v455);
                        let v458 = constructor_put_in_xreg(ctx, v441.0);
                        let v459 =
                            constructor_gen_trapif(ctx, &IntCC::UnsignedLessThan, v456, v458, v440);
                        let v460 = constructor_output_xreg(ctx, v456);
                        let v461 = Some(v460);
                        // Rule at src/isa/riscv64/lower.isle line 308.
                        return v461;
                    }
                    let v42 = C::fits_in_32(ctx, v3);
                    if let Some(v43) = v42 {
                        let v441 = C::unpack_value_array_2(ctx, v439);
                        let v444 = constructor_zext(ctx, v441.0);
                        let v445 = constructor_zext(ctx, v441.1);
                        let v446 = constructor_rv_add(ctx, v444, v445);
                        let v447 = C::ty_bits(ctx, v43);
                        let v448 = C::u8_as_i32(ctx, v447);
                        let v449 = C::imm12_const(ctx, v448);
                        let v450 = constructor_rv_srli(ctx, v446, v449);
                        let v451 = constructor_gen_trapnz(ctx, v450, v440);
                        let v452 = constructor_output_xreg(ctx, v446);
                        let v453 = Some(v452);
                        // Rule at src/isa/riscv64/lower.isle line 300.
                        return v453;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2228,
            args: ref v2229,
            cond: ref v2230,
        } => {
            if let &Opcode::Icmp = v2228 {
                let v2231 = C::unpack_value_array_2(ctx, v2229);
                let v2234 = C::value_type(ctx, v2231.0);
                let v2245 = C::ty_supported_vec(ctx, v2234);
                if let Some(v2246) = v2245 {
                    let v2247 = constructor_gen_icmp_mask(ctx, v2246, v2230, v2231.0, v2231.1);
                    let v2248 = constructor_gen_expand_mask(ctx, v2246, v2247);
                    let v2249 = constructor_output_vreg(ctx, v2248);
                    let v2250 = Some(v2249);
                    // Rule at src/isa/riscv64/lower.isle line 2333.
                    return v2250;
                }
                if v2234 == I128 {
                    let v2240 = C::put_in_regs(ctx, v2231.0);
                    let v2241 = C::put_in_regs(ctx, v2231.1);
                    let v2242 = constructor_lower_icmp_i128(ctx, v2230, v2240, v2241);
                    let v2243 = constructor_output_xreg(ctx, v2242);
                    let v2244 = Some(v2243);
                    // Rule at src/isa/riscv64/lower.isle line 2288.
                    return v2244;
                }
                let v2235 = C::fits_in_64(ctx, v2234);
                if let Some(v2236) = v2235 {
                    let v2237 = constructor_lower_icmp(ctx, v2230, v2231.0, v2231.1);
                    let v2238 = constructor_output_xreg(ctx, v2237);
                    let v2239 = Some(v2238);
                    // Rule at src/isa/riscv64/lower.isle line 2199.
                    return v2239;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v2126,
            arg: v2127,
            flags: v2128,
            offset: v2129,
        } => {
            match v2126 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2130 = C::offset32_to_i32(ctx, v2129);
                            let v2131 = constructor_amode(ctx, v2127, v2130);
                            let v2174 = &constructor_element_width_from_type(ctx, v12);
                            let v2175 = VecAMode::UnitStride { base: v2131 };
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2176 = constructor_vec_load(ctx, v2174, &v2175, v2128, v188, v189);
                            let v2177 = constructor_output_reg(ctx, v2176);
                            let v2178 = Some(v2177);
                            // Rule at src/isa/riscv64/lower.isle line 2116.
                            return v2178;
                        }
                        if v3 == I128 {
                            let v2130 = C::offset32_to_i32(ctx, v2129);
                            let v2161 = C::s32_add_fallible(ctx, v2130, 8_i32);
                            if let Some(v2162) = v2161 {
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2164 = constructor_gen_load(ctx, v2131, &LoadOP::Ld, v2128);
                                let v2165 = C::xreg_new(ctx, v2164);
                                let v2166 = constructor_amode(ctx, v2127, v2162);
                                let v2167 = constructor_gen_load(ctx, v2166, &LoadOP::Ld, v2128);
                                let v2168 = C::xreg_new(ctx, v2167);
                                let v2169 = C::xreg_to_reg(ctx, v2165);
                                let v2170 = C::xreg_to_reg(ctx, v2168);
                                let v2171 = C::value_regs(ctx, v2169, v2170);
                                let v2172 = C::output(ctx, v2171);
                                let v2173 = Some(v2172);
                                // Rule at src/isa/riscv64/lower.isle line 2110.
                                return v2173;
                            }
                        }
                        let v2130 = C::offset32_to_i32(ctx, v2129);
                        let v2131 = constructor_amode(ctx, v2127, v2130);
                        let v2156 = &C::load_op(ctx, v3);
                        let v2157 = constructor_gen_load(ctx, v2131, v2156, v2128);
                        let v2158 = constructor_output_reg(ctx, v2157);
                        let v2159 = Some(v2158);
                        // Rule at src/isa/riscv64/lower.isle line 2107.
                        return v2159;
                    }
                }
                &Opcode::Uload8 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2133 = constructor_gen_load(ctx, v2131, &LoadOP::Lbu, v2128);
                    let v2134 = constructor_output_reg(ctx, v2133);
                    let v2135 = Some(v2134);
                    // Rule at src/isa/riscv64/lower.isle line 2083.
                    return v2135;
                }
                &Opcode::Sload8 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2137 = constructor_gen_load(ctx, v2131, &LoadOP::Lb, v2128);
                    let v2138 = constructor_output_reg(ctx, v2137);
                    let v2139 = Some(v2138);
                    // Rule at src/isa/riscv64/lower.isle line 2087.
                    return v2139;
                }
                &Opcode::Uload16 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2141 = constructor_gen_load(ctx, v2131, &LoadOP::Lhu, v2128);
                    let v2142 = constructor_output_reg(ctx, v2141);
                    let v2143 = Some(v2142);
                    // Rule at src/isa/riscv64/lower.isle line 2091.
                    return v2143;
                }
                &Opcode::Sload16 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2145 = constructor_gen_load(ctx, v2131, &LoadOP::Lh, v2128);
                    let v2146 = constructor_output_reg(ctx, v2145);
                    let v2147 = Some(v2146);
                    // Rule at src/isa/riscv64/lower.isle line 2095.
                    return v2147;
                }
                &Opcode::Uload32 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2149 = constructor_gen_load(ctx, v2131, &LoadOP::Lwu, v2128);
                    let v2150 = constructor_output_reg(ctx, v2149);
                    let v2151 = Some(v2150);
                    // Rule at src/isa/riscv64/lower.isle line 2099.
                    return v2151;
                }
                &Opcode::Sload32 => {
                    let v2130 = C::offset32_to_i32(ctx, v2129);
                    let v2131 = constructor_amode(ctx, v2127, v2130);
                    let v2153 = constructor_gen_load(ctx, v2131, &LoadOP::Lw, v2128);
                    let v2154 = constructor_output_reg(ctx, v2153);
                    let v2155 = Some(v2154);
                    // Rule at src/isa/riscv64/lower.isle line 2103.
                    return v2155;
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2180 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2128,
                                    v2131,
                                );
                                let v2181 = constructor_output_vreg(ctx, v2180);
                                let v2182 = Some(v2181);
                                // Rule at src/isa/riscv64/lower.isle line 2143.
                                return v2182;
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2184 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2128,
                                    v2131,
                                );
                                let v2185 = constructor_output_vreg(ctx, v2184);
                                let v2186 = Some(v2185);
                                // Rule at src/isa/riscv64/lower.isle line 2155.
                                return v2186;
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2180 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2128,
                                    v2131,
                                );
                                let v2181 = constructor_output_vreg(ctx, v2180);
                                let v2182 = Some(v2181);
                                // Rule at src/isa/riscv64/lower.isle line 2147.
                                return v2182;
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2184 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2128,
                                    v2131,
                                );
                                let v2185 = constructor_output_vreg(ctx, v2184);
                                let v2186 = Some(v2185);
                                // Rule at src/isa/riscv64/lower.isle line 2159.
                                return v2186;
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2180 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2128,
                                    v2131,
                                );
                                let v2181 = constructor_output_vreg(ctx, v2180);
                                let v2182 = Some(v2181);
                                // Rule at src/isa/riscv64/lower.isle line 2151.
                                return v2182;
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2130 = C::offset32_to_i32(ctx, v2129);
                                let v2131 = constructor_amode(ctx, v2127, v2130);
                                let v2184 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2128,
                                    v2131,
                                );
                                let v2185 = constructor_output_vreg(ctx, v2184);
                                let v2186 = Some(v2185);
                                // Rule at src/isa/riscv64/lower.isle line 2163.
                                return v2186;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1687,
            arg: v1688,
            flags: v1689,
        } => {
            match v1687 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v2397 = C::value_type(ctx, v1688);
                            let v2398 = C::ty_supported_vec(ctx, v2397);
                            if let Some(v2399) = v2398 {
                                let v2401 = constructor_put_in_vreg(ctx, v1688);
                                let v2403 = constructor_gen_extractlane(ctx, I64X2, v2401, 0x0_u8);
                                let v2404 = constructor_put_in_vreg(ctx, v1688);
                                let v2405 = constructor_gen_extractlane(ctx, I64X2, v2404, 0x1_u8);
                                let v2406 = C::value_regs(ctx, v2403, v2405);
                                let v2407 = C::output(ctx, v2406);
                                let v2408 = Some(v2407);
                                // Rule at src/isa/riscv64/lower.isle line 2520.
                                return v2408;
                            }
                        }
                        let v2397 = C::value_type(ctx, v1688);
                        if v2397 == I128 {
                            let v11 = C::ty_supported_vec(ctx, v3);
                            if let Some(v12) = v11 {
                                let v2409 = C::put_in_regs(ctx, v1688);
                                let v2410 = C::value_regs_get(ctx, v2409, 0x0_usize);
                                let v2411 = C::xreg_new(ctx, v2410);
                                let v2412 = C::put_in_regs(ctx, v1688);
                                let v2413 = C::value_regs_get(ctx, v2412, 0x1_usize);
                                let v2414 = C::xreg_new(ctx, v2413);
                                let v2415 = C::vstate_from_type(ctx, I64X2);
                                let v2416 = constructor_rv_vmv_sx(ctx, v2414, v2415);
                                let v188 = &constructor_unmasked(ctx);
                                let v2417 = constructor_rv_vslide1up_vx(
                                    ctx, v2416, v2416, v2411, v188, v2415,
                                );
                                let v2418 = constructor_output_vreg(ctx, v2417);
                                let v2419 = Some(v2418);
                                // Rule at src/isa/riscv64/lower.isle line 2527.
                                return v2419;
                            }
                            if v3 == I128 {
                                let v2420 = constructor_output_value(ctx, v1688);
                                let v2421 = Some(v2420);
                                // Rule at src/isa/riscv64/lower.isle line 2536.
                                return v2421;
                            }
                        }
                        let v1690 = C::put_in_reg(ctx, v1688);
                        let v2422 = constructor_gen_bitcast(ctx, v1690, v2397, v3);
                        let v2423 = constructor_output_reg(ctx, v2422);
                        let v2424 = Some(v2423);
                        // Rule at src/isa/riscv64/lower.isle line 2539.
                        return v2424;
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1638 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1639) = v1638 {
                            let v1690 = C::put_in_reg(ctx, v1688);
                            let v1691 = constructor_gen_atomic_load(ctx, v1690, v1639);
                            let v1692 = constructor_output_reg(ctx, v1691);
                            let v1693 = Some(v1692);
                            // Rule at src/isa/riscv64/lower.isle line 1670.
                            return v1693;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2493,
            args: v2494,
        } => {
            if let &Opcode::Return = v2493 {
                let v2495 = C::value_list_slice(ctx, v2494);
                let v2496 = constructor_lower_return(ctx, v2495);
                let v2497 = Some(v2496);
                // Rule at src/isa/riscv64/lower.isle line 2603.
                return v2497;
            }
        }
        &InstructionData::NullAry { opcode: ref v2073 } => {
            match v2073 {
                &Opcode::Debugtrap => {
                    let v2075 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v2076 = constructor_side_effect(ctx, &v2075);
                    let v2077 = Some(v2076);
                    // Rule at src/isa/riscv64/lower.isle line 2043.
                    return v2077;
                }
                &Opcode::GetFramePointer => {
                    let v2498 = C::fp_reg(ctx);
                    let v2499 = constructor_gen_mov_from_preg(ctx, v2498);
                    let v2500 = constructor_output_reg(ctx, v2499);
                    let v2501 = Some(v2500);
                    // Rule at src/isa/riscv64/lower.isle line 2608.
                    return v2501;
                }
                &Opcode::GetStackPointer => {
                    let v2502 = C::sp_reg(ctx);
                    let v2503 = constructor_gen_mov_from_preg(ctx, v2502);
                    let v2504 = constructor_output_reg(ctx, v2503);
                    let v2505 = Some(v2504);
                    // Rule at src/isa/riscv64/lower.isle line 2611.
                    return v2505;
                }
                &Opcode::GetReturnAddress => {
                    let v2506 = C::load_ra(ctx);
                    let v2507 = constructor_output_reg(ctx, v2506);
                    let v2508 = Some(v2507);
                    // Rule at src/isa/riscv64/lower.isle line 2614.
                    return v2508;
                }
                &Opcode::Fence => {
                    let v2079 = MInst::Fence {
                        pred: 0xf,
                        succ: 0xf,
                    };
                    let v2080 = SideEffectNoResult::Inst { inst: v2079 };
                    let v2081 = constructor_side_effect(ctx, &v2080);
                    let v2082 = Some(v2081);
                    // Rule at src/isa/riscv64/lower.isle line 2048.
                    return v2082;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2677,
            args: ref v2678,
            imm: v2679,
        } => {
            if let &Opcode::Shuffle = v2677 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v11 = C::ty_supported_vec(ctx, v3);
                    if let Some(v12) = v11 {
                        if v12 == I8X16 {
                            let v2683 = C::vconst_from_immediate(ctx, v2679);
                            if let Some(v2684) = v2683 {
                                let v2686 = C::i8_to_imm5(ctx, -16_i8);
                                if let Some(v2687) = v2686 {
                                    let v2688 = constructor_gen_constant(ctx, v12, v2684);
                                    let v2680 = C::unpack_value_array_2(ctx, v2678);
                                    let v2689 = constructor_put_in_vreg(ctx, v2680.0);
                                    let v188 = &constructor_unmasked(ctx);
                                    let v189 = C::vstate_from_type(ctx, v12);
                                    let v2690 =
                                        constructor_rv_vrgather_vv(ctx, v2689, v2688, v188, v189);
                                    let v2691 =
                                        constructor_rv_vadd_vi(ctx, v2688, v2687, v188, v189);
                                    let v2692 = constructor_put_in_vreg(ctx, v2680.1);
                                    let v2693 =
                                        constructor_rv_vrgather_vv(ctx, v2692, v2691, v188, v189);
                                    let v2694 =
                                        constructor_rv_vor_vv(ctx, v2690, v2693, v188, v189);
                                    let v2695 = constructor_output_vreg(ctx, v2694);
                                    let v2696 = Some(v2695);
                                    // Rule at src/isa/riscv64/lower.isle line 2822.
                                    return v2696;
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1837,
            stack_slot: v1838,
            offset: v1839,
        } => {
            if let &Opcode::StackAddr = v1837 {
                let v1840 = C::gen_stack_addr(ctx, v1838, v1839);
                let v1841 = constructor_output_reg(ctx, v1840);
                let v1842 = Some(v1841);
                // Rule at src/isa/riscv64/lower.isle line 1859.
                return v1842;
            }
        }
        &InstructionData::Store {
            opcode: ref v2187,
            args: ref v2188,
            flags: v2189,
            offset: v2190,
        } => {
            match v2187 {
                &Opcode::Store => {
                    let v2191 = C::unpack_value_array_2(ctx, v2188);
                    let v2206 = C::value_type(ctx, v2191.0);
                    let v2220 = C::ty_supported_vec(ctx, v2206);
                    if let Some(v2221) = v2220 {
                        let v2194 = C::offset32_to_i32(ctx, v2190);
                        let v2195 = constructor_amode(ctx, v2191.1, v2194);
                        let v2224 = constructor_put_in_vreg(ctx, v2191.0);
                        let v2222 = &constructor_element_width_from_type(ctx, v2221);
                        let v2223 = VecAMode::UnitStride { base: v2195 };
                        let v188 = &constructor_unmasked(ctx);
                        let v2225 = C::vstate_from_type(ctx, v2221);
                        let v2226 =
                            constructor_vec_store(ctx, v2222, &v2223, v2224, v2189, v188, v2225);
                        let v2227 = Some(v2226);
                        // Rule at src/isa/riscv64/lower.isle line 2187.
                        return v2227;
                    }
                    if v2206 == I128 {
                        let v2194 = C::offset32_to_i32(ctx, v2190);
                        let v2209 = C::s32_add_fallible(ctx, v2194, 8_i32);
                        if let Some(v2210) = v2209 {
                            let v2195 = constructor_amode(ctx, v2191.1, v2194);
                            let v2212 = C::put_in_regs(ctx, v2191.0);
                            let v2213 = C::value_regs_get(ctx, v2212, 0x0_usize);
                            let v2214 =
                                constructor_rv_store(ctx, v2195, &StoreOP::Sd, v2189, v2213);
                            let v2215 = constructor_amode(ctx, v2191.1, v2210);
                            let v2216 = C::put_in_regs(ctx, v2191.0);
                            let v2217 = C::value_regs_get(ctx, v2216, 0x1_usize);
                            let v2218 =
                                constructor_rv_store(ctx, v2215, &StoreOP::Sd, v2189, v2217);
                            let v2219 = Some(v2218);
                            // Rule at src/isa/riscv64/lower.isle line 2182.
                            return v2219;
                        }
                    }
                    let v2194 = C::offset32_to_i32(ctx, v2190);
                    let v2195 = constructor_amode(ctx, v2191.1, v2194);
                    let v2207 = constructor_gen_store(ctx, v2195, v2189, v2191.0);
                    let v2208 = Some(v2207);
                    // Rule at src/isa/riscv64/lower.isle line 2179.
                    return v2208;
                }
                &Opcode::Istore8 => {
                    let v2191 = C::unpack_value_array_2(ctx, v2188);
                    let v2194 = C::offset32_to_i32(ctx, v2190);
                    let v2195 = constructor_amode(ctx, v2191.1, v2194);
                    let v2197 = C::put_in_reg(ctx, v2191.0);
                    let v2198 = constructor_rv_store(ctx, v2195, &StoreOP::Sb, v2189, v2197);
                    let v2199 = Some(v2198);
                    // Rule at src/isa/riscv64/lower.isle line 2167.
                    return v2199;
                }
                &Opcode::Istore16 => {
                    let v2191 = C::unpack_value_array_2(ctx, v2188);
                    let v2194 = C::offset32_to_i32(ctx, v2190);
                    let v2195 = constructor_amode(ctx, v2191.1, v2194);
                    let v2197 = C::put_in_reg(ctx, v2191.0);
                    let v2201 = constructor_rv_store(ctx, v2195, &StoreOP::Sh, v2189, v2197);
                    let v2202 = Some(v2201);
                    // Rule at src/isa/riscv64/lower.isle line 2171.
                    return v2202;
                }
                &Opcode::Istore32 => {
                    let v2191 = C::unpack_value_array_2(ctx, v2188);
                    let v2194 = C::offset32_to_i32(ctx, v2190);
                    let v2195 = constructor_amode(ctx, v2191.1, v2194);
                    let v2197 = C::put_in_reg(ctx, v2191.0);
                    let v2204 = constructor_rv_store(ctx, v2195, &StoreOP::Sw, v2189, v2197);
                    let v2205 = Some(v2204);
                    // Rule at src/isa/riscv64/lower.isle line 2175.
                    return v2205;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1694,
            args: ref v1695,
            flags: v1696,
        } => {
            if let &Opcode::AtomicStore = v1694 {
                let v1697 = C::unpack_value_array_2(ctx, v1695);
                let v1700 = C::value_type(ctx, v1697.0);
                let v1701 = C::valid_atomic_transaction(ctx, v1700);
                if let Some(v1702) = v1701 {
                    let v1703 = C::put_in_reg(ctx, v1697.1);
                    let v1704 = C::put_in_reg(ctx, v1697.0);
                    let v1705 = constructor_gen_atomic_store(ctx, v1703, v1702, v1704);
                    let v1706 = Some(v1705);
                    // Rule at src/isa/riscv64/lower.isle line 1676.
                    return v1706;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1613,
            args: ref v1614,
        } => {
            match v1613 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1843 = C::i64_from_iconst(ctx, v1615.1);
                            if let Some(v1844) = v1843 {
                                if v1844 == 0_i64 {
                                    let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                                    let v1846 = C::zero_reg(ctx);
                                    let v1847 = constructor_put_in_xreg(ctx, v1615.2);
                                    let v1848 =
                                        constructor_gen_select_xreg(ctx, v1845, v1846, v1847);
                                    let v1849 = constructor_output_xreg(ctx, v1848);
                                    let v1850 = Some(v1849);
                                    // Rule at src/isa/riscv64/lower.isle line 1868.
                                    return v1850;
                                }
                            }
                            let v1851 = C::i64_from_iconst(ctx, v1615.2);
                            if let Some(v1852) = v1851 {
                                if v1852 == 0_i64 {
                                    let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                                    let v1853 = constructor_put_in_xreg(ctx, v1615.1);
                                    let v1854 = C::zero_reg(ctx);
                                    let v1855 =
                                        constructor_gen_select_xreg(ctx, v1845, v1853, v1854);
                                    let v1856 = constructor_output_xreg(ctx, v1855);
                                    let v1857 = Some(v1856);
                                    // Rule at src/isa/riscv64/lower.isle line 1871.
                                    return v1857;
                                }
                            }
                            let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                            let v1853 = constructor_put_in_xreg(ctx, v1615.1);
                            let v1847 = constructor_put_in_xreg(ctx, v1615.2);
                            let v1858 = constructor_gen_select_xreg(ctx, v1845, v1853, v1847);
                            let v1859 = constructor_output_xreg(ctx, v1858);
                            let v1860 = Some(v1859);
                            // Rule at src/isa/riscv64/lower.isle line 1874.
                            return v1860;
                        }
                        if v3 == I128 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                            let v1861 = C::put_in_regs(ctx, v1615.1);
                            let v1862 = C::put_in_regs(ctx, v1615.2);
                            let v1863 = constructor_gen_select_regs(ctx, v1845, v1861, v1862);
                            let v1864 = C::output(ctx, v1863);
                            let v1865 = Some(v1864);
                            // Rule at src/isa/riscv64/lower.isle line 1877.
                            return v1865;
                        }
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                            let v1866 = constructor_put_in_vreg(ctx, v1615.1);
                            let v1867 = constructor_put_in_vreg(ctx, v1615.2);
                            let v1868 = constructor_gen_select_vreg(ctx, v1845, v1866, v1867);
                            let v1869 = constructor_output_vreg(ctx, v1868);
                            let v1870 = Some(v1869);
                            // Rule at src/isa/riscv64/lower.isle line 1880.
                            return v1870;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1845 = constructor_is_nonzero_cmp(ctx, v1615.0);
                            let v1871 = constructor_put_in_freg(ctx, v1615.1);
                            let v1872 = constructor_put_in_freg(ctx, v1615.2);
                            let v1873 = constructor_gen_select_freg(ctx, v1845, v1871, v1872);
                            let v1874 = constructor_output_freg(ctx, v1873);
                            let v1875 = Some(v1874);
                            // Rule at src/isa/riscv64/lower.isle line 1883.
                            return v1875;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1851 = C::i64_from_iconst(ctx, v1615.2);
                            if let Some(v1852) = v1851 {
                                if v1852 == 0_i64 {
                                    let v2486 = constructor_put_in_xreg(ctx, v1615.1);
                                    let v2482 = constructor_gen_bmask(ctx, v1615.0);
                                    let v2487 = constructor_rv_and(ctx, v2486, v2482);
                                    let v2488 = constructor_output_xreg(ctx, v2487);
                                    let v2489 = Some(v2488);
                                    // Rule at src/isa/riscv64/lower.isle line 2594.
                                    return v2489;
                                }
                            }
                            let v1843 = C::i64_from_iconst(ctx, v1615.1);
                            if let Some(v1844) = v1843 {
                                if v1844 == 0_i64 {
                                    let v2481 = constructor_put_in_xreg(ctx, v1615.2);
                                    let v2482 = constructor_gen_bmask(ctx, v1615.0);
                                    let v2483 = constructor_rv_andn(ctx, v2481, v2482);
                                    let v2484 = constructor_output_xreg(ctx, v2483);
                                    let v2485 = Some(v2484);
                                    // Rule at src/isa/riscv64/lower.isle line 2592.
                                    return v2485;
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v2452 = constructor_gen_bmask(ctx, v1615.0);
                            let v1861 = C::put_in_regs(ctx, v1615.1);
                            let v2459 = C::value_regs_get(ctx, v1861, 0x0_usize);
                            let v2460 = C::xreg_new(ctx, v2459);
                            let v2461 = constructor_rv_and(ctx, v2452, v2460);
                            let v2462 = C::put_in_regs(ctx, v1615.2);
                            let v2463 = C::value_regs_get(ctx, v2462, 0x0_usize);
                            let v2464 = C::xreg_new(ctx, v2463);
                            let v2465 = constructor_rv_andn(ctx, v2464, v2452);
                            let v2466 = constructor_rv_or(ctx, v2461, v2465);
                            let v2468 = C::put_in_regs(ctx, v1615.1);
                            let v2469 = C::value_regs_get(ctx, v2468, 0x1_usize);
                            let v2470 = C::xreg_new(ctx, v2469);
                            let v2471 = constructor_rv_and(ctx, v2452, v2470);
                            let v2472 = C::put_in_regs(ctx, v1615.2);
                            let v2473 = C::value_regs_get(ctx, v2472, 0x1_usize);
                            let v2474 = C::xreg_new(ctx, v2473);
                            let v2475 = constructor_rv_andn(ctx, v2474, v2452);
                            let v2476 = constructor_rv_or(ctx, v2471, v2475);
                            let v2467 = C::xreg_to_reg(ctx, v2466);
                            let v2477 = C::xreg_to_reg(ctx, v2476);
                            let v2478 = C::value_regs(ctx, v2467, v2477);
                            let v2479 = C::output(ctx, v2478);
                            let v2480 = Some(v2479);
                            // Rule at src/isa/riscv64/lower.isle line 2584.
                            return v2480;
                        }
                        if let Some(v735) = v734 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v2452 = constructor_gen_bmask(ctx, v1615.0);
                            let v1853 = constructor_put_in_xreg(ctx, v1615.1);
                            let v2453 = constructor_rv_and(ctx, v2452, v1853);
                            let v2454 = constructor_put_in_xreg(ctx, v1615.2);
                            let v2455 = constructor_rv_andn(ctx, v2454, v2452);
                            let v2456 = constructor_rv_or(ctx, v2453, v2455);
                            let v2457 = constructor_output_xreg(ctx, v2456);
                            let v2458 = Some(v2457);
                            // Rule at src/isa/riscv64/lower.isle line 2581.
                            return v2458;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1894 = C::def_inst(ctx, v1615.0);
                            if let Some(v1895) = v1894 {
                                let v1896 = &C::inst_data(ctx, v1895);
                                match v1896 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1913,
                                        args: ref v1914,
                                        cond: ref v1915,
                                    } => {
                                        if let &Opcode::Fcmp = v1913 {
                                            let v1916 = C::unpack_value_array_2(ctx, v1914);
                                            let v1919 = C::value_type(ctx, v1916.0);
                                            let v1920 = C::ty_supported_vec(ctx, v1919);
                                            if let Some(v1921) = v1920 {
                                                let v1922 = constructor_gen_fcmp_mask(
                                                    ctx, v1921, v1915, v1916.0, v1916.1,
                                                );
                                                let v1907 = constructor_put_in_vreg(ctx, v1615.2);
                                                let v1908 = constructor_put_in_vreg(ctx, v1615.1);
                                                let v1923 = C::vstate_from_type(ctx, v1921);
                                                let v1924 = constructor_rv_vmerge_vvm(
                                                    ctx, v1907, v1908, v1922, v1923,
                                                );
                                                let v1925 = constructor_output_vreg(ctx, v1924);
                                                let v1926 = Some(v1925);
                                                // Rule at src/isa/riscv64/lower.isle line 1922.
                                                return v1926;
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1897,
                                        args: ref v1898,
                                        cond: ref v1899,
                                    } => {
                                        if let &Opcode::Icmp = v1897 {
                                            let v1900 = C::unpack_value_array_2(ctx, v1898);
                                            let v1903 = C::value_type(ctx, v1900.0);
                                            let v1904 = C::ty_supported_vec(ctx, v1903);
                                            if let Some(v1905) = v1904 {
                                                let v1906 = constructor_gen_icmp_mask(
                                                    ctx, v1905, v1899, v1900.0, v1900.1,
                                                );
                                                let v1907 = constructor_put_in_vreg(ctx, v1615.2);
                                                let v1908 = constructor_put_in_vreg(ctx, v1615.1);
                                                let v1909 = C::vstate_from_type(ctx, v1905);
                                                let v1910 = constructor_rv_vmerge_vvm(
                                                    ctx, v1907, v1908, v1906, v1909,
                                                );
                                                let v1911 = constructor_output_vreg(ctx, v1910);
                                                let v1912 = Some(v1911);
                                                // Rule at src/isa/riscv64/lower.isle line 1918.
                                                return v1912;
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1927,
                                        arg: v1928,
                                        flags: v1929,
                                    } => {
                                        if let &Opcode::Bitcast = v1927 {
                                            let v1930 = C::def_inst(ctx, v1928);
                                            if let Some(v1931) = v1930 {
                                                let v1932 = &C::inst_data(ctx, v1931);
                                                match v1932 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1933,
                                                        args: ref v1934,
                                                        cond: ref v1935,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1933 {
                                                            let v1936 =
                                                                C::unpack_value_array_2(ctx, v1934);
                                                            let v1939 = C::value_type(ctx, v1936.0);
                                                            let v1940 =
                                                                C::ty_supported_vec(ctx, v1939);
                                                            if let Some(v1941) = v1940 {
                                                                let v1942 =
                                                                    constructor_gen_fcmp_mask(
                                                                        ctx, v1941, v1935, v1936.0,
                                                                        v1936.1,
                                                                    );
                                                                let v1907 = constructor_put_in_vreg(
                                                                    ctx, v1615.2,
                                                                );
                                                                let v1908 = constructor_put_in_vreg(
                                                                    ctx, v1615.1,
                                                                );
                                                                let v1943 =
                                                                    C::vstate_from_type(ctx, v1941);
                                                                let v1944 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1907, v1908, v1942,
                                                                        v1943,
                                                                    );
                                                                let v1945 = constructor_output_vreg(
                                                                    ctx, v1944,
                                                                );
                                                                let v1946 = Some(v1945);
                                                                // Rule at src/isa/riscv64/lower.isle line 1926.
                                                                return v1946;
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1947,
                                                        args: ref v1948,
                                                        cond: ref v1949,
                                                    } => {
                                                        if let &Opcode::Icmp = v1947 {
                                                            let v1950 =
                                                                C::unpack_value_array_2(ctx, v1948);
                                                            let v1953 = C::value_type(ctx, v1950.0);
                                                            let v1954 =
                                                                C::ty_supported_vec(ctx, v1953);
                                                            if let Some(v1955) = v1954 {
                                                                let v1956 =
                                                                    constructor_gen_icmp_mask(
                                                                        ctx, v1955, v1949, v1950.0,
                                                                        v1950.1,
                                                                    );
                                                                let v1907 = constructor_put_in_vreg(
                                                                    ctx, v1615.2,
                                                                );
                                                                let v1908 = constructor_put_in_vreg(
                                                                    ctx, v1615.1,
                                                                );
                                                                let v1957 =
                                                                    C::vstate_from_type(ctx, v1955);
                                                                let v1958 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1907, v1908, v1956,
                                                                        v1957,
                                                                    );
                                                                let v1959 = constructor_output_vreg(
                                                                    ctx, v1958,
                                                                );
                                                                let v1960 = Some(v1959);
                                                                // Rule at src/isa/riscv64/lower.isle line 1930.
                                                                return v1960;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1885 = constructor_put_in_vreg(ctx, v1615.0);
                            let v1866 = constructor_put_in_vreg(ctx, v1615.1);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1886 = constructor_rv_vand_vv(ctx, v1885, v1866, v188, v189);
                            let v1887 = constructor_put_in_vreg(ctx, v1615.0);
                            let v1888 = constructor_rv_vnot_v(ctx, v1887, v188, v189);
                            let v1889 = constructor_put_in_vreg(ctx, v1615.2);
                            let v1890 = constructor_rv_vand_vv(ctx, v1888, v1889, v188, v189);
                            let v1891 = constructor_rv_vor_vv(ctx, v1886, v1890, v188, v189);
                            let v1892 = constructor_output_vreg(ctx, v1891);
                            let v1893 = Some(v1892);
                            // Rule at src/isa/riscv64/lower.isle line 1900.
                            return v1893;
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v1615 = C::unpack_value_array_3(ctx, v1614);
                            let v1876 = constructor_put_in_xreg(ctx, v1615.0);
                            let v1853 = constructor_put_in_xreg(ctx, v1615.1);
                            let v1877 = constructor_rv_and(ctx, v1876, v1853);
                            let v1878 = constructor_put_in_xreg(ctx, v1615.0);
                            let v1879 = constructor_rv_not(ctx, v1878);
                            let v1880 = constructor_put_in_xreg(ctx, v1615.2);
                            let v1881 = constructor_rv_and(ctx, v1879, v1880);
                            let v1882 = constructor_rv_or(ctx, v1877, v1881);
                            let v1883 = constructor_output_xreg(ctx, v1882);
                            let v1884 = Some(v1883);
                            // Rule at src/isa/riscv64/lower.isle line 1889.
                            return v1884;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1615 = C::unpack_value_array_3(ctx, v1614);
                        let v1619 = &constructor_is_fneg(ctx, v1615.0);
                        let v1625 = constructor_is_fneg_neg(ctx, v1619);
                        let v1620 = &constructor_is_fneg(ctx, v1615.1);
                        let v1626 = constructor_is_fneg_neg(ctx, v1620);
                        let v1627 = C::u64_xor(ctx, v1625, v1626);
                        let v1621 = &constructor_is_fneg(ctx, v1615.2);
                        let v1628 = constructor_is_fneg_neg(ctx, v1621);
                        let v1622 = constructor_get_fneg_value(ctx, v1619);
                        let v1623 = constructor_get_fneg_value(ctx, v1620);
                        let v1624 = constructor_get_fneg_value(ctx, v1621);
                        let v1629 = constructor_rv_fma(ctx, v3, v1627, v1628, v1622, v1623, v1624);
                        let v1630 = Some(v1629);
                        // Rule at src/isa/riscv64/lower.isle line 1577.
                        return v1630;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2550,
            args: ref v2551,
            imm: v2552,
        } => {
            if let &Opcode::Insertlane = v2550 {
                let v2553 = C::unpack_value_array_2(ctx, v2551);
                let v2556 = C::value_type(ctx, v2553.0);
                let v2557 = C::ty_supported_vec(ctx, v2556);
                if let Some(v2558) = v2557 {
                    let v2578 = C::i64_from_iconst(ctx, v2553.1);
                    if let Some(v2579) = v2578 {
                        let v2580 = C::imm5_from_i64(ctx, v2579);
                        if let Some(v2581) = v2580 {
                            let v2562 = C::u8_from_uimm8(ctx, v2552);
                            let v2563 = C::u8_as_u64(ctx, v2562);
                            let v2564 = C::u64_shl(ctx, 0x1_u64, v2563);
                            let v2565 = constructor_gen_vec_mask(ctx, v2564);
                            let v2566 = constructor_put_in_vreg(ctx, v2553.0);
                            let v2568 = C::vstate_from_type(ctx, v2558);
                            let v2582 = constructor_rv_vmerge_vim(ctx, v2566, v2581, v2565, v2568);
                            let v2583 = constructor_output_vreg(ctx, v2582);
                            let v2584 = Some(v2583);
                            // Rule at src/isa/riscv64/lower.isle line 2678.
                            return v2584;
                        }
                    }
                    let v2559 = C::value_type(ctx, v2553.1);
                    let v2572 = C::ty_supported_float(ctx, v2559);
                    if let Some(v2573) = v2572 {
                        let v2562 = C::u8_from_uimm8(ctx, v2552);
                        let v2563 = C::u8_as_u64(ctx, v2562);
                        let v2564 = C::u64_shl(ctx, 0x1_u64, v2563);
                        let v2565 = constructor_gen_vec_mask(ctx, v2564);
                        let v2566 = constructor_put_in_vreg(ctx, v2553.0);
                        let v2574 = constructor_put_in_freg(ctx, v2553.1);
                        let v2568 = C::vstate_from_type(ctx, v2558);
                        let v2575 = constructor_rv_vfmerge_vfm(ctx, v2566, v2574, v2565, v2568);
                        let v2576 = constructor_output_vreg(ctx, v2575);
                        let v2577 = Some(v2576);
                        // Rule at src/isa/riscv64/lower.isle line 2670.
                        return v2577;
                    }
                    let v2560 = C::ty_int(ctx, v2559);
                    if let Some(v2561) = v2560 {
                        let v2562 = C::u8_from_uimm8(ctx, v2552);
                        let v2563 = C::u8_as_u64(ctx, v2562);
                        let v2564 = C::u64_shl(ctx, 0x1_u64, v2563);
                        let v2565 = constructor_gen_vec_mask(ctx, v2564);
                        let v2566 = constructor_put_in_vreg(ctx, v2553.0);
                        let v2567 = constructor_put_in_xreg(ctx, v2553.1);
                        let v2568 = C::vstate_from_type(ctx, v2558);
                        let v2569 = constructor_rv_vmerge_vxm(ctx, v2566, v2567, v2565, v2568);
                        let v2570 = constructor_output_vreg(ctx, v2569);
                        let v2571 = Some(v2570);
                        // Rule at src/isa/riscv64/lower.isle line 2663.
                        return v2571;
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2083,
            code: ref v2084,
        } => {
            if let &Opcode::Trap = v2083 {
                let v2085 = constructor_udf(ctx, v2084);
                let v2086 = Some(v2085);
                // Rule at src/isa/riscv64/lower.isle line 2053.
                return v2086;
            }
        }
        &InstructionData::Unary {
            opcode: ref v550,
            arg: v551,
        } => {
            match v550 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1050 = C::def_inst(ctx, v551);
                        if let Some(v1051) = v1050 {
                            let v1052 = &C::inst_data(ctx, v1051);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v2594,
                                imm: v2595,
                            } = v1052
                            {
                                if let &Opcode::Iconst = v2594 {
                                    let v2596 = C::u64_from_imm64(ctx, v2595);
                                    let v2597 = C::imm5_from_u64(ctx, v2596);
                                    if let Some(v2598) = v2597 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2585 = C::vstate_from_type(ctx, v3);
                                        let v2599 = constructor_rv_vmv_vi(ctx, v2598, v2585);
                                        let v2600 = constructor_output_vreg(ctx, v2599);
                                        let v2601 = Some(v2600);
                                        // Rule at src/isa/riscv64/lower.isle line 2692.
                                        return v2601;
                                    }
                                }
                            }
                        }
                        let v1194 = C::value_type(ctx, v551);
                        let v2589 = C::ty_int_ref_scalar_64_extract(ctx, v1194);
                        if let Some(v2590) = v2589 {
                            let v1024 = constructor_put_in_xreg(ctx, v551);
                            let v3 = C::value_type(ctx, v2);
                            let v2585 = C::vstate_from_type(ctx, v3);
                            let v2591 = constructor_rv_vmv_vx(ctx, v1024, v2585);
                            let v2592 = constructor_output_vreg(ctx, v2591);
                            let v2593 = Some(v2592);
                            // Rule at src/isa/riscv64/lower.isle line 2689.
                            return v2593;
                        }
                        let v2317 = C::ty_supported_float(ctx, v1194);
                        if let Some(v2318) = v2317 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v3 = C::value_type(ctx, v2);
                            let v2585 = C::vstate_from_type(ctx, v3);
                            let v2586 = constructor_rv_vfmv_vf(ctx, v1028, v2585);
                            let v2587 = constructor_output_vreg(ctx, v2586);
                            let v2588 = Some(v2587);
                            // Rule at src/isa/riscv64/lower.isle line 2686.
                            return v2588;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1194 = C::value_type(ctx, v551);
                    let v2644 = C::ty_supported_vec(ctx, v1194);
                    if let Some(v2645) = v2644 {
                        let v556 = constructor_put_in_vreg(ctx, v551);
                        let v2323 = constructor_put_in_vreg(ctx, v551);
                        let v188 = &constructor_unmasked(ctx);
                        let v2649 = C::vstate_from_type(ctx, v2645);
                        let v2655 = constructor_rv_vredmaxu_vs(ctx, v556, v2323, v188, v2649);
                        let v2656 = constructor_rv_vmv_xs(ctx, v2655, v2649);
                        let v2657 = constructor_rv_snez(ctx, v2656);
                        let v2658 = constructor_output_xreg(ctx, v2657);
                        let v2659 = Some(v2658);
                        // Rule at src/isa/riscv64/lower.isle line 2777.
                        return v2659;
                    }
                }
                &Opcode::VallTrue => {
                    let v1194 = C::value_type(ctx, v551);
                    let v2644 = C::ty_supported_vec(ctx, v1194);
                    if let Some(v2645) = v2644 {
                        let v2647 = C::i8_to_imm5(ctx, 1_i8);
                        if let Some(v2648) = v2647 {
                            let v2649 = C::vstate_from_type(ctx, v2645);
                            let v2650 = constructor_rv_vmv_vi(ctx, v2648, v2649);
                            let v2323 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v2651 = constructor_rv_vredminu_vs(ctx, v2323, v2650, v188, v2649);
                            let v2652 = constructor_rv_vmv_xs(ctx, v2651, v2649);
                            let v2653 = constructor_output_xreg(ctx, v2652);
                            let v2654 = Some(v2653);
                            // Rule at src/isa/riscv64/lower.isle line 2763.
                            return v2654;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1194 = C::value_type(ctx, v551);
                    let v2644 = C::ty_supported_vec(ctx, v1194);
                    if let Some(v2645) = v2644 {
                        let v556 = constructor_put_in_vreg(ctx, v551);
                        let v1846 = C::zero_reg(ctx);
                        let v188 = &constructor_unmasked(ctx);
                        let v2649 = C::vstate_from_type(ctx, v2645);
                        let v2660 = constructor_rv_vmslt_vx(ctx, v556, v1846, v188, v2649);
                        let v2415 = C::vstate_from_type(ctx, I64X2);
                        let v2661 = constructor_rv_vmv_xs(ctx, v2660, v2415);
                        let v2662 = C::ty_lane_mask(ctx, v2645);
                        let v2663 = constructor_gen_andi(ctx, v2661, v2662);
                        let v2664 = constructor_output_xreg(ctx, v2663);
                        let v2665 = Some(v2664);
                        // Rule at src/isa/riscv64/lower.isle line 2793.
                        return v2665;
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v557 = constructor_rv_vneg_v(ctx, v556, v188, v189);
                            let v558 = constructor_output_vreg(ctx, v557);
                            let v559 = Some(v558);
                            // Rule at src/isa/riscv64/lower.isle line 443.
                            return v559;
                        }
                        let v548 = C::ty_int(ctx, v3);
                        if let Some(v549) = v548 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v553 = constructor_neg(ctx, v549, v552);
                            let v554 = C::output(ctx, v553);
                            let v555 = Some(v554);
                            // Rule at src/isa/riscv64/lower.isle line 440.
                            return v555;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v557 = constructor_rv_vneg_v(ctx, v556, v188, v189);
                            let v1255 = constructor_put_in_vreg(ctx, v551);
                            let v2514 = constructor_rv_vmax_vv(ctx, v1255, v557, v188, v189);
                            let v2515 = constructor_output_vreg(ctx, v2514);
                            let v2516 = Some(v2515);
                            // Rule at src/isa/riscv64/lower.isle line 2632.
                            return v2516;
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v1140 = constructor_sext(ctx, v551);
                            let v2509 = constructor_rv_neg(ctx, v1140);
                            let v2510 = constructor_cmp_gt(ctx, v1140, v2509);
                            let v2511 = constructor_gen_select_xreg(ctx, v2510, v1140, v2509);
                            let v2512 = constructor_output_xreg(ctx, v2511);
                            let v2513 = Some(v2512);
                            // Rule at src/isa/riscv64/lower.isle line 2624.
                            return v2513;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v769 = C::has_zbb(ctx);
                            if v769 == true {
                                let v1050 = C::def_inst(ctx, v551);
                                if let Some(v1051) = v1050 {
                                    let v1052 = &C::inst_data(ctx, v1051);
                                    if let &InstructionData::Binary {
                                        opcode: ref v1053,
                                        args: ref v1054,
                                    } = v1052
                                    {
                                        if let &Opcode::Bxor = v1053 {
                                            let v1055 = C::unpack_value_array_2(ctx, v1054);
                                            let v1058 = constructor_put_in_xreg(ctx, v1055.0);
                                            let v1059 = constructor_put_in_xreg(ctx, v1055.1);
                                            let v1060 = constructor_rv_xnor(ctx, v1058, v1059);
                                            let v1061 = constructor_output_xreg(ctx, v1060);
                                            let v1062 = Some(v1061);
                                            // Rule at src/isa/riscv64/lower.isle line 973.
                                            return v1062;
                                        }
                                    }
                                }
                            }
                        }
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1047 = constructor_rv_vnot_v(ctx, v556, v188, v189);
                            let v1048 = constructor_output_vreg(ctx, v1047);
                            let v1049 = Some(v1048);
                            // Rule at src/isa/riscv64/lower.isle line 970.
                            return v1049;
                        }
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                            let v1036 = C::xreg_new(ctx, v1035);
                            let v1037 = constructor_rv_not(ctx, v1036);
                            let v1039 = C::put_in_regs(ctx, v551);
                            let v1040 = C::value_regs_get(ctx, v1039, 0x1_usize);
                            let v1041 = C::xreg_new(ctx, v1040);
                            let v1042 = constructor_rv_not(ctx, v1041);
                            let v1038 = C::xreg_to_reg(ctx, v1037);
                            let v1043 = C::xreg_to_reg(ctx, v1042);
                            let v1044 = C::value_regs(ctx, v1038, v1043);
                            let v1045 = C::output(ctx, v1044);
                            let v1046 = Some(v1045);
                            // Rule at src/isa/riscv64/lower.isle line 965.
                            return v1046;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v1029 = constructor_move_f_to_x(ctx, v1028, v762);
                            let v1030 = constructor_rv_not(ctx, v1029);
                            let v1031 = constructor_float_int_of_same_size(ctx, v762);
                            let v1032 = constructor_move_x_to_f(ctx, v1030, v1031);
                            let v1033 = constructor_output_freg(ctx, v1032);
                            let v1034 = Some(v1033);
                            // Rule at src/isa/riscv64/lower.isle line 962.
                            return v1034;
                        }
                        if let Some(v60) = v59 {
                            let v1024 = constructor_put_in_xreg(ctx, v551);
                            let v1025 = constructor_rv_not(ctx, v1024);
                            let v1026 = constructor_output_xreg(ctx, v1025);
                            let v1027 = Some(v1026);
                            // Rule at src/isa/riscv64/lower.isle line 959.
                            return v1027;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1066 = C::value_regs_get(ctx, v552, 0x1_usize);
                            let v1067 = C::xreg_new(ctx, v1066);
                            let v1068 = constructor_gen_bitrev(ctx, I64, v1067);
                            let v1039 = C::put_in_regs(ctx, v551);
                            let v1070 = C::value_regs_get(ctx, v1039, 0x0_usize);
                            let v1071 = C::xreg_new(ctx, v1070);
                            let v1072 = constructor_gen_bitrev(ctx, I64, v1071);
                            let v1069 = C::xreg_to_reg(ctx, v1068);
                            let v1073 = C::xreg_to_reg(ctx, v1072);
                            let v1074 = C::value_regs(ctx, v1069, v1073);
                            let v1075 = C::output(ctx, v1074);
                            let v1076 = Some(v1075);
                            // Rule at src/isa/riscv64/lower.isle line 982.
                            return v1076;
                        }
                        let v59 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v60) = v59 {
                            let v1024 = constructor_put_in_xreg(ctx, v551);
                            let v1063 = constructor_gen_bitrev(ctx, v60, v1024);
                            let v1064 = constructor_output_xreg(ctx, v1063);
                            let v1065 = Some(v1064);
                            // Rule at src/isa/riscv64/lower.isle line 979.
                            return v1065;
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v769 = C::has_zbb(ctx);
                        if v769 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v1024 = constructor_put_in_xreg(ctx, v551);
                                    let v1134 = constructor_rv_clzw(ctx, v1024);
                                    let v1135 = constructor_output_xreg(ctx, v1134);
                                    let v1136 = Some(v1135);
                                    // Rule at src/isa/riscv64/lower.isle line 1084.
                                    return v1136;
                                }
                                I64 => {
                                    let v1024 = constructor_put_in_xreg(ctx, v551);
                                    let v1137 = constructor_rv_clz(ctx, v1024);
                                    let v1138 = constructor_output_xreg(ctx, v1137);
                                    let v1139 = Some(v1138);
                                    // Rule at src/isa/riscv64/lower.isle line 1088.
                                    return v1139;
                                }
                                _ => {}
                            }
                            let v642 = C::fits_in_16(ctx, v3);
                            if let Some(v643) = v642 {
                                let v1125 = constructor_zext(ctx, v551);
                                let v1126 = constructor_rv_clz(ctx, v1125);
                                let v1127 = C::ty_bits(ctx, v643);
                                let v1128 = C::u8_as_i32(ctx, v1127);
                                let v1130 = C::imm12_const_add(ctx, v1128, -64_i32);
                                let v1131 = constructor_rv_addi(ctx, v1126, v1130);
                                let v1132 = constructor_output_xreg(ctx, v1131);
                                let v1133 = Some(v1132);
                                // Rule at src/isa/riscv64/lower.isle line 1077.
                                return v1133;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                            let v1036 = C::xreg_new(ctx, v1035);
                            let v1091 = C::put_in_regs(ctx, v551);
                            let v1092 = C::value_regs_get(ctx, v1091, 0x1_usize);
                            let v1093 = C::xreg_new(ctx, v1092);
                            let v1114 = constructor_gen_clz(ctx, v1093);
                            let v1115 = constructor_gen_clz(ctx, v1036);
                            let v1116 = constructor_cmp_eqz(ctx, v1093);
                            let v1117 = C::zero_reg(ctx);
                            let v1118 = constructor_gen_select_xreg(ctx, v1116, v1115, v1117);
                            let v1119 = constructor_rv_add(ctx, v1114, v1118);
                            let v1121 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1120 = C::xreg_to_reg(ctx, v1119);
                            let v1122 = C::value_regs(ctx, v1120, v1121);
                            let v1123 = C::output(ctx, v1122);
                            let v1124 = Some(v1123);
                            // Rule at src/isa/riscv64/lower.isle line 1067.
                            return v1124;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1024 = constructor_put_in_xreg(ctx, v551);
                            let v1110 = true;
                            let v1111 = constructor_gen_cltz(ctx, v1110, v1024, v735);
                            let v1112 = constructor_output_xreg(ctx, v1111);
                            let v1113 = Some(v1112);
                            // Rule at src/isa/riscv64/lower.isle line 1064.
                            return v1113;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                            let v1036 = C::xreg_new(ctx, v1035);
                            let v1091 = C::put_in_regs(ctx, v551);
                            let v1092 = C::value_regs_get(ctx, v1091, 0x1_usize);
                            let v1093 = C::xreg_new(ctx, v1092);
                            let v1152 = constructor_cmp_ltz(ctx, v1093);
                            let v1153 = constructor_rv_not(ctx, v1036);
                            let v1154 = constructor_gen_select_xreg(ctx, v1152, v1153, v1036);
                            let v1155 = constructor_cmp_ltz(ctx, v1093);
                            let v1156 = constructor_rv_not(ctx, v1093);
                            let v1157 = constructor_gen_select_xreg(ctx, v1155, v1156, v1093);
                            let v1158 = constructor_gen_clz(ctx, v1157);
                            let v1159 = constructor_gen_clz(ctx, v1154);
                            let v1160 = constructor_cmp_eqz(ctx, v1157);
                            let v1161 = C::zero_reg(ctx);
                            let v1162 = constructor_gen_select_xreg(ctx, v1160, v1159, v1161);
                            let v1163 = constructor_rv_add(ctx, v1158, v1162);
                            let v1165 = C::imm12_const(ctx, -1_i32);
                            let v1166 = constructor_rv_addi(ctx, v1163, v1165);
                            let v1168 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1167 = C::xreg_to_reg(ctx, v1166);
                            let v1169 = C::value_regs(ctx, v1167, v1168);
                            let v1170 = C::output(ctx, v1169);
                            let v1171 = Some(v1170);
                            // Rule at src/isa/riscv64/lower.isle line 1112.
                            return v1171;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1140 = constructor_sext(ctx, v551);
                            let v1141 = constructor_cmp_ltz(ctx, v1140);
                            let v1142 = constructor_rv_not(ctx, v1140);
                            let v1143 = constructor_gen_select_xreg(ctx, v1141, v1142, v1140);
                            let v1144 = constructor_gen_clz(ctx, v1143);
                            let v1145 = C::ty_bits(ctx, v735);
                            let v1146 = C::u8_as_i32(ctx, v1145);
                            let v1148 = C::imm12_const_add(ctx, v1146, -65_i32);
                            let v1149 = constructor_rv_addi(ctx, v1144, v1148);
                            let v1150 = constructor_output_xreg(ctx, v1149);
                            let v1151 = Some(v1150);
                            // Rule at src/isa/riscv64/lower.isle line 1101.
                            return v1151;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                            let v1036 = C::xreg_new(ctx, v1035);
                            let v1091 = C::put_in_regs(ctx, v551);
                            let v1092 = C::value_regs_get(ctx, v1091, 0x1_usize);
                            let v1093 = C::xreg_new(ctx, v1092);
                            let v1094 = C::xreg_to_reg(ctx, v1093);
                            let v1095 = constructor_lower_ctz(ctx, I64, v1094);
                            let v1096 = C::xreg_new(ctx, v1095);
                            let v1097 = C::xreg_to_reg(ctx, v1036);
                            let v1098 = constructor_lower_ctz(ctx, I64, v1097);
                            let v1099 = C::xreg_new(ctx, v1098);
                            let v1100 = constructor_cmp_eqz(ctx, v1036);
                            let v1101 = C::zero_reg(ctx);
                            let v1102 = constructor_gen_select_xreg(ctx, v1100, v1096, v1101);
                            let v1103 = constructor_rv_add(ctx, v1099, v1102);
                            let v1106 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1104 = C::xreg_to_reg(ctx, v1103);
                            let v1107 = C::value_regs(ctx, v1104, v1106);
                            let v1108 = C::output(ctx, v1107);
                            let v1109 = Some(v1108);
                            // Rule at src/isa/riscv64/lower.isle line 1052.
                            return v1109;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1087 = C::put_in_reg(ctx, v551);
                            let v1088 = constructor_lower_ctz(ctx, v735, v1087);
                            let v1089 = constructor_output_reg(ctx, v1088);
                            let v1090 = Some(v1089);
                            // Rule at src/isa/riscv64/lower.isle line 1049.
                            return v1090;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1066 = C::value_regs_get(ctx, v552, 0x1_usize);
                            let v1067 = C::xreg_new(ctx, v1066);
                            let v1080 = constructor_gen_bswap(ctx, I64, v1067);
                            let v1039 = C::put_in_regs(ctx, v551);
                            let v1070 = C::value_regs_get(ctx, v1039, 0x0_usize);
                            let v1071 = C::xreg_new(ctx, v1070);
                            let v1082 = constructor_gen_bswap(ctx, I64, v1071);
                            let v1081 = C::xreg_to_reg(ctx, v1080);
                            let v1083 = C::xreg_to_reg(ctx, v1082);
                            let v1084 = C::value_regs(ctx, v1081, v1083);
                            let v1085 = C::output(ctx, v1084);
                            let v1086 = Some(v1085);
                            // Rule at src/isa/riscv64/lower.isle line 1008.
                            return v1086;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v752 = C::ty_int(ctx, v735);
                            if let Some(v753) = v752 {
                                let v1024 = constructor_put_in_xreg(ctx, v551);
                                let v1077 = constructor_gen_bswap(ctx, v753, v1024);
                                let v1078 = constructor_output_xreg(ctx, v1077);
                                let v1079 = Some(v1078);
                                // Rule at src/isa/riscv64/lower.isle line 1005.
                                return v1079;
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1241 = constructor_u64_to_uimm5(ctx, 0x1_u64);
                            if let Some(v1242) = v1241 {
                                let v1244 = constructor_u64_to_uimm5(ctx, 0x2_u64);
                                if let Some(v1245) = v1244 {
                                    let v1247 = constructor_u64_to_uimm5(ctx, 0x4_u64);
                                    if let Some(v1248) = v1247 {
                                        let v1249 = C::lane_type(ctx, v12);
                                        let v1251 = C::ty_mask(ctx, v1249);
                                        let v1252 = C::u64_and(ctx, 0x5555555555555555_u64, v1251);
                                        let v1253 = constructor_imm(ctx, v1249, v1252);
                                        let v1254 = C::xreg_new(ctx, v1253);
                                        let v1255 = constructor_put_in_vreg(ctx, v551);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v1256 =
                                            constructor_rv_vsrl_vi(ctx, v1255, v1242, v188, v189);
                                        let v1257 =
                                            constructor_rv_vand_vx(ctx, v1256, v1254, v188, v189);
                                        let v1258 = constructor_put_in_vreg(ctx, v551);
                                        let v1259 =
                                            constructor_rv_vsub_vv(ctx, v1258, v1257, v188, v189);
                                        let v1261 = C::u64_and(ctx, 0x3333333333333333_u64, v1251);
                                        let v1262 = constructor_imm(ctx, v1249, v1261);
                                        let v1263 = C::xreg_new(ctx, v1262);
                                        let v1264 =
                                            constructor_rv_vsrl_vi(ctx, v1259, v1245, v188, v189);
                                        let v1265 =
                                            constructor_rv_vand_vx(ctx, v1264, v1263, v188, v189);
                                        let v1266 =
                                            constructor_rv_vand_vx(ctx, v1259, v1263, v188, v189);
                                        let v1267 =
                                            constructor_rv_vadd_vv(ctx, v1266, v1265, v188, v189);
                                        let v1269 = C::u64_and(ctx, 0xf0f0f0f0f0f0f0f_u64, v1251);
                                        let v1270 = constructor_imm(ctx, v1249, v1269);
                                        let v1271 = C::xreg_new(ctx, v1270);
                                        let v1272 =
                                            constructor_rv_vsrl_vi(ctx, v1267, v1248, v188, v189);
                                        let v1273 =
                                            constructor_rv_vadd_vv(ctx, v1267, v1272, v188, v189);
                                        let v1274 =
                                            constructor_rv_vand_vx(ctx, v1273, v1271, v188, v189);
                                        let v1276 = C::u64_and(ctx, 0x101010101010101_u64, v1251);
                                        let v1277 = constructor_imm(ctx, v1249, v1276);
                                        let v1278 = C::xreg_new(ctx, v1277);
                                        let v1279 =
                                            constructor_rv_vmul_vx(ctx, v1274, v1278, v188, v189);
                                        let v1280 = C::ty_bits(ctx, v1249);
                                        let v1281 = C::u8_as_u64(ctx, v1280);
                                        let v1283 = C::u64_sub(ctx, v1281, 0x8_u64);
                                        let v1284 = constructor_imm(ctx, I64, v1283);
                                        let v1285 = C::xreg_new(ctx, v1284);
                                        let v1286 =
                                            constructor_rv_vsrl_vx(ctx, v1279, v1285, v188, v189);
                                        let v1287 = constructor_output_vreg(ctx, v1286);
                                        let v1288 = Some(v1287);
                                        // Rule at src/isa/riscv64/lower.isle line 1203.
                                        return v1288;
                                    }
                                }
                            }
                        }
                        let v769 = C::has_zbb(ctx);
                        if v769 == true {
                            match v3 {
                                I32 => {
                                    let v1024 = constructor_put_in_xreg(ctx, v551);
                                    let v1227 = constructor_rv_cpopw(ctx, v1024);
                                    let v1228 = constructor_output_xreg(ctx, v1227);
                                    let v1229 = Some(v1228);
                                    // Rule at src/isa/riscv64/lower.isle line 1178.
                                    return v1229;
                                }
                                I128 => {
                                    let v552 = C::put_in_regs(ctx, v551);
                                    let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                                    let v1036 = C::xreg_new(ctx, v1035);
                                    let v1230 = constructor_rv_cpop(ctx, v1036);
                                    let v1231 = C::value_regs_get(ctx, v552, 0x1_usize);
                                    let v1232 = C::xreg_new(ctx, v1231);
                                    let v1233 = constructor_rv_cpop(ctx, v1232);
                                    let v1234 = constructor_rv_add(ctx, v1230, v1233);
                                    let v1236 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v1235 = C::xreg_to_reg(ctx, v1234);
                                    let v1237 = C::value_regs(ctx, v1235, v1236);
                                    let v1238 = C::output(ctx, v1237);
                                    let v1239 = Some(v1238);
                                    // Rule at src/isa/riscv64/lower.isle line 1182.
                                    return v1239;
                                }
                                _ => {}
                            }
                            let v734 = C::fits_in_64(ctx, v3);
                            if let Some(v735) = v734 {
                                let v1125 = constructor_zext(ctx, v551);
                                let v1224 = constructor_rv_cpop(ctx, v1125);
                                let v1225 = constructor_output_xreg(ctx, v1224);
                                let v1226 = Some(v1225);
                                // Rule at src/isa/riscv64/lower.isle line 1174.
                                return v1226;
                            }
                        }
                        if v3 == I128 {
                            let v552 = C::put_in_regs(ctx, v551);
                            let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                            let v1036 = C::xreg_new(ctx, v1035);
                            let v1212 = constructor_gen_popcnt(ctx, v1036);
                            let v1213 = C::xreg_new(ctx, v1212);
                            let v1214 = C::value_regs_get(ctx, v552, 0x1_usize);
                            let v1215 = C::xreg_new(ctx, v1214);
                            let v1216 = constructor_gen_popcnt(ctx, v1215);
                            let v1217 = C::xreg_new(ctx, v1216);
                            let v1218 = constructor_rv_add(ctx, v1213, v1217);
                            let v1220 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1219 = C::xreg_to_reg(ctx, v1218);
                            let v1221 = C::value_regs(ctx, v1219, v1220);
                            let v1222 = C::output(ctx, v1221);
                            let v1223 = Some(v1222);
                            // Rule at src/isa/riscv64/lower.isle line 1166.
                            return v1223;
                        }
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1125 = constructor_zext(ctx, v551);
                            let v1209 = constructor_gen_popcnt(ctx, v1125);
                            let v1210 = constructor_output_reg(ctx, v1209);
                            let v1211 = Some(v1210);
                            // Rule at src/isa/riscv64/lower.isle line 1163.
                            return v1211;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1635 = constructor_rv_vfsqrt_v(ctx, v556, v188, v189);
                            let v1636 = constructor_output_vreg(ctx, v1635);
                            let v1637 = Some(v1636);
                            // Rule at src/isa/riscv64/lower.isle line 1610.
                            return v1637;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v1632 = constructor_rv_fsqrt(ctx, v762, &FRM::RNE, v1028);
                            let v1633 = constructor_output_freg(ctx, v1632);
                            let v1634 = Some(v1633);
                            // Rule at src/isa/riscv64/lower.isle line 1607.
                            return v1634;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1600 = constructor_rv_vfneg_v(ctx, v556, v188, v189);
                            let v1601 = constructor_output_vreg(ctx, v1600);
                            let v1602 = Some(v1601);
                            // Rule at src/isa/riscv64/lower.isle line 1531.
                            return v1602;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v1597 = constructor_rv_fneg(ctx, v762, v1028);
                            let v1598 = constructor_output_freg(ctx, v1597);
                            let v1599 = Some(v1598);
                            // Rule at src/isa/riscv64/lower.isle line 1528.
                            return v1599;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v1594 = constructor_rv_vfabs_v(ctx, v556, v188, v189);
                            let v1595 = constructor_output_vreg(ctx, v1594);
                            let v1596 = Some(v1595);
                            // Rule at src/isa/riscv64/lower.isle line 1524.
                            return v1596;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v1591 = constructor_rv_fabs(ctx, v762, v1028);
                            let v1592 = constructor_output_freg(ctx, v1591);
                            let v1593 = Some(v1592);
                            // Rule at src/isa/riscv64/lower.isle line 1521.
                            return v1593;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v2429 = constructor_gen_vec_round(ctx, v556, &FRM::RUP, v12);
                            let v2430 = constructor_output_vreg(ctx, v2429);
                            let v2431 = Some(v2430);
                            // Rule at src/isa/riscv64/lower.isle line 2546.
                            return v2431;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2426 = constructor_gen_float_round(ctx, &FRM::RUP, v1028, v762);
                            let v2427 = constructor_output_freg(ctx, v2426);
                            let v2428 = Some(v2427);
                            // Rule at src/isa/riscv64/lower.isle line 2543.
                            return v2428;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v2436 = constructor_gen_vec_round(ctx, v556, &FRM::RDN, v12);
                            let v2437 = constructor_output_vreg(ctx, v2436);
                            let v2438 = Some(v2437);
                            // Rule at src/isa/riscv64/lower.isle line 2553.
                            return v2438;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2433 = constructor_gen_float_round(ctx, &FRM::RDN, v1028, v762);
                            let v2434 = constructor_output_freg(ctx, v2433);
                            let v2435 = Some(v2434);
                            // Rule at src/isa/riscv64/lower.isle line 2550.
                            return v2435;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v2443 = constructor_gen_vec_round(ctx, v556, &FRM::RTZ, v12);
                            let v2444 = constructor_output_vreg(ctx, v2443);
                            let v2445 = Some(v2444);
                            // Rule at src/isa/riscv64/lower.isle line 2560.
                            return v2445;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2440 = constructor_gen_float_round(ctx, &FRM::RTZ, v1028, v762);
                            let v2441 = constructor_output_freg(ctx, v2440);
                            let v2442 = Some(v2441);
                            // Rule at src/isa/riscv64/lower.isle line 2557.
                            return v2442;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v2449 = constructor_gen_vec_round(ctx, v556, &FRM::RNE, v12);
                            let v2450 = constructor_output_vreg(ctx, v2449);
                            let v2451 = Some(v2450);
                            // Rule at src/isa/riscv64/lower.isle line 2567.
                            return v2451;
                        }
                        let v761 = C::ty_supported_float(ctx, v3);
                        if let Some(v762) = v761 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2446 = constructor_gen_float_round(ctx, &FRM::RNE, v1028, v762);
                            let v2447 = constructor_output_freg(ctx, v2446);
                            let v2448 = Some(v2447);
                            // Rule at src/isa/riscv64/lower.isle line 2564.
                            return v2448;
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2800 = C::i64_from_iconst(ctx, v551);
                            if let Some(v2801) = v2800 {
                                let v2802 = C::imm5_from_i64(ctx, v2801);
                                if let Some(v2803) = v2802 {
                                    let v2787 = C::zero_reg(ctx);
                                    let v189 = C::vstate_from_type(ctx, v12);
                                    let v2788 = constructor_rv_vmv_vx(ctx, v2787, v189);
                                    let v2795 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                    let v2804 =
                                        constructor_rv_vmerge_vim(ctx, v2788, v2803, v2795, v189);
                                    let v2805 = constructor_output_vreg(ctx, v2804);
                                    let v2806 = Some(v2805);
                                    // Rule at src/isa/riscv64/lower.isle line 2948.
                                    return v2806;
                                }
                            }
                            let v810 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v811) = v810 {
                                let v2787 = C::zero_reg(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2788 = constructor_rv_vmv_vx(ctx, v2787, v189);
                                let v2795 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                let v2796 = constructor_put_in_xreg(ctx, v551);
                                let v2797 =
                                    constructor_rv_vmerge_vxm(ctx, v2788, v2796, v2795, v189);
                                let v2798 = constructor_output_vreg(ctx, v2797);
                                let v2799 = Some(v2798);
                                // Rule at src/isa/riscv64/lower.isle line 2942.
                                return v2799;
                            }
                            let v2785 = C::ty_vector_float(ctx, v12);
                            if let Some(v2786) = v2785 {
                                let v2787 = C::zero_reg(ctx);
                                let v189 = C::vstate_from_type(ctx, v12);
                                let v2788 = constructor_rv_vmv_vx(ctx, v2787, v189);
                                let v2789 = constructor_put_in_freg(ctx, v551);
                                let v2790 = constructor_rv_vfmv_sf(ctx, v2789, v189);
                                let v2791 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                let v2792 =
                                    constructor_rv_vmerge_vvm(ctx, v2788, v2790, v2791, v189);
                                let v2793 = constructor_output_vreg(ctx, v2792);
                                let v2794 = Some(v2793);
                                // Rule at src/isa/riscv64/lower.isle line 2935.
                                return v2794;
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2490 = constructor_lower_bmask(ctx, v551, v3);
                        let v2491 = C::output(ctx, v2490);
                        let v2492 = Some(v2491);
                        // Rule at src/isa/riscv64/lower.isle line 2599.
                        return v2492;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v552 = C::put_in_regs(ctx, v551);
                        let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                        let v1729 = constructor_output_reg(ctx, v1035);
                        let v1730 = Some(v1729);
                        // Rule at src/isa/riscv64/lower.isle line 1705.
                        return v1730;
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Unary {
                                    opcode: ref v2701,
                                    arg: v2702,
                                } = v1052
                                {
                                    if let &Opcode::SwidenLow = v2701 {
                                        let v2715 = C::def_inst(ctx, v2702);
                                        if let Some(v2716) = v2715 {
                                            let v2717 = &C::inst_data(ctx, v2716);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2718,
                                                arg: v2719,
                                            } = v2717
                                            {
                                                if let &Opcode::SwidenLow = v2718 {
                                                    let v2725 = constructor_put_in_vreg(ctx, v2719);
                                                    let v188 = &constructor_unmasked(ctx);
                                                    let v189 = C::vstate_from_type(ctx, v12);
                                                    let v2746 = constructor_rv_vsext_vf8(
                                                        ctx, v2725, v188, v189,
                                                    );
                                                    let v2747 = constructor_output_vreg(ctx, v2746);
                                                    let v2748 = Some(v2747);
                                                    // Rule at src/isa/riscv64/lower.isle line 2866.
                                                    return v2748;
                                                }
                                            }
                                        }
                                        let v2709 = constructor_put_in_vreg(ctx, v2702);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2743 =
                                            constructor_rv_vsext_vf4(ctx, v2709, v188, v189);
                                        let v2744 = constructor_output_vreg(ctx, v2743);
                                        let v2745 = Some(v2744);
                                        // Rule at src/isa/riscv64/lower.isle line 2863.
                                        return v2745;
                                    }
                                }
                            }
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2740 = constructor_rv_vsext_vf2(ctx, v556, v188, v189);
                            let v2741 = constructor_output_vreg(ctx, v2740);
                            let v2742 = Some(v2741);
                            // Rule at src/isa/riscv64/lower.isle line 2860.
                            return v2742;
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Unary {
                                    opcode: ref v2701,
                                    arg: v2702,
                                } = v1052
                                {
                                    if let &Opcode::SwidenHigh = v2701 {
                                        let v2715 = C::def_inst(ctx, v2702);
                                        if let Some(v2716) = v2715 {
                                            let v2717 = &C::inst_data(ctx, v2716);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2718,
                                                arg: v2719,
                                            } = v2717
                                            {
                                                if let &Opcode::SwidenHigh = v2718 {
                                                    let v2720 = C::value_type(ctx, v2719);
                                                    let v2721 = C::ty_lane_count(ctx, v2720);
                                                    let v2705 = C::ty_lane_count(ctx, v12);
                                                    let v2722 = C::u64_sub(ctx, v2721, v2705);
                                                    let v2723 = C::uimm5_from_u64(ctx, v2722);
                                                    if let Some(v2724) = v2723 {
                                                        let v2725 =
                                                            constructor_put_in_vreg(ctx, v2719);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v2726 = C::vstate_from_type(ctx, v2720);
                                                        let v2727 = constructor_rv_vslidedown_vi(
                                                            ctx, v2725, v2724, v188, v2726,
                                                        );
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v2728 = constructor_rv_vsext_vf8(
                                                            ctx, v2727, v188, v189,
                                                        );
                                                        let v2729 =
                                                            constructor_output_vreg(ctx, v2728);
                                                        let v2730 = Some(v2729);
                                                        // Rule at src/isa/riscv64/lower.isle line 2840.
                                                        return v2730;
                                                    }
                                                }
                                            }
                                        }
                                        let v2703 = C::value_type(ctx, v2702);
                                        let v2704 = C::ty_lane_count(ctx, v2703);
                                        let v2705 = C::ty_lane_count(ctx, v12);
                                        let v2706 = C::u64_sub(ctx, v2704, v2705);
                                        let v2707 = C::uimm5_from_u64(ctx, v2706);
                                        if let Some(v2708) = v2707 {
                                            let v2709 = constructor_put_in_vreg(ctx, v2702);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v2710 = C::vstate_from_type(ctx, v2703);
                                            let v2711 = constructor_rv_vslidedown_vi(
                                                ctx, v2709, v2708, v188, v2710,
                                            );
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v2712 =
                                                constructor_rv_vsext_vf4(ctx, v2711, v188, v189);
                                            let v2713 = constructor_output_vreg(ctx, v2712);
                                            let v2714 = Some(v2713);
                                            // Rule at src/isa/riscv64/lower.isle line 2836.
                                            return v2714;
                                        }
                                    }
                                }
                            }
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v1194 = C::value_type(ctx, v551);
                            let v2697 = constructor_gen_slidedown_half(ctx, v1194, v556);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2698 = constructor_rv_vsext_vf2(ctx, v2697, v188, v189);
                            let v2699 = constructor_output_vreg(ctx, v2698);
                            let v2700 = Some(v2699);
                            // Rule at src/isa/riscv64/lower.isle line 2833.
                            return v2700;
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Unary {
                                    opcode: ref v2701,
                                    arg: v2702,
                                } = v1052
                                {
                                    if let &Opcode::UwidenLow = v2701 {
                                        let v2715 = C::def_inst(ctx, v2702);
                                        if let Some(v2716) = v2715 {
                                            let v2717 = &C::inst_data(ctx, v2716);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2718,
                                                arg: v2719,
                                            } = v2717
                                            {
                                                if let &Opcode::UwidenLow = v2718 {
                                                    let v2725 = constructor_put_in_vreg(ctx, v2719);
                                                    let v188 = &constructor_unmasked(ctx);
                                                    let v189 = C::vstate_from_type(ctx, v12);
                                                    let v2755 = constructor_rv_vzext_vf8(
                                                        ctx, v2725, v188, v189,
                                                    );
                                                    let v2756 = constructor_output_vreg(ctx, v2755);
                                                    let v2757 = Some(v2756);
                                                    // Rule at src/isa/riscv64/lower.isle line 2877.
                                                    return v2757;
                                                }
                                            }
                                        }
                                        let v2709 = constructor_put_in_vreg(ctx, v2702);
                                        let v188 = &constructor_unmasked(ctx);
                                        let v189 = C::vstate_from_type(ctx, v12);
                                        let v2752 =
                                            constructor_rv_vzext_vf4(ctx, v2709, v188, v189);
                                        let v2753 = constructor_output_vreg(ctx, v2752);
                                        let v2754 = Some(v2753);
                                        // Rule at src/isa/riscv64/lower.isle line 2874.
                                        return v2754;
                                    }
                                }
                            }
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2749 = constructor_rv_vzext_vf2(ctx, v556, v188, v189);
                            let v2750 = constructor_output_vreg(ctx, v2749);
                            let v2751 = Some(v2750);
                            // Rule at src/isa/riscv64/lower.isle line 2871.
                            return v2751;
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Unary {
                                    opcode: ref v2701,
                                    arg: v2702,
                                } = v1052
                                {
                                    if let &Opcode::UwidenHigh = v2701 {
                                        let v2715 = C::def_inst(ctx, v2702);
                                        if let Some(v2716) = v2715 {
                                            let v2717 = &C::inst_data(ctx, v2716);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2718,
                                                arg: v2719,
                                            } = v2717
                                            {
                                                if let &Opcode::UwidenHigh = v2718 {
                                                    let v2720 = C::value_type(ctx, v2719);
                                                    let v2721 = C::ty_lane_count(ctx, v2720);
                                                    let v2705 = C::ty_lane_count(ctx, v12);
                                                    let v2722 = C::u64_sub(ctx, v2721, v2705);
                                                    let v2723 = C::uimm5_from_u64(ctx, v2722);
                                                    if let Some(v2724) = v2723 {
                                                        let v2725 =
                                                            constructor_put_in_vreg(ctx, v2719);
                                                        let v188 = &constructor_unmasked(ctx);
                                                        let v2726 = C::vstate_from_type(ctx, v2720);
                                                        let v2727 = constructor_rv_vslidedown_vi(
                                                            ctx, v2725, v2724, v188, v2726,
                                                        );
                                                        let v189 = C::vstate_from_type(ctx, v12);
                                                        let v2737 = constructor_rv_vzext_vf8(
                                                            ctx, v2727, v188, v189,
                                                        );
                                                        let v2738 =
                                                            constructor_output_vreg(ctx, v2737);
                                                        let v2739 = Some(v2738);
                                                        // Rule at src/isa/riscv64/lower.isle line 2854.
                                                        return v2739;
                                                    }
                                                }
                                            }
                                        }
                                        let v2703 = C::value_type(ctx, v2702);
                                        let v2704 = C::ty_lane_count(ctx, v2703);
                                        let v2705 = C::ty_lane_count(ctx, v12);
                                        let v2706 = C::u64_sub(ctx, v2704, v2705);
                                        let v2707 = C::uimm5_from_u64(ctx, v2706);
                                        if let Some(v2708) = v2707 {
                                            let v2709 = constructor_put_in_vreg(ctx, v2702);
                                            let v188 = &constructor_unmasked(ctx);
                                            let v2710 = C::vstate_from_type(ctx, v2703);
                                            let v2711 = constructor_rv_vslidedown_vi(
                                                ctx, v2709, v2708, v188, v2710,
                                            );
                                            let v189 = C::vstate_from_type(ctx, v12);
                                            let v2734 =
                                                constructor_rv_vzext_vf4(ctx, v2711, v188, v189);
                                            let v2735 = constructor_output_vreg(ctx, v2734);
                                            let v2736 = Some(v2735);
                                            // Rule at src/isa/riscv64/lower.isle line 2850.
                                            return v2736;
                                        }
                                    }
                                }
                            }
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v1194 = C::value_type(ctx, v551);
                            let v2697 = constructor_gen_slidedown_half(ctx, v1194, v556);
                            let v188 = &constructor_unmasked(ctx);
                            let v189 = C::vstate_from_type(ctx, v12);
                            let v2731 = constructor_rv_vzext_vf2(ctx, v2697, v188, v189);
                            let v2732 = constructor_output_vreg(ctx, v2731);
                            let v2733 = Some(v2732);
                            // Rule at src/isa/riscv64/lower.isle line 2847.
                            return v2733;
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Load {
                                    opcode: ref v1179,
                                    arg: v1180,
                                    flags: v1181,
                                    offset: v1182,
                                } = v1052
                                {
                                    if let &Opcode::Load = v1179 {
                                        let v1183 = C::sinkable_inst(ctx, v551);
                                        if let Some(v1184) = v1183 {
                                            let v1185 = C::first_result(ctx, v1184);
                                            if let Some(v1186) = v1185 {
                                                let v1188 = C::offset32_to_i32(ctx, v1182);
                                                let v1189 = constructor_amode(ctx, v1180, v1188);
                                                let v1187 = C::value_type(ctx, v1186);
                                                let v1190 =
                                                    &constructor_uextend_load_op(ctx, v1187);
                                                let v1191 = constructor_gen_sunk_load(
                                                    ctx, v1184, v1189, v1190, v1181,
                                                );
                                                let v1192 = constructor_output_reg(ctx, v1191);
                                                let v1193 = Some(v1192);
                                                // Rule at src/isa/riscv64/lower.isle line 1136.
                                                return v1193;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1125 = constructor_zext(ctx, v551);
                            let v1175 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1174 = C::xreg_to_reg(ctx, v1125);
                            let v1176 = C::value_regs(ctx, v1174, v1175);
                            let v1177 = C::output(ctx, v1176);
                            let v1178 = Some(v1177);
                            // Rule at src/isa/riscv64/lower.isle line 1132.
                            return v1178;
                        }
                        if let Some(v735) = v734 {
                            let v1125 = constructor_zext(ctx, v551);
                            let v1172 = constructor_output_xreg(ctx, v1125);
                            let v1173 = Some(v1172);
                            // Rule at src/isa/riscv64/lower.isle line 1129.
                            return v1173;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::fits_in_64(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1050 = C::def_inst(ctx, v551);
                            if let Some(v1051) = v1050 {
                                let v1052 = &C::inst_data(ctx, v1051);
                                if let &InstructionData::Load {
                                    opcode: ref v1179,
                                    arg: v1180,
                                    flags: v1181,
                                    offset: v1182,
                                } = v1052
                                {
                                    if let &Opcode::Load = v1179 {
                                        let v1183 = C::sinkable_inst(ctx, v551);
                                        if let Some(v1184) = v1183 {
                                            let v1185 = C::first_result(ctx, v1184);
                                            if let Some(v1186) = v1185 {
                                                let v1188 = C::offset32_to_i32(ctx, v1182);
                                                let v1189 = constructor_amode(ctx, v1180, v1188);
                                                let v1187 = C::value_type(ctx, v1186);
                                                let v1205 =
                                                    &constructor_sextend_load_op(ctx, v1187);
                                                let v1206 = constructor_gen_sunk_load(
                                                    ctx, v1184, v1189, v1205, v1181,
                                                );
                                                let v1207 = constructor_output_reg(ctx, v1206);
                                                let v1208 = Some(v1207);
                                                // Rule at src/isa/riscv64/lower.isle line 1153.
                                                return v1208;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1140 = constructor_sext(ctx, v551);
                            let v1199 = C::imm12_const(ctx, 63_i32);
                            let v1200 = constructor_rv_srai(ctx, v1140, v1199);
                            let v1197 = C::xreg_to_reg(ctx, v1140);
                            let v1201 = C::xreg_to_reg(ctx, v1200);
                            let v1202 = C::value_regs(ctx, v1197, v1201);
                            let v1203 = C::output(ctx, v1202);
                            let v1204 = Some(v1203);
                            // Rule at src/isa/riscv64/lower.isle line 1148.
                            return v1204;
                        }
                        if let Some(v735) = v734 {
                            let v1140 = constructor_sext(ctx, v551);
                            let v1195 = constructor_output_xreg(ctx, v1140);
                            let v1196 = Some(v1195);
                            // Rule at src/isa/riscv64/lower.isle line 1145.
                            return v1196;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1028 = constructor_put_in_freg(ctx, v551);
                    let v1731 = constructor_rv_fcvtds(ctx, v1028);
                    let v1732 = constructor_output_freg(ctx, v1731);
                    let v1733 = Some(v1732);
                    // Rule at src/isa/riscv64/lower.isle line 1709.
                    return v1733;
                }
                &Opcode::Fdemote => {
                    let v1028 = constructor_put_in_freg(ctx, v551);
                    let v1737 = constructor_rv_fcvtsd(ctx, &FRM::RNE, v1028);
                    let v1738 = constructor_output_freg(ctx, v1737);
                    let v1739 = Some(v1738);
                    // Rule at src/isa/riscv64/lower.isle line 1719.
                    return v1739;
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == F32X4 {
                                let v1741 = C::i8_to_imm5(ctx, 0_i8);
                                if let Some(v1742) = v1741 {
                                    let v556 = constructor_put_in_vreg(ctx, v551);
                                    let v188 = &constructor_unmasked(ctx);
                                    let v189 = C::vstate_from_type(ctx, v12);
                                    let v1743 = C::vstate_mf2(ctx, v189);
                                    let v1744 = constructor_rv_vfncvt_f_f_w(ctx, v556, v188, v1743);
                                    let v1746 = constructor_gen_vec_mask(ctx, 0xc_u64);
                                    let v1747 =
                                        constructor_rv_vmerge_vim(ctx, v1744, v1742, v1746, v189);
                                    let v1748 = constructor_output_vreg(ctx, v1747);
                                    let v1749 = Some(v1748);
                                    // Rule at src/isa/riscv64/lower.isle line 1726.
                                    return v1749;
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v203 = C::ty_half_width(ctx, v12);
                            if let Some(v204) = v203 {
                                let v556 = constructor_put_in_vreg(ctx, v551);
                                let v188 = &constructor_unmasked(ctx);
                                let v208 = C::vstate_from_type(ctx, v204);
                                let v209 = C::vstate_mf2(ctx, v208);
                                let v1734 = constructor_rv_vfwcvt_f_f_v(ctx, v556, v188, v209);
                                let v1735 = constructor_output_vreg(ctx, v1734);
                                let v1736 = Some(v1735);
                                // Rule at src/isa/riscv64/lower.isle line 1714.
                                return v1736;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1028 = constructor_put_in_freg(ctx, v551);
                        let v2282 = constructor_put_in_freg(ctx, v551);
                        let v1194 = C::value_type(ctx, v551);
                        let v2283 = constructor_rv_feq(ctx, v1194, v1028, v2282);
                        let v2285 =
                            constructor_gen_trapz(ctx, v2283, &TrapCode::BAD_CONVERSION_TO_INTEGER);
                        let v2286 = false;
                        let v2287 = C::fcvt_umin_bound(ctx, v1194, v2286);
                        let v2288 = constructor_imm(ctx, v1194, v2287);
                        let v2289 = C::freg_new(ctx, v2288);
                        let v2290 = constructor_put_in_freg(ctx, v551);
                        let v2291 = constructor_rv_fle(ctx, v1194, v2290, v2289);
                        let v2293 = constructor_gen_trapnz(ctx, v2291, &TrapCode::INTEGER_OVERFLOW);
                        let v3 = C::value_type(ctx, v2);
                        let v2294 = C::fcvt_umax_bound(ctx, v1194, v3, v2286);
                        let v2295 = constructor_imm(ctx, v1194, v2294);
                        let v2296 = C::freg_new(ctx, v2295);
                        let v2297 = constructor_put_in_freg(ctx, v551);
                        let v2298 = constructor_rv_fge(ctx, v1194, v2297, v2296);
                        let v2299 = constructor_gen_trapnz(ctx, v2298, &TrapCode::INTEGER_OVERFLOW);
                        let v2300 = constructor_put_in_freg(ctx, v551);
                        let v2301 = constructor_lower_inbounds_fcvt_to_uint(ctx, v3, v1194, v2300);
                        let v2302 = constructor_output_xreg(ctx, v2301);
                        let v2303 = Some(v2302);
                        // Rule at src/isa/riscv64/lower.isle line 2361.
                        return v2303;
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1028 = constructor_put_in_freg(ctx, v551);
                        let v2282 = constructor_put_in_freg(ctx, v551);
                        let v1194 = C::value_type(ctx, v551);
                        let v2283 = constructor_rv_feq(ctx, v1194, v1028, v2282);
                        let v2285 =
                            constructor_gen_trapz(ctx, v2283, &TrapCode::BAD_CONVERSION_TO_INTEGER);
                        let v3 = C::value_type(ctx, v2);
                        let v2286 = false;
                        let v2304 = C::fcvt_smin_bound(ctx, v1194, v3, v2286);
                        let v2305 = constructor_imm(ctx, v1194, v2304);
                        let v2306 = C::freg_new(ctx, v2305);
                        let v2290 = constructor_put_in_freg(ctx, v551);
                        let v2307 = constructor_rv_fle(ctx, v1194, v2290, v2306);
                        let v2308 = constructor_gen_trapnz(ctx, v2307, &TrapCode::INTEGER_OVERFLOW);
                        let v2309 = C::fcvt_smax_bound(ctx, v1194, v3, v2286);
                        let v2310 = constructor_imm(ctx, v1194, v2309);
                        let v2311 = C::freg_new(ctx, v2310);
                        let v2297 = constructor_put_in_freg(ctx, v551);
                        let v2312 = constructor_rv_fge(ctx, v1194, v2297, v2311);
                        let v2313 = constructor_gen_trapnz(ctx, v2312, &TrapCode::INTEGER_OVERFLOW);
                        let v2300 = constructor_put_in_freg(ctx, v551);
                        let v2314 = constructor_lower_inbounds_fcvt_to_sint(ctx, v3, v1194, v2300);
                        let v2315 = constructor_output_xreg(ctx, v2314);
                        let v2316 = Some(v2315);
                        // Rule at src/isa/riscv64/lower.isle line 2378.
                        return v2316;
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1741 = C::i8_to_imm5(ctx, 0_i8);
                            if let Some(v1742) = v1741 {
                                let v556 = constructor_put_in_vreg(ctx, v551);
                                let v2323 = constructor_put_in_vreg(ctx, v551);
                                let v188 = &constructor_unmasked(ctx);
                                let v1194 = C::value_type(ctx, v551);
                                let v2324 = C::vstate_from_type(ctx, v1194);
                                let v2325 = constructor_rv_vmfne_vv(ctx, v556, v2323, v188, v2324);
                                let v2326 = constructor_put_in_vreg(ctx, v551);
                                let v2335 =
                                    constructor_rv_vfcvt_rtz_xu_f_v(ctx, v2326, v188, v2324);
                                let v2336 =
                                    constructor_rv_vmerge_vim(ctx, v2335, v1742, v2325, v2324);
                                let v2337 = constructor_output_vreg(ctx, v2336);
                                let v2338 = Some(v2337);
                                // Rule at src/isa/riscv64/lower.isle line 2456.
                                return v2338;
                            }
                        }
                        let v1194 = C::value_type(ctx, v551);
                        let v2317 = C::ty_supported_float(ctx, v1194);
                        if let Some(v2318) = v2317 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2282 = constructor_put_in_freg(ctx, v551);
                            let v2331 = constructor_lower_fcvt_to_uint_sat(ctx, v2318, v3, v2282);
                            let v2332 =
                                constructor_handle_fcvt_to_int_nan(ctx, v2318, v1028, v2331);
                            let v2333 = constructor_output_xreg(ctx, v2332);
                            let v2334 = Some(v2333);
                            // Rule at src/isa/riscv64/lower.isle line 2437.
                            return v2334;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1741 = C::i8_to_imm5(ctx, 0_i8);
                            if let Some(v1742) = v1741 {
                                let v556 = constructor_put_in_vreg(ctx, v551);
                                let v2323 = constructor_put_in_vreg(ctx, v551);
                                let v188 = &constructor_unmasked(ctx);
                                let v1194 = C::value_type(ctx, v551);
                                let v2324 = C::vstate_from_type(ctx, v1194);
                                let v2325 = constructor_rv_vmfne_vv(ctx, v556, v2323, v188, v2324);
                                let v2326 = constructor_put_in_vreg(ctx, v551);
                                let v2327 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v2326, v188, v2324);
                                let v2328 =
                                    constructor_rv_vmerge_vim(ctx, v2327, v1742, v2325, v2324);
                                let v2329 = constructor_output_vreg(ctx, v2328);
                                let v2330 = Some(v2329);
                                // Rule at src/isa/riscv64/lower.isle line 2429.
                                return v2330;
                            }
                        }
                        let v1194 = C::value_type(ctx, v551);
                        let v2317 = C::ty_supported_float(ctx, v1194);
                        if let Some(v2318) = v2317 {
                            let v1028 = constructor_put_in_freg(ctx, v551);
                            let v2282 = constructor_put_in_freg(ctx, v551);
                            let v2319 = constructor_lower_fcvt_to_sint_sat(ctx, v2318, v3, v2282);
                            let v2320 =
                                constructor_handle_fcvt_to_int_nan(ctx, v2318, v1028, v2319);
                            let v2321 = constructor_output_xreg(ctx, v2320);
                            let v2322 = Some(v2321);
                            // Rule at src/isa/riscv64/lower.isle line 2394.
                            return v2322;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v1194 = C::value_type(ctx, v551);
                            let v2324 = C::vstate_from_type(ctx, v1194);
                            let v2380 = constructor_rv_vfcvt_f_xu_v(ctx, v556, v188, v2324);
                            let v2381 = constructor_output_vreg(ctx, v2380);
                            let v2382 = Some(v2381);
                            // Rule at src/isa/riscv64/lower.isle line 2503.
                            return v2382;
                        }
                        match v3 {
                            F32 => {
                                let v1194 = C::value_type(ctx, v551);
                                match v1194 {
                                    I32 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2365 = constructor_rv_fcvtswu(ctx, &FRM::RNE, v1024);
                                        let v2366 = constructor_output_freg(ctx, v2365);
                                        let v2367 = Some(v2366);
                                        // Rule at src/isa/riscv64/lower.isle line 2488.
                                        return v2367;
                                    }
                                    I64 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2368 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1024);
                                        let v2369 = constructor_output_freg(ctx, v2368);
                                        let v2370 = Some(v2369);
                                        // Rule at src/isa/riscv64/lower.isle line 2491.
                                        return v2370;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::fits_in_16(ctx, v1194);
                                if let Some(v2340) = v2339 {
                                    let v1125 = constructor_zext(ctx, v551);
                                    let v2362 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1125);
                                    let v2363 = constructor_output_freg(ctx, v2362);
                                    let v2364 = Some(v2363);
                                    // Rule at src/isa/riscv64/lower.isle line 2485.
                                    return v2364;
                                }
                            }
                            F64 => {
                                let v1194 = C::value_type(ctx, v551);
                                match v1194 {
                                    I32 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2374 = constructor_rv_fcvtdwu(ctx, v1024);
                                        let v2375 = constructor_output_freg(ctx, v2374);
                                        let v2376 = Some(v2375);
                                        // Rule at src/isa/riscv64/lower.isle line 2497.
                                        return v2376;
                                    }
                                    I64 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2377 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1024);
                                        let v2378 = constructor_output_freg(ctx, v2377);
                                        let v2379 = Some(v2378);
                                        // Rule at src/isa/riscv64/lower.isle line 2500.
                                        return v2379;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::fits_in_16(ctx, v1194);
                                if let Some(v2340) = v2339 {
                                    let v1125 = constructor_zext(ctx, v551);
                                    let v2371 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1125);
                                    let v2372 = constructor_output_freg(ctx, v2371);
                                    let v2373 = Some(v2372);
                                    // Rule at src/isa/riscv64/lower.isle line 2494.
                                    return v2373;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v556 = constructor_put_in_vreg(ctx, v551);
                            let v188 = &constructor_unmasked(ctx);
                            let v1194 = C::value_type(ctx, v551);
                            let v2324 = C::vstate_from_type(ctx, v1194);
                            let v2359 = constructor_rv_vfcvt_f_x_v(ctx, v556, v188, v2324);
                            let v2360 = constructor_output_vreg(ctx, v2359);
                            let v2361 = Some(v2360);
                            // Rule at src/isa/riscv64/lower.isle line 2481.
                            return v2361;
                        }
                        match v3 {
                            F32 => {
                                let v1194 = C::value_type(ctx, v551);
                                match v1194 {
                                    I32 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2344 = constructor_rv_fcvtsw(ctx, &FRM::RNE, v1024);
                                        let v2345 = constructor_output_freg(ctx, v2344);
                                        let v2346 = Some(v2345);
                                        // Rule at src/isa/riscv64/lower.isle line 2466.
                                        return v2346;
                                    }
                                    I64 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2347 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1024);
                                        let v2348 = constructor_output_freg(ctx, v2347);
                                        let v2349 = Some(v2348);
                                        // Rule at src/isa/riscv64/lower.isle line 2469.
                                        return v2349;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::fits_in_16(ctx, v1194);
                                if let Some(v2340) = v2339 {
                                    let v1140 = constructor_sext(ctx, v551);
                                    let v2341 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1140);
                                    let v2342 = constructor_output_freg(ctx, v2341);
                                    let v2343 = Some(v2342);
                                    // Rule at src/isa/riscv64/lower.isle line 2463.
                                    return v2343;
                                }
                            }
                            F64 => {
                                let v1194 = C::value_type(ctx, v551);
                                match v1194 {
                                    I32 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2353 = constructor_rv_fcvtdw(ctx, v1024);
                                        let v2354 = constructor_output_freg(ctx, v2353);
                                        let v2355 = Some(v2354);
                                        // Rule at src/isa/riscv64/lower.isle line 2475.
                                        return v2355;
                                    }
                                    I64 => {
                                        let v1024 = constructor_put_in_xreg(ctx, v551);
                                        let v2356 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1024);
                                        let v2357 = constructor_output_freg(ctx, v2356);
                                        let v2358 = Some(v2357);
                                        // Rule at src/isa/riscv64/lower.isle line 2478.
                                        return v2358;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::fits_in_16(ctx, v1194);
                                if let Some(v2340) = v2339 {
                                    let v1140 = constructor_sext(ctx, v551);
                                    let v2350 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1140);
                                    let v2351 = constructor_output_freg(ctx, v2350);
                                    let v2352 = Some(v2351);
                                    // Rule at src/isa/riscv64/lower.isle line 2472.
                                    return v2352;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1050 = C::def_inst(ctx, v551);
                        if let Some(v1051) = v1050 {
                            let v1052 = &C::inst_data(ctx, v1051);
                            if let &InstructionData::Binary {
                                opcode: ref v1053,
                                args: ref v1054,
                            } = v1052
                            {
                                if let &Opcode::Imul = v1053 {
                                    let v1970 = C::first_result(ctx, v1051);
                                    if let Some(v1971) = v1970 {
                                        let v1972 = C::value_type(ctx, v1971);
                                        if v1972 == I128 {
                                            let v1055 = C::unpack_value_array_2(ctx, v1054);
                                            let v1973 = C::def_inst(ctx, v1055.0);
                                            if let Some(v1974) = v1973 {
                                                let v1975 = &C::inst_data(ctx, v1974);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1976,
                                                    arg: v1977,
                                                } = v1975
                                                {
                                                    match v1976 {
                                                        &Opcode::Uextend => {
                                                            let v1978 = C::def_inst(ctx, v1055.1);
                                                            if let Some(v1979) = v1978 {
                                                                let v1980 =
                                                                    &C::inst_data(ctx, v1979);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v1981,
                                                                    arg: v1982,
                                                                } = v1980
                                                                {
                                                                    if let &Opcode::Uextend = v1981
                                                                    {
                                                                        let v1983 =
                                                                            C::value_is_unused(
                                                                                ctx, v2,
                                                                            );
                                                                        if v1983 == true {
                                                                            let v1984 =
                                                                                C::invalid_reg(ctx);
                                                                            let v1985 =
                                                                                C::value_reg(
                                                                                    ctx, v1984,
                                                                                );
                                                                            let v1986 =
                                                                                constructor_zext(
                                                                                    ctx, v1977,
                                                                                );
                                                                            let v1987 =
                                                                                constructor_zext(
                                                                                    ctx, v1982,
                                                                                );
                                                                            let v1988 = constructor_rv_mulhu(ctx, v1986, v1987);
                                                                            let v1989 =
                                                                                C::xreg_to_reg(
                                                                                    ctx, v1988,
                                                                                );
                                                                            let v1990 =
                                                                                C::value_reg(
                                                                                    ctx, v1989,
                                                                                );
                                                                            let v1991 =
                                                                                C::output_pair(
                                                                                    ctx, v1985,
                                                                                    v1990,
                                                                                );
                                                                            let v1992 = Some(v1991);
                                                                            // Rule at src/isa/riscv64/lower.isle line 1954.
                                                                            return v1992;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v1978 = C::def_inst(ctx, v1055.1);
                                                            if let Some(v1979) = v1978 {
                                                                let v1980 =
                                                                    &C::inst_data(ctx, v1979);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v1981,
                                                                    arg: v1982,
                                                                } = v1980
                                                                {
                                                                    if let &Opcode::Sextend = v1981
                                                                    {
                                                                        let v1983 =
                                                                            C::value_is_unused(
                                                                                ctx, v2,
                                                                            );
                                                                        if v1983 == true {
                                                                            let v1984 =
                                                                                C::invalid_reg(ctx);
                                                                            let v1985 =
                                                                                C::value_reg(
                                                                                    ctx, v1984,
                                                                                );
                                                                            let v1993 =
                                                                                constructor_sext(
                                                                                    ctx, v1977,
                                                                                );
                                                                            let v1994 =
                                                                                constructor_sext(
                                                                                    ctx, v1982,
                                                                                );
                                                                            let v1995 =
                                                                                constructor_rv_mulh(
                                                                                    ctx, v1993,
                                                                                    v1994,
                                                                                );
                                                                            let v1996 =
                                                                                C::xreg_to_reg(
                                                                                    ctx, v1995,
                                                                                );
                                                                            let v1997 =
                                                                                C::value_reg(
                                                                                    ctx, v1996,
                                                                                );
                                                                            let v1998 =
                                                                                C::output_pair(
                                                                                    ctx, v1985,
                                                                                    v1997,
                                                                                );
                                                                            let v1999 = Some(v1998);
                                                                            // Rule at src/isa/riscv64/lower.isle line 1959.
                                                                            return v1999;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v552 = C::put_in_regs(ctx, v551);
                    let v1035 = C::value_regs_get(ctx, v552, 0x0_usize);
                    let v1036 = C::xreg_new(ctx, v1035);
                    let v1091 = C::put_in_regs(ctx, v551);
                    let v1092 = C::value_regs_get(ctx, v1091, 0x1_usize);
                    let v1093 = C::xreg_new(ctx, v1092);
                    let v1097 = C::xreg_to_reg(ctx, v1036);
                    let v1961 = C::value_reg(ctx, v1097);
                    let v1094 = C::xreg_to_reg(ctx, v1093);
                    let v1962 = C::value_reg(ctx, v1094);
                    let v1963 = C::output_pair(ctx, v1961, v1962);
                    let v1964 = Some(v1963);
                    // Rule at src/isa/riscv64/lower.isle line 1937.
                    return v1964;
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v13,
            constant_handle: v14,
        } => {
            if let &Opcode::Vconst = v13 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v11 = C::ty_supported_vec(ctx, v3);
                    if let Some(v12) = v11 {
                        let v15 = C::const_to_vconst(ctx, v14);
                        let v16 = constructor_gen_constant(ctx, v12, v15);
                        let v17 = constructor_output_vreg(ctx, v16);
                        let v18 = Some(v17);
                        // Rule at src/isa/riscv64/lower.isle line 13.
                        return v18;
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2383,
            global_value: v2384,
        } => {
            match v2383 {
                &Opcode::SymbolValue => {
                    let v2385 = C::symbol_value_data(ctx, v2384);
                    if let Some(v2386) = v2385 {
                        let v2390 = C::load_ext_name(ctx, v2386.0, v2386.2);
                        let v2391 = constructor_output_reg(ctx, v2390);
                        let v2392 = Some(v2391);
                        // Rule at src/isa/riscv64/lower.isle line 2508.
                        return v2392;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2385 = C::symbol_value_data(ctx, v2384);
                        if let Some(v2386) = v2385 {
                            let v3 = C::value_type(ctx, v2);
                            let v2393 = &C::tls_model(ctx, v3);
                            if let &TlsModel::ElfGd = v2393 {
                                let v2394 = constructor_elf_tls_get_addr(ctx, v2386.0);
                                let v2395 = constructor_output_reg(ctx, v2394);
                                let v2396 = Some(v2395);
                                // Rule at src/isa/riscv64/lower.isle line 2513.
                                return v2396;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F16const = v19 {
                let v21 = C::u16_from_ieee16(ctx, v20);
                let v23 = C::u16_as_u64(ctx, v21);
                let v24 = constructor_imm(ctx, F16, v23);
                let v25 = constructor_output_reg(ctx, v24);
                let v26 = Some(v25);
                // Rule at src/isa/riscv64/lower.isle line 18.
                return v26;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v27,
            imm: v28,
        } => {
            if let &Opcode::F32const = v27 {
                let v29 = C::u32_from_ieee32(ctx, v28);
                let v31 = C::u32_as_u64(ctx, v29);
                let v32 = constructor_imm(ctx, F32, v31);
                let v33 = constructor_output_reg(ctx, v32);
                let v34 = Some(v33);
                // Rule at src/isa/riscv64/lower.isle line 23.
                return v34;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v35,
            imm: v36,
        } => {
            if let &Opcode::F64const = v35 {
                let v37 = C::u64_from_ieee64(ctx, v36);
                let v39 = constructor_imm(ctx, F64, v37);
                let v40 = constructor_output_reg(ctx, v39);
                let v41 = Some(v40);
                // Rule at src/isa/riscv64/lower.isle line 28.
                return v41;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src/isa/riscv64/lower.isle line 8.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1_u64 => {
            let v3 = Some(AluOPRRR::Sh1add);
            // Rule at src/isa/riscv64/lower.isle line 59.
            return v3;
        }
        0x2_u64 => {
            let v5 = Some(AluOPRRR::Sh2add);
            // Rule at src/isa/riscv64/lower.isle line 60.
            return v5;
        }
        0x3_u64 => {
            let v7 = Some(AluOPRRR::Sh3add);
            // Rule at src/isa/riscv64/lower.isle line 61.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1_u64 => {
            let v3 = Some(AluOPRRR::Sh1adduw);
            // Rule at src/isa/riscv64/lower.isle line 81.
            return v3;
        }
        0x2_u64 => {
            let v5 = Some(AluOPRRR::Sh2adduw);
            // Rule at src/isa/riscv64/lower.isle line 82.
            return v5;
        }
        0x3_u64 => {
            let v7 = Some(AluOPRRR::Sh3adduw);
            // Rule at src/isa/riscv64/lower.isle line 83.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term nonzero_divisor.
pub fn constructor_nonzero_divisor<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(
        ctx,
        &IntCC::Equal,
        arg0,
        v2,
        &TrapCode::INTEGER_DIVISION_BY_ZERO,
    );
    // Rule at src/isa/riscv64/lower.isle line 566.
    return arg0;
}

// Generated as internal constructor for term safe_sdiv_divisor.
pub fn constructor_safe_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_nonzero_divisor(ctx, arg2);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_as_u64(ctx, v6);
    let v9 = C::u64_sub(ctx, v7, 0x1_u64);
    let v10 = C::u64_shl(ctx, 0xffffffffffffffff_u64, v9);
    let v11 = constructor_imm(ctx, I64, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = constructor_rv_xor(ctx, arg1, v12);
    let v14 = constructor_rv_not(ctx, v3);
    let v15 = constructor_rv_or(ctx, v13, v14);
    let v17 = C::zero_reg(ctx);
    let v19 = constructor_gen_trapif(ctx, &IntCC::Equal, v15, v17, &TrapCode::INTEGER_OVERFLOW);
    // Rule at src/isa/riscv64/lower.isle line 606.
    return v3;
}

// Generated as internal constructor for term gen_bitrev.
pub fn constructor_gen_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    match arg0 {
        I8 => {
            let v15 = C::xreg_to_reg(ctx, arg1);
            let v17 = constructor_gen_brev8(ctx, v15, I8);
            let v18 = C::xreg_new(ctx, v17);
            // Rule at src/isa/riscv64/lower.isle line 996.
            return v18;
        }
        I64 => {
            let v19 = constructor_gen_bswap(ctx, I64, arg1);
            let v20 = C::xreg_to_reg(ctx, v19);
            let v21 = constructor_gen_brev8(ctx, v20, I64);
            let v22 = C::xreg_new(ctx, v21);
            // Rule at src/isa/riscv64/lower.isle line 999.
            return v22;
        }
        _ => {}
    }
    let v1 = C::ty_16_or_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::ty_bits(ctx, v4);
            let v8 = C::u8_as_u64(ctx, v7);
            let v9 = C::u64_sub(ctx, 0x40_u64, v8);
            let v10 = constructor_u64_to_imm12(ctx, v9);
            if let Some(v11) = v10 {
                let v13 = constructor_gen_bitrev(ctx, I64, arg1);
                let v14 = constructor_rv_srli(ctx, v13, v11);
                // Rule at src/isa/riscv64/lower.isle line 992.
                return v14;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bitrev", "src/isa/riscv64/lower.isle line 990"
    )
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v24 = C::has_zbb(ctx);
    if v24 == true {
        if arg0 == I64 {
            let v30 = constructor_rv_rev8(ctx, arg1);
            // Rule at src/isa/riscv64/lower.isle line 1044.
            return v30;
        }
        let v20 = C::ty_16_or_32(ctx, arg0);
        if let Some(v21) = v20 {
            let v22 = C::ty_int(ctx, v21);
            if let Some(v23) = v22 {
                let v25 = C::ty_bits(ctx, v23);
                let v26 = C::u8_as_u64(ctx, v25);
                let v27 = C::u64_sub(ctx, 0x40_u64, v26);
                let v28 = constructor_u64_to_imm12(ctx, v27);
                if let Some(v29) = v28 {
                    let v30 = constructor_rv_rev8(ctx, arg1);
                    let v31 = constructor_rv_srli(ctx, v30, v29);
                    // Rule at src/isa/riscv64/lower.isle line 1039.
                    return v31;
                }
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = C::u64_sub(ctx, 0x40_u64, v7);
                let v16 = C::imm_from_bits(ctx, v15);
                let v17 = constructor_rv_slli(ctx, v13, v16);
                let v18 = constructor_rv_srli(ctx, v17, v16);
                let v19 = constructor_rv_or(ctx, v11, v18);
                // Rule at src/isa/riscv64/lower.isle line 1019.
                return v19;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src/isa/riscv64/lower.isle line 1018.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src/isa/riscv64/lower.isle line 1015"
    )
}

// Generated as internal constructor for term gen_clz.
pub fn constructor_gen_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v4 = C::has_zbb(ctx);
    if v4 == true {
        let v5 = constructor_rv_clz(ctx, arg0);
        // Rule at src/isa/riscv64/lower.isle line 1095.
        return v5;
    }
    let v1 = true;
    let v3 = constructor_gen_cltz(ctx, v1, arg0, I64);
    // Rule at src/isa/riscv64/lower.isle line 1093.
    return v3;
}

// Generated as internal constructor for term uextend_load_op.
pub fn constructor_uextend_load_op<C: Context>(ctx: &mut C, arg0: Type) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src/isa/riscv64/lower.isle line 1140.
            return LoadOP::Lbu;
        }
        I16 => {
            // Rule at src/isa/riscv64/lower.isle line 1141.
            return LoadOP::Lhu;
        }
        I32 => {
            // Rule at src/isa/riscv64/lower.isle line 1142.
            return LoadOP::Lwu;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uextend_load_op", "src/isa/riscv64/lower.isle line 1139"
    )
}

// Generated as internal constructor for term sextend_load_op.
pub fn constructor_sextend_load_op<C: Context>(ctx: &mut C, arg0: Type) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src/isa/riscv64/lower.isle line 1157.
            return LoadOP::Lb;
        }
        I16 => {
            // Rule at src/isa/riscv64/lower.isle line 1158.
            return LoadOP::Lh;
        }
        I32 => {
            // Rule at src/isa/riscv64/lower.isle line 1159.
            return LoadOP::Lw;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sextend_load_op", "src/isa/riscv64/lower.isle line 1156"
    )
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(ctx: &mut C, arg0: Value) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3
        {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1_u64,
                    value: v5,
                };
                // Rule at src/isa/riscv64/lower.isle line 1568.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0_u64,
        value: arg0,
    };
    // Rule at src/isa/riscv64/lower.isle line 1569.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(ctx: &mut C, arg0: &IsFneg) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src/isa/riscv64/lower.isle line 1572.
        return v1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_fneg_neg", "src/isa/riscv64/lower.isle line 1571"
    )
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(ctx: &mut C, arg0: &IsFneg) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src/isa/riscv64/lower.isle line 1575.
        return v2;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_fneg_value", "src/isa/riscv64/lower.isle line 1574"
    )
}

// Generated as internal constructor for term rv_fma.
pub fn constructor_rv_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: u64,
    arg3: Value,
    arg4: Value,
    arg5: Value,
) -> InstOutput {
    match arg1 {
        0x0_u64 => {
            match arg2 {
                0x0_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v56 =
                                        constructor_rv_vfmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v57 = constructor_output_vreg(ctx, v56);
                                    // Rule at src/isa/riscv64/lower.isle line 1601.
                                    return v57;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v41 =
                                        constructor_rv_vfmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v42 = constructor_output_vreg(ctx, v41);
                                    // Rule at src/isa/riscv64/lower.isle line 1597.
                                    return v42;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v27 = constructor_rv_vfmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v28 = constructor_output_vreg(ctx, v27);
                        // Rule at src/isa/riscv64/lower.isle line 1593.
                        return v28;
                    }
                    let v1 = C::ty_supported_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v12 = constructor_rv_fmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v13 = constructor_output_freg(ctx, v12);
                        // Rule at src/isa/riscv64/lower.isle line 1589.
                        return v13;
                    }
                }
                0x1_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v58 =
                                        constructor_rv_vfmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v59 = constructor_output_vreg(ctx, v58);
                                    // Rule at src/isa/riscv64/lower.isle line 1602.
                                    return v59;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v43 =
                                        constructor_rv_vfmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v44 = constructor_output_vreg(ctx, v43);
                                    // Rule at src/isa/riscv64/lower.isle line 1598.
                                    return v44;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v29 = constructor_rv_vfmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v30 = constructor_output_vreg(ctx, v29);
                        // Rule at src/isa/riscv64/lower.isle line 1594.
                        return v30;
                    }
                    let v1 = C::ty_supported_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v14 = constructor_rv_fmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v15 = constructor_output_freg(ctx, v14);
                        // Rule at src/isa/riscv64/lower.isle line 1590.
                        return v15;
                    }
                }
                _ => {}
            }
        }
        0x1_u64 => {
            match arg2 {
                0x0_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v60 =
                                        constructor_rv_vfnmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v61 = constructor_output_vreg(ctx, v60);
                                    // Rule at src/isa/riscv64/lower.isle line 1603.
                                    return v61;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v45 =
                                        constructor_rv_vfnmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v46 = constructor_output_vreg(ctx, v45);
                                    // Rule at src/isa/riscv64/lower.isle line 1599.
                                    return v46;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v31 = constructor_rv_vfnmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v32 = constructor_output_vreg(ctx, v31);
                        // Rule at src/isa/riscv64/lower.isle line 1595.
                        return v32;
                    }
                    let v1 = C::ty_supported_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v16 = constructor_rv_fnmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v17 = constructor_output_freg(ctx, v16);
                        // Rule at src/isa/riscv64/lower.isle line 1591.
                        return v17;
                    }
                }
                0x1_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v62 =
                                        constructor_rv_vfnmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v63 = constructor_output_vreg(ctx, v62);
                                    // Rule at src/isa/riscv64/lower.isle line 1604.
                                    return v63;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v47 =
                                        constructor_rv_vfnmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v48 = constructor_output_vreg(ctx, v47);
                                    // Rule at src/isa/riscv64/lower.isle line 1600.
                                    return v48;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v33 = constructor_rv_vfnmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v34 = constructor_output_vreg(ctx, v33);
                        // Rule at src/isa/riscv64/lower.isle line 1596.
                        return v34;
                    }
                    let v1 = C::ty_supported_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v18 = constructor_rv_fnmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v19 = constructor_output_freg(ctx, v18);
                        // Rule at src/isa/riscv64/lower.isle line 1592.
                        return v19;
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fma", "src/isa/riscv64/lower.isle line 1588"
    )
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 1652.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 3_i32);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 1680.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    // Rule at src/isa/riscv64/lower.isle line 1683.
    return v8;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -4_i32);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 1687.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 1690.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: AMode,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v13 = constructor_rv_vzext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 2136.
            return v13;
        }
        &ExtendOp::Signed => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v12 = constructor_rv_vsext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 2130.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src/isa/riscv64/lower.isle line 2128"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> XReg {
    match arg0 {
        &IntCC::Equal => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v20 = constructor_rv_seqz(ctx, v19);
                        // Rule at src/isa/riscv64/lower.isle line 2210.
                        return v20;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v12 = constructor_rv_seqz(ctx, v11);
                        // Rule at src/isa/riscv64/lower.isle line 2207.
                        return v12;
                    }
                }
            }
        }
        &IntCC::NotEqual => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v22 = constructor_rv_snez(ctx, v19);
                        // Rule at src/isa/riscv64/lower.isle line 2218.
                        return v22;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v21 = constructor_rv_snez(ctx, v11);
                        // Rule at src/isa/riscv64/lower.isle line 2215.
                        return v21;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThan => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v24 = constructor_rv_slti(ctx, v18, v17);
                        // Rule at src/isa/riscv64/lower.isle line 2226.
                        return v24;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v47 = &C::intcc_complement(ctx, arg0);
                        let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                        let v50 = C::imm12_const(ctx, 1_i32);
                        let v51 = constructor_rv_xori(ctx, v48, v50);
                        // Rule at src/isa/riscv64/lower.isle line 2237.
                        return v51;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v23 = constructor_rv_slti(ctx, v10, v9);
                        // Rule at src/isa/riscv64/lower.isle line 2223.
                        return v23;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v36 = C::def_inst(ctx, arg1);
            if let Some(v37) = v36 {
                let v38 = &C::inst_data(ctx, v37);
                if let &InstructionData::UnaryImm {
                    opcode: ref v39,
                    imm: v40,
                } = v38
                {
                    if let &Opcode::Iconst = v39 {
                        let v41 = C::u64_from_imm64(ctx, v40);
                        let v42 = C::u64_is_zero(ctx, v41);
                        if v42 == false {
                            let v43 = C::imm12_from_u64(ctx, v41);
                            if let Some(v44) = v43 {
                                let v45 = constructor_zext(ctx, arg2);
                                let v46 = constructor_rv_sltiu(ctx, v45, v44);
                                // Rule at src/isa/riscv64/lower.isle line 2232.
                                return v46;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v47 = &C::intcc_complement(ctx, arg0);
                                let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                                let v50 = C::imm12_const(ctx, 1_i32);
                                let v51 = constructor_rv_xori(ctx, v48, v50);
                                // Rule at src/isa/riscv64/lower.isle line 2240.
                                return v51;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v34 = constructor_zext(ctx, arg1);
                                let v35 = constructor_rv_sltiu(ctx, v34, v33);
                                // Rule at src/isa/riscv64/lower.isle line 2229.
                                return v35;
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let v3 = constructor_icmp_to_int_compare(ctx, arg0, arg1, arg2);
    let v4 = constructor_lower_int_compare(ctx, v3);
    // Rule at src/isa/riscv64/lower.isle line 2203.
    return v4;
}

// Generated as internal constructor for term lower_int_compare.
pub fn constructor_lower_int_compare<C: Context>(ctx: &mut C, arg0: IntegerCompare) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    match &v1.0 {
        &IntCC::Equal => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v12 = constructor_rv_seqz(ctx, v1.2);
                // Rule at src/isa/riscv64/lower.isle line 2253.
                return v12;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v9 = constructor_rv_seqz(ctx, v1.1);
                // Rule at src/isa/riscv64/lower.isle line 2251.
                return v9;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v6 = constructor_rv_seqz(ctx, v5);
            // Rule at src/isa/riscv64/lower.isle line 2249.
            return v6;
        }
        &IntCC::NotEqual => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v15 = constructor_rv_snez(ctx, v1.2);
                // Rule at src/isa/riscv64/lower.isle line 2260.
                return v15;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v14 = constructor_rv_snez(ctx, v1.1);
                // Rule at src/isa/riscv64/lower.isle line 2258.
                return v14;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v13 = constructor_rv_snez(ctx, v5);
            // Rule at src/isa/riscv64/lower.isle line 2256.
            return v13;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            // Rule at src/isa/riscv64/lower.isle line 2268.
            return v18;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v16, v21);
            // Rule at src/isa/riscv64/lower.isle line 2278.
            return v24;
        }
        &IntCC::SignedLessThan => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            // Rule at src/isa/riscv64/lower.isle line 2263.
            return v16;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v22 = constructor_rv_xori(ctx, v18, v21);
            // Rule at src/isa/riscv64/lower.isle line 2273.
            return v22;
        }
        &IntCC::UnsignedGreaterThan => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            // Rule at src/isa/riscv64/lower.isle line 2270.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v25 = constructor_rv_xori(ctx, v17, v21);
            // Rule at src/isa/riscv64/lower.isle line 2280.
            return v25;
        }
        &IntCC::UnsignedLessThan => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            // Rule at src/isa/riscv64/lower.isle line 2265.
            return v17;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v23 = constructor_rv_xori(ctx, v19, v21);
            // Rule at src/isa/riscv64/lower.isle line 2275.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_int_compare", "src/isa/riscv64/lower.isle line 2246"
    )
}

// Generated as internal constructor for term lower_icmp_i128.
pub fn constructor_lower_icmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> XReg {
    let v25 = &C::intcc_unsigned(ctx, arg0);
    if let &IntCC::UnsignedLessThan = v25 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v26 = C::value_regs_get(ctx, arg1, 0x1_usize);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v27 = C::value_regs_get(ctx, arg2, 0x1_usize);
        let v28 = C::xreg_new(ctx, v26);
        let v29 = C::xreg_new(ctx, v27);
        let v30 = C::int_compare(ctx, arg0, v28, v29);
        let v31 = constructor_lower_int_compare(ctx, v30);
        let v32 = C::xreg_new(ctx, v4);
        let v33 = C::xreg_new(ctx, v6);
        let v34 = constructor_rv_sltu(ctx, v32, v33);
        let v35 = C::xreg_new(ctx, v26);
        let v36 = C::xreg_new(ctx, v27);
        let v37 = constructor_rv_xor(ctx, v35, v36);
        let v38 = constructor_cmp_eqz(ctx, v37);
        let v39 = constructor_gen_select_xreg(ctx, v38, v34, v31);
        // Rule at src/isa/riscv64/lower.isle line 2321.
        return v39;
    }
    match arg0 {
        &IntCC::Equal => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v16 = constructor_rv_seqz(ctx, v15);
            // Rule at src/isa/riscv64/lower.isle line 2292.
            return v16;
        }
        &IntCC::NotEqual => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v17 = constructor_rv_snez(ctx, v15);
            // Rule at src/isa/riscv64/lower.isle line 2296.
            return v17;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src/isa/riscv64/lower.isle line 2302.
            return v19;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2310.
            return v24;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2308.
            return v24;
        }
        &IntCC::UnsignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src/isa/riscv64/lower.isle line 2304.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2314.
            return v24;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2312.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_i128", "src/isa/riscv64/lower.isle line 2291"
    )
}

// Generated as internal constructor for term lower_float_compare.
pub fn constructor_lower_float_compare<C: Context>(ctx: &mut C, arg0: &FloatCompare) -> XReg {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            // Rule at src/isa/riscv64/lower.isle line 2341.
            return v1;
        }
        &FloatCompare::Zero { r: v2 } => {
            let v3 = constructor_rv_seqz(ctx, v2);
            // Rule at src/isa/riscv64/lower.isle line 2342.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_float_compare", "src/isa/riscv64/lower.isle line 2340"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_uint.
pub fn constructor_lower_inbounds_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtlu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2372.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtwu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2370.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_uint", "src/isa/riscv64/lower.isle line 2369"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_sint.
pub fn constructor_lower_inbounds_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtl(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2389.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtw(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2387.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_sint", "src/isa/riscv64/lower.isle line 2386"
    )
}

// Generated as internal constructor for term lower_fcvt_to_sint_sat.
pub fn constructor_lower_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v16 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2405.
            return v16;
        }
        I64 => {
            let v17 = constructor_rv_fcvtl(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2406.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = true;
        let v6 = C::fcvt_smax_bound(ctx, arg0, v3, v5);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::fcvt_smin_bound(ctx, arg0, v3, v5);
        let v10 = constructor_imm(ctx, arg0, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_fmax(ctx, arg0, v11, arg2);
        let v13 = constructor_rv_fmin(ctx, arg0, v8, v12);
        let v15 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, v13);
        // Rule at src/isa/riscv64/lower.isle line 2400.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_sint_sat", "src/isa/riscv64/lower.isle line 2399"
    )
}

// Generated as internal constructor for term handle_fcvt_to_int_nan.
pub fn constructor_handle_fcvt_to_int_nan<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    let v4 = constructor_rv_neg(ctx, v3);
    let v5 = constructor_rv_and(ctx, arg2, v4);
    // Rule at src/isa/riscv64/lower.isle line 2424.
    return v5;
}

// Generated as internal constructor for term lower_fcvt_to_uint_sat.
pub fn constructor_lower_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v15 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2448.
            return v15;
        }
        I64 => {
            let v16 = constructor_rv_fcvtlu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2449.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = true;
        let v6 = C::fcvt_umax_bound(ctx, arg0, v3, v5);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_rv_fmvdx(ctx, v9);
        let v11 = constructor_rv_fmax(ctx, arg0, v10, arg2);
        let v12 = constructor_rv_fmin(ctx, arg0, v8, v11);
        let v14 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, v12);
        // Rule at src/isa/riscv64/lower.isle line 2443.
        return v14;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_uint_sat", "src/isa/riscv64/lower.isle line 2442"
    )
}
